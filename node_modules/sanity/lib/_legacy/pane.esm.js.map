{"version":3,"file":"pane.esm.js","sources":["../../src/structure/i18n/index.ts","../../src/structure/components/DocTitle.tsx","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.styles.tsx","../../src/structure/components/paneItem/PaneItemPreview.tsx","../../src/structure/components/paneRouter/BackLink.tsx","../../src/structure/components/pane/usePaneLayout.ts","../../src/structure/components/paneRouter/ChildLink.tsx","../../src/structure/components/paneRouter/ParameterizedLink.tsx","../../src/structure/components/paneRouter/ReferenceChildLink.tsx","../../src/structure/components/paneRouter/usePaneRouter.ts","../../src/structure/components/confirmDeleteDialog/ReferencePreviewLink.tsx","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.tsx","../../src/structure/components/confirmDeleteDialog/useReferringDocuments.ts","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialog.tsx","../../src/structure/components/confirmDeleteDialog/index.tsx","../../src/structure/components/Delay.tsx","../../src/structure/components/pane/constants.ts","../../src/structure/components/pane/PaneDivider.tsx","../../src/structure/components/pane/Pane.tsx","../../src/structure/components/pane/PaneContent.styles.tsx","../../src/structure/components/pane/usePane.ts","../../src/structure/components/pane/PaneContent.tsx","../../src/structure/util/toLowerCaseNoSpaces.tsx","../../src/structure/components/pane/PaneMenuButtonItem.tsx","../../src/structure/components/pane/PaneContextMenuButton.tsx","../../src/structure/components/pane/PaneFooter.styles.tsx","../../src/structure/components/pane/PaneFooter.tsx","../../src/structure/components/pane/PaneHeader.styles.tsx","../../src/structure/components/pane/PaneHeader.tsx","../../src/structure/components/pane/PaneHeaderActionButton.tsx","../../src/structure/components/pane/PaneLayout.styles.tsx","../../src/structure/components/pane/helpers/_calcPaneResize.ts","../../src/structure/components/pane/helpers/_getDOMPath.ts","../../src/structure/components/pane/helpers/_sortElements.ts","../../src/structure/components/pane/paneLayoutController.ts","../../src/structure/components/pane/PaneLayout.tsx","../../src/structure/menuNodes.ts","../../src/structure/components/IntentButton.tsx","../../src/structure/components/paneHeaderActions/InsufficientPermissionsMessageTooltip.tsx","../../src/structure/components/paneHeaderActions/PaneHeaderCreateButton.tsx","../../src/structure/components/paneHeaderActions/PaneHeaderActions.tsx","../../src/structure/components/MissingSchemaType.tsx","../../src/structure/components/paneItem/PaneItem.tsx","../../src/structure/components/RenderActionCollectionState.tsx","../../src/structure/components/RenderBadgeCollectionState.tsx","../../src/structure/panes/error/ErrorPane.tsx","../../src/structure/panes/loading/getWaitMessages.ts","../../src/structure/panes/loading/LoadingPane.tsx","../../src/structure/panes/document/useDocumentPane.tsx","../../src/structure/panes/document/comments/CommentsWrapper.tsx","../../src/structure/constants.ts","../../src/structure/useStructureTool.ts","../../src/structure/panes/document/constants.ts","../../src/structure/panes/document/DocumentInspectorMenuItemsResolver.tsx","../../src/structure/panes/document/useDocumentTitle.ts","../../src/structure/panes/document/DocumentOperationResults.tsx","../../src/structure/components/paneItem/helpers.tsx","../../src/structure/panes/document/documentInspector/DocumentInspectorHeader.tsx","../../src/structure/panes/document/documentInspector/Resizer.tsx","../../src/structure/panes/document/documentInspector/Resizable.tsx","../../src/structure/panes/document/documentInspector/DocumentInspectorPanel.tsx","../../src/structure/useStructureToolSetting.ts","../../src/structure/panes/document/inspectDialog/constants.ts","../../src/structure/panes/document/inspectDialog/helpers.ts","../../src/structure/panes/document/inspectDialog/InspectDialog.styles.tsx","../../src/structure/panes/document/inspectDialog/Search.tsx","../../src/structure/panes/document/inspectDialog/InspectDialog.tsx","../../src/structure/panes/document/documentPanel/banners/Banner.tsx","../../src/structure/panes/document/documentPanel/banners/DeletedDocumentBanner.tsx","../../src/structure/panes/document/documentPanel/banners/DeprecatedDocumentTypeBanner.tsx","../../src/structure/components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry.ts","../../src/structure/components/requestPermissionDialog/RequestPermissionDialog.tsx","../../src/structure/components/requestPermissionDialog/useRoleRequestsStatus.tsx","../../src/structure/panes/document/documentPanel/banners/InsufficientPermissionBanner.tsx","../../src/structure/panes/document/documentPanel/banners/ReferenceChangedBanner.tsx","../../src/structure/panes/document/documentPanel/banners/__telemetry__/DraftLiveEditBanner.telemetry.ts","../../src/structure/panes/document/documentPanel/banners/DraftLiveEditBanner.tsx","../../src/structure/panes/document/documentPanel/documentViews/FormHeader.tsx","../../src/structure/panes/document/documentPanel/documentViews/useConditionalToast.ts","../../src/structure/panes/document/documentPanel/documentViews/FormView.tsx","../../src/structure/panes/document/documentPanel/DocumentPanel.tsx","../../src/structure/panes/document/statusBar/dialogs/constants.ts","../../src/structure/panes/document/statusBar/dialogs/ConfirmDialog.tsx","../../src/structure/panes/document/statusBar/dialogs/ModalDialog.tsx","../../src/structure/panes/document/statusBar/dialogs/PopoverDialog.tsx","../../src/structure/panes/document/statusBar/ActionStateDialog.tsx","../../src/structure/panes/document/statusBar/ActionMenuButton.tsx","../../src/structure/documentActions/DeleteAction.tsx","../../src/structure/documentActions/DiscardChangesAction.tsx","../../src/structure/documentActions/DuplicateAction.tsx","../../src/structure/documentActions/HistoryRestoreAction.tsx","../../src/structure/documentActions/__telemetry__/documentActions.telemetry.ts","../../src/structure/documentActions/PublishAction.tsx","../../src/structure/documentActions/UnpublishAction.tsx","../../src/structure/panes/document/statusBar/DocumentStatusBarActions.tsx","../../src/structure/panes/document/documentPanel/header/DocumentHeaderTabs.tsx","../../src/structure/panes/document/documentPanel/header/DocumentHeaderTitle.tsx","../../src/structure/panes/document/documentPanel/header/DocumentPanelHeader.tsx","../../src/structure/components/spacerButton/SpacerButton.tsx","../../src/structure/panes/document/statusBar/DocumentBadges.tsx","../../src/structure/panes/document/statusBar/DocumentStatusPulse/AnimatedStatusIcon.tsx","../../src/structure/panes/document/statusBar/DocumentStatusPulse/DocumentStatusPulse.tsx","../../src/structure/panes/document/statusBar/DocumentStatusLine.tsx","../../src/structure/panes/document/statusBar/RevisionStatusLine.tsx","../../src/structure/panes/document/statusBar/useResizeObserver.ts","../../src/structure/panes/document/statusBar/DocumentStatusBar.tsx","../../src/structure/panes/document/keyboardShortcuts/DocumentActionShortcuts.tsx","../../src/structure/panes/document/menuItems.ts","../../src/structure/panes/document/usePreviewUrl.ts","../../src/structure/panes/document/document-layout/DocumentLayoutError.tsx","../../src/structure/panes/document/document-layout/DocumentLayout.tsx","../../src/structure/panes/document/document-layout/useDocumentLayoutComponent.ts","../../src/structure/panes/document/__telemetry__/documentPanes.telemetry.ts","../../src/structure/panes/document/getInitialValueTemplateOpts.ts","../../src/structure/panes/document/DocumentPaneProvider.tsx","../../src/structure/panes/document/DocumentPane.tsx","../../src/structure/panes/documentList/constants.ts","../../src/structure/panes/documentList/DocumentListPaneContent.tsx","../../src/structure/panes/documentList/helpers.ts","../../src/structure/structureBuilder/util/getExtendedProjection.ts","../../src/structure/panes/documentList/listenSearchQuery.ts","../../src/structure/panes/documentList/useDocumentList.ts","../../src/structure/panes/documentList/DocumentListPane.tsx","../../src/structure/panes/documentList/PaneHeader.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListSelect.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListProvider.tsx","../../src/structure/panes/documentList/sheetList/SheetListCell.tsx","../../src/structure/panes/documentList/sheetList/useDocumentSheetColumns.tsx","../../src/structure/panes/documentList/sheetList/ColumnsControl.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListFilter.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListHeader.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListPaginator.tsx","../../src/structure/panes/documentList/sheetList/useDocumentSheetListStore.ts","../../src/structure/panes/documentList/sheetList/useDocumentSheetList.ts","../../src/structure/panes/documentList/sheetList/DocumentSheetListPane.tsx","../../src/structure/panes/documentList/PaneContainer.tsx","../../src/structure/structureBuilder/SerializeError.ts","../../src/structure/structureBuilder/Sort.ts","../../src/structure/structureBuilder/MenuItem.ts","../../src/structure/structureBuilder/MenuItemGroup.ts","../../src/structure/structureBuilder/util/validateId.ts","../../src/structure/structureBuilder/util/getStructureNodeId.ts","../../src/structure/structureBuilder/Component.ts","../../src/structure/structureBuilder/util/resolveTypeForDocument.ts","../../src/structure/structureBuilder/views/View.ts","../../src/structure/structureBuilder/views/ComponentView.ts","../../src/structure/structureBuilder/views/FormView.ts","../../src/structure/structureBuilder/views/index.ts","../../src/structure/structureBuilder/Document.ts","../../src/structure/structureBuilder/InitialValueTemplateItem.ts","../../src/structure/structureBuilder/Intent.ts","../../src/structure/structureBuilder/Layout.ts","../../src/structure/structureBuilder/GenericList.ts","../../src/structure/structureBuilder/DocumentList.ts","../../src/structure/structureBuilder/List.ts","../../src/structure/structureBuilder/ListItem.ts","../../src/structure/structureBuilder/DocumentListItem.ts","../../src/structure/structureBuilder/DocumentTypeList.ts","../../src/structure/structureBuilder/documentTypeListItems.ts","../../src/structure/structureBuilder/createStructureBuilder.ts","../../src/structure/documentBadges/LiveEditBadge.ts","../../src/structure/getIntentState.ts","../../src/structure/panes/document/timeline/constants.ts","../../src/structure/panes/document/timeline/helpers.ts","../../src/structure/panes/document/timeline/expandableTimelineItemButton.tsx","../../src/structure/panes/document/timeline/timeline.styled.tsx","../../src/structure/panes/document/timeline/timelineI18n.ts","../../src/structure/panes/document/timeline/userAvatarStack.tsx","../../src/structure/panes/document/timeline/timelineItem.tsx","../../src/structure/panes/document/timeline/utils.ts","../../src/structure/panes/document/timeline/timeline.tsx","../../src/structure/panes/document/timeline/TimelineError.tsx","../../src/structure/panes/document/timeline/timelineMenu.tsx","../../src/structure/panes/document/inspectors/changes/ChangesInspector.tsx","../../src/structure/panes/document/inspectors/changes/HistorySelector.tsx","../../src/structure/panes/document/inspectors/changes/ChangesTabs.tsx","../../src/structure/panes/document/inspectors/changes/index.ts","../../src/structure/panes/document/inspectors/validation/getPathTitles.ts","../../src/structure/panes/document/inspectors/validation/ValidationInspector.tsx","../../src/structure/panes/document/inspectors/validation/index.ts","../../src/structure/router.ts","../../src/structure/structureTool.ts","../../src/structure/StructureToolProvider.tsx"],"sourcesContent":["import {defineLocaleResourceBundle} from 'sanity'\n\n/**\n * The locale namespace for the structure tool\n *\n * @public\n */\nexport const structureLocaleNamespace = 'structure' as const\n\n/**\n * The default locale bundle for the structure tool, which is US English.\n *\n * @internal\n */\nexport const structureUsEnglishLocaleBundle = defineLocaleResourceBundle({\n  locale: 'en-US',\n  namespace: structureLocaleNamespace,\n  resources: () => import('./resources'),\n})\n\n/**\n * The locale resource keys for the structure tool.\n *\n * @alpha\n * @hidden\n */\nexport type {StructureLocaleResourceKeys} from './resources'\n","import {type SanityDocumentLike} from '@sanity/types'\nimport {unstable_useValuePreview as useValuePreview, useSchema, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface DocTitleProps {\n  document: SanityDocumentLike\n}\n\nexport function DocTitle(props: DocTitleProps) {\n  const {document: documentValue} = props\n  const schema = useSchema()\n  const schemaType = schema.get(documentValue._type)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const {error, value} = useValuePreview({\n    schemaType: schemaType!,\n    value: documentValue,\n  })\n\n  if (!schemaType) {\n    return <code>{t('doc-title.unknown-schema-type.text', {schemaType: documentValue._type})}</code>\n  }\n\n  if (error) {\n    return <>{t('doc-title.error.text', {errorMessage: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>{t('doc-title.fallback.text')}</span>\n      )}\n    </>\n  )\n}\n","import {InfoOutlineIcon} from '@sanity/icons'\nimport {Box, Flex, Inline, rem, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport const ChevronWrapper = styled(Box)`\n  margin-left: auto;\n`\n\nexport const CrossDatasetReferencesDetails = styled.details`\n  flex: none;\n\n  &[open] ${ChevronWrapper} {\n    transform: rotate(180deg);\n  }\n`\n\nexport const CrossDatasetReferencesSummary = styled.summary`\n  list-style: none;\n\n  &::-webkit-details-marker {\n    display: none;\n  }\n`\n\nexport const Table = styled.table`\n  width: 100%;\n  text-align: left;\n  padding: 0 ${({theme}) => rem(theme.sanity.space[2])};\n  border-collapse: collapse;\n\n  th {\n    padding: ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  td {\n    padding: 0 ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  tr > *:last-child {\n    text-align: right;\n  }\n`\n\nexport const DocumentIdFlex = styled(Flex)`\n  min-height: 33px;\n`\n\nexport const OtherReferenceCount = (props: {totalCount: number; references: unknown[]}) => {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const difference = props.totalCount - props.references.length\n\n  if (!difference) return null\n\n  return (\n    <Box padding={2}>\n      <Inline space={2}>\n        <Text size={1} muted>\n          {t('confirm-delete-dialog.other-reference-count.title', {count: difference})}\n        </Text>\n\n        <Tooltip\n          portal\n          placement=\"top\"\n          content={t('confirm-delete-dialog.other-reference-count.tooltip')}\n        >\n          <Text size={1} muted>\n            <InfoOutlineIcon />\n          </Text>\n        </Tooltip>\n      </Inline>\n    </Box>\n  )\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {Flex} from '@sanity/ui'\nimport {isNumber, isString} from 'lodash'\nimport {type ComponentType, isValidElement, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPresence,\n  DocumentPreviewPresence,\n  type DocumentPreviewStore,\n  DocumentStatus,\n  DocumentStatusIndicator,\n  type GeneralPreviewLayoutKey,\n  getPreviewStateObservable,\n  getPreviewValueWithFallback,\n  isRecord,\n  SanityDefaultPreview,\n} from 'sanity'\n\nimport {TooltipDelayGroupProvider} from '../../../ui-components'\n\nexport interface PaneItemPreviewProps {\n  documentPreviewStore: DocumentPreviewStore\n  icon: ComponentType | false\n  layout: GeneralPreviewLayoutKey\n  presence?: DocumentPresence[]\n  schemaType: SchemaType\n  value: SanityDocument\n}\n\n/**\n * Preview component for _documents_ rendered in structure panes.\n *\n * Note that non-document previews are not handled by this component,\n * despite being pane items! Non-document previews bypass this entirely\n * and are rendered by `<SanityDefaultPreview>`.\n */\nexport function PaneItemPreview(props: PaneItemPreviewProps) {\n  const {icon, layout, presence, schemaType, value} = props\n  const title =\n    (isRecord(value.title) && isValidElement(value.title)) ||\n    isString(value.title) ||\n    isNumber(value.title)\n      ? value.title\n      : null\n\n  const previewStateObservable = useMemo(\n    () => getPreviewStateObservable(props.documentPreviewStore, schemaType, value._id, title),\n    [props.documentPreviewStore, schemaType, title, value._id],\n  )\n  const {draft, published, isLoading} = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n  })\n\n  const status = isLoading ? null : (\n    <TooltipDelayGroupProvider>\n      <Flex align=\"center\" gap={3}>\n        {presence && presence.length > 0 && <DocumentPreviewPresence presence={presence} />}\n        <DocumentStatusIndicator draft={draft} published={published} />\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n\n  const tooltip = <DocumentStatus draft={draft} published={published} />\n\n  return (\n    <SanityDefaultPreview\n      {...getPreviewValueWithFallback({value, draft, published})}\n      isPlaceholder={isLoading}\n      icon={icon}\n      layout={layout}\n      status={status}\n      tooltip={tooltip}\n    />\n  )\n}\n","import {type ComponentType, type ForwardedRef, forwardRef, useContext, useMemo} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type BackLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const BackLink = forwardRef(function BackLink(\n  props: BackLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n  const panes = useMemo(() => routerPanesState.slice(0, groupIndex), [groupIndex, routerPanesState])\n  const state = useMemo(() => ({panes}), [panes])\n\n  return <StateLink {...props} ref={ref} state={state} />\n}) as ComponentType<BackLinkProps>\n","import {useContext} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePaneLayout(): PaneLayoutContextValue {\n  const pane = useContext(PaneLayoutContext)\n\n  if (!pane) {\n    throw new Error('PaneLayout: missing context value')\n  }\n\n  return pane\n}\n","import {type ForwardedRef, forwardRef, useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type ChildLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const ChildLink = forwardRef(function ChildLink(\n  props: ChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {childId, childPayload, childParameters, ...rest} = props\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n\n  return (\n    <StateLink\n      {...rest}\n      ref={ref}\n      state={{\n        panes: [\n          ...routerPanesState.slice(0, groupIndex + 1),\n          [{id: childId, params: childParameters, payload: childPayload}],\n        ],\n      }}\n    />\n  )\n})\n","import {type ForwardedRef, forwardRef, type ReactNode, useContext, useMemo} from 'react'\nimport {useUnique} from 'sanity'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\ninterface ParameterizedLinkProps {\n  params?: Record<string, string>\n  payload?: unknown\n  children?: ReactNode\n}\n\n/**\n * @internal\n */\nexport const ParameterizedLink = forwardRef(function ParameterizedLink(\n  props: ParameterizedLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState: currentPanes, groupIndex, siblingIndex} = useContext(PaneRouterContext)\n  const {params, payload, ...rest} = props\n  const nextParams = useUnique(params)\n  const nextPayload = useUnique(payload)\n\n  const nextState = useMemo(() => {\n    const currentGroup = currentPanes[groupIndex]\n    const currentSibling = currentGroup[siblingIndex]\n\n    const nextSibling = {\n      ...currentSibling,\n      params: nextParams ?? currentSibling.params,\n      payload: nextPayload ?? currentSibling.payload,\n    }\n\n    const nextGroup = [\n      ...currentGroup.slice(0, siblingIndex),\n      nextSibling,\n      ...currentGroup.slice(siblingIndex + 1),\n    ]\n\n    const nextPanes = [\n      ...currentPanes.slice(0, groupIndex),\n      nextGroup,\n      ...currentPanes.slice(groupIndex + 1),\n    ]\n\n    return {panes: nextPanes}\n  }, [currentPanes, groupIndex, nextParams, nextPayload, siblingIndex])\n\n  return <StateLink ref={ref} {...rest} state={nextState} />\n})\n","import {toString as pathToString} from '@sanity/util/paths'\nimport {type ForwardedRef, forwardRef} from 'react'\n\nimport {ChildLink} from './ChildLink'\nimport {type ReferenceChildLinkProps} from './types'\n\nexport const ReferenceChildLink = forwardRef(function ReferenceChildLink(\n  {documentId, documentType, parentRefPath, children, template, ...rest}: ReferenceChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  return (\n    <ChildLink\n      {...rest}\n      ref={ref}\n      childId={documentId}\n      childPayload={template?.params}\n      childParameters={{\n        type: documentType,\n        parentRefPath: pathToString(parentRefPath),\n        ...(template && {template: template?.id}),\n      }}\n    >\n      {children}\n    </ChildLink>\n  )\n})\n","import {useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\n\nimport {type PaneRouterContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta\n */\nexport function usePaneRouter(): PaneRouterContextValue {\n  return useContext(PaneRouterContext)\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {type ReactNode, useCallback} from 'react'\nimport {\n  type FIXME,\n  getPublishedId,\n  PreviewCard,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {PaneItemPreview} from '../paneItem/PaneItemPreview'\nimport {usePaneRouter} from '../paneRouter'\n\nconst EMPTY_ARRAY: [] = []\n\ninterface ReferencePreviewLinkProps {\n  onClick?: () => void\n  type: SchemaType & {icon?: any}\n  value: SanityDocument\n}\n\nexport function ReferencePreviewLink(props: ReferencePreviewLinkProps) {\n  const {onClick, type, value} = props\n  const publishedId = getPublishedId(value?._id)\n  const documentPresence = useDocumentPresence(publishedId)\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ReferenceChildLink} = usePaneRouter()\n\n  const Link = useCallback(\n    function LinkComponent(linkProps: {children: ReactNode}) {\n      return (\n        <ReferenceChildLink\n          documentId={value?._id}\n          documentType={type?.name}\n          parentRefPath={EMPTY_ARRAY}\n          {...linkProps}\n        />\n      )\n    },\n    [ReferenceChildLink, type?.name, value?._id],\n  )\n\n  return (\n    <PreviewCard __unstable_focusRing as={Link as FIXME} data-as=\"a\" onClick={onClick} radius={2}>\n      <PaneItemPreview\n        documentPreviewStore={documentPreviewStore}\n        icon={type?.icon}\n        layout=\"compact\"\n        presence={documentPresence?.length > 0 ? documentPresence : EMPTY_ARRAY}\n        schemaType={type}\n        value={value}\n      />\n    </PreviewCard>\n  )\n}\n","import {\n  ChevronDownIcon,\n  CopyIcon,\n  DocumentsIcon,\n  UnknownIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {Box, Card, Flex, Stack, Text, useToast} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport CopyToClipboard from 'react-copy-to-clipboard'\nimport {SanityDefaultPreview, Translate, useSchema, useTranslation} from 'sanity'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {\n  ChevronWrapper,\n  CrossDatasetReferencesDetails,\n  CrossDatasetReferencesSummary,\n  DocumentIdFlex,\n  OtherReferenceCount,\n  Table,\n} from './ConfirmDeleteDialogBody.styles'\nimport {ReferencePreviewLink} from './ReferencePreviewLink'\nimport {type ReferringDocuments} from './useReferringDocuments'\n\ntype DeletionConfirmationDialogBodyProps = Required<ReferringDocuments> & {\n  documentTitle: React.ReactNode\n  action: 'unpublish' | 'delete'\n  onReferenceLinkClick?: () => void\n}\n\n/**\n * The inner part of the `ConfirmDeleteDialog`. This is ran when both the\n * `crossDatasetReferences` and `internalReferences` are loaded.\n */\nexport function ConfirmDeleteDialogBody({\n  crossDatasetReferences,\n  internalReferences,\n  documentTitle,\n  totalCount,\n  action,\n  datasetNames,\n  hasUnknownDatasetNames,\n  onReferenceLinkClick,\n}: DeletionConfirmationDialogBodyProps) {\n  const schema = useSchema()\n  const toast = useToast()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const renderPreviewItem = useCallback(\n    (item: any) => {\n      const type = schema.get(item._type)\n      if (type) {\n        return <ReferencePreviewLink type={type} value={item} onClick={onReferenceLinkClick} />\n      }\n\n      return (\n        // Padding added to match the ReferencePreviewLink styling\n        <Box padding={2}>\n          <SanityDefaultPreview\n            icon={UnknownIcon}\n            title={t('confirm-delete-dialog.preview-item.preview-unavailable.title')}\n            subtitle={t('confirm-delete-dialog.preview-item.preview-unavailable.subtitle', {\n              documentId: item._id,\n            })}\n            layout=\"default\"\n          />\n        </Box>\n      )\n    },\n    [schema, t, onReferenceLinkClick],\n  )\n\n  if (internalReferences?.totalCount === 0 && crossDatasetReferences?.totalCount === 0) {\n    return (\n      <Text as=\"p\" size={1}>\n        <Translate\n          t={t}\n          i18nKey=\"confirm-delete-dialog.confirmation.text\"\n          context={action}\n          components={{DocumentTitle: () => <strong>{documentTitle}</strong>}}\n        />\n      </Text>\n    )\n  }\n\n  // We do some extra checks to handle cases where you have unavailable dataset\n  // name(s) due to permissions, both alone and in combination with known datasets\n\n  // This normalizes one or more undefined dataset names to the catch-all `unavailable`\n  const normalizedDatasetNames = [\n    ...datasetNames,\n    ...(hasUnknownDatasetNames ? ['unavailable'] : []),\n  ]\n\n  const datasetSubtitle = t('confirm-delete-dialog.cdr-summary.subtitle', {\n    count: normalizedDatasetNames.length,\n    datasets: normalizedDatasetNames.join(', '),\n    context: hasUnknownDatasetNames && normalizedDatasetNames.length ? 'unavailable' : '',\n  })\n\n  return (\n    <Flex direction=\"column\" gap={4}>\n      <Card padding={3} radius={2} tone=\"caution\" flex=\"none\">\n        <Flex>\n          <Text aria-hidden=\"true\" size={1}>\n            <WarningOutlineIcon />\n          </Text>\n          <Box flex={1} marginLeft={3}>\n            <Text size={1}>\n              <Translate\n                i18nKey=\"confirm-delete-dialog.referring-document-count.text\"\n                components={{DocumentTitle: () => documentTitle}}\n                t={t}\n                values={{count: totalCount}}\n              />\n            </Text>\n          </Box>\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referring-documents-descriptor.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n      <Card radius={2} shadow={1} flex=\"auto\" padding={2}>\n        <Flex direction=\"column\">\n          {internalReferences.totalCount > 0 && (\n            <Stack as=\"ul\" marginBottom={2} space={2} data-testid=\"internal-references\">\n              {internalReferences?.references.map((item) => (\n                <Box as=\"li\" key={item._id}>\n                  {renderPreviewItem(item)}\n                </Box>\n              ))}\n\n              {internalReferences.totalCount > internalReferences.references.length && (\n                <Box as=\"li\" padding={3}>\n                  <OtherReferenceCount {...internalReferences} />\n                </Box>\n              )}\n            </Stack>\n          )}\n\n          {crossDatasetReferences.totalCount > 0 && (\n            <CrossDatasetReferencesDetails\n              data-testid=\"cross-dataset-references\"\n              style={{\n                // only add the border if needed\n                borderTop:\n                  internalReferences.totalCount > 0\n                    ? '1px solid var(--card-shadow-outline-color)'\n                    : undefined,\n              }}\n            >\n              <CrossDatasetReferencesSummary>\n                <Card\n                  as=\"a\"\n                  marginTop={internalReferences.totalCount > 0 ? 2 : 0}\n                  radius={2}\n                  shadow={1}\n                  paddingY={1}\n                >\n                  <Flex align=\"center\" gap={3} paddingX={3} paddingY={1}>\n                    <Text size={1}>\n                      <DocumentsIcon />\n                    </Text>\n                    <Stack space={2}>\n                      <Text textOverflow=\"ellipsis\" size={1}>\n                        {t('confirm-delete-dialog.cdr-summary.title', {\n                          count: normalizedDatasetNames.length,\n                          documentCount: t('confirm-delete-dialog.cdr-summary.document-count', {\n                            count: crossDatasetReferences.totalCount,\n                          }),\n                        })}\n                      </Text>\n                      <Text title={datasetSubtitle} textOverflow=\"ellipsis\" size={1} muted>\n                        {datasetSubtitle}\n                      </Text>\n                    </Stack>\n                    <ChevronWrapper>\n                      <Text muted size={1}>\n                        <ChevronDownIcon />\n                      </Text>\n                    </ChevronWrapper>\n                  </Flex>\n                </Card>\n              </CrossDatasetReferencesSummary>\n\n              <Box overflow=\"auto\" paddingTop={2}>\n                <Table>\n                  <thead>\n                    <tr>\n                      <th>\n                        <Text muted size={1} style={{minWidth: '5rem'}} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.project-id.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.dataset.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.document-id.label')}\n                        </Text>\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {crossDatasetReferences.references\n                      .filter((reference): reference is Required<typeof reference> => {\n                        return 'projectId' in reference\n                      })\n                      .map(({projectId, datasetName, documentId}, index) => (\n                        // eslint-disable-next-line react/no-array-index-key\n                        <tr key={`${documentId}-${index}`}>\n                          <td>\n                            <Text size={1}>{projectId}</Text>\n                          </td>\n                          <td>\n                            <Text size={1}>{datasetName || 'unavailable'}</Text>\n                          </td>\n                          <td>\n                            <DocumentIdFlex align=\"center\" gap={2} justify=\"flex-end\">\n                              <Text textOverflow=\"ellipsis\" size={1}>\n                                {documentId || 'unavailable'}\n                              </Text>\n                              {documentId && (\n                                <CopyToClipboard\n                                  text={documentId}\n                                  // eslint-disable-next-line react/jsx-no-bind\n                                  onCopy={() => {\n                                    toast.push({\n                                      title: t(\n                                        'confirm-delete-dialog.cdr-table.id-copied-toast.title',\n                                      ),\n                                      status: 'success',\n                                    })\n                                  }}\n                                >\n                                  <Button\n                                    mode=\"bleed\"\n                                    icon={CopyIcon}\n                                    tooltipProps={{\n                                      content: t(\n                                        'confirm-delete-dialog.cdr-table.copy-id-button.tooltip',\n                                      ),\n                                    }}\n                                  />\n                                </CopyToClipboard>\n                              )}\n                            </DocumentIdFlex>\n                          </td>\n                        </tr>\n                      ))}\n                  </tbody>\n                </Table>\n\n                <OtherReferenceCount {...crossDatasetReferences} />\n              </Box>\n            </CrossDatasetReferencesDetails>\n          )}\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referential-integrity-disclaimer.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n    </Flex>\n  )\n}\n","import {type ClientError, type SanityClient} from '@sanity/client'\nimport {useMemo} from 'react'\nimport {EMPTY, fromEvent, type Observable, of, timer} from 'rxjs'\nimport {\n  catchError,\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n} from 'rxjs/operators'\nimport {\n  type AvailabilityResponse,\n  createHookFromObservableFactory,\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  type DocumentStore,\n  getDraftId,\n  getPublishedId,\n  useClient,\n  useDocumentStore,\n} from 'sanity'\n\n// this is used in place of `instanceof` so the matching can be more robust and\n// won't have any issues with dual packages etc\n// https://nodejs.org/api/packages.html#dual-package-hazard\nfunction isClientError(e: unknown): e is ClientError {\n  if (typeof e !== 'object') return false\n  if (!e) return false\n  return 'statusCode' in e && 'response' in e\n}\n\nconst POLL_INTERVAL = 5000\n\n// only fetches when the document is visible\nlet visiblePoll$: Observable<number>\nconst getVisiblePoll$ = () => {\n  if (!visiblePoll$) {\n    visiblePoll$ = fromEvent(document, 'visibilitychange').pipe(\n      // add empty emission to have this fire on creation\n      startWith(null),\n      map(() => document.visibilityState === 'visible'),\n      distinctUntilChanged(),\n      switchMap((visible) =>\n        visible\n          ? // using timer instead of interval since timer will emit on creation\n            timer(0, POLL_INTERVAL)\n          : EMPTY,\n      ),\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n  }\n  return visiblePoll$\n}\n\nexport type ReferringDocuments = {\n  isLoading: boolean\n  totalCount: number\n  projectIds: string[]\n  datasetNames: string[]\n  hasUnknownDatasetNames: boolean\n  internalReferences?: {\n    totalCount: number\n    references: Array<{_id: string; _type: string}>\n  }\n  crossDatasetReferences?: {\n    totalCount: number\n    references: Array<{\n      /**\n       * The project ID of the document that is currently referencing the subject\n       * document. Unlike `documentId` and `datasetName`, this should always be\n       * defined.\n       */\n      projectId: string\n      /**\n       * The ID of the document that is currently referencing the subject\n       * document. This will be omitted if there is no access to the current\n       * project and dataset pair (e.g. if no `sanity-project-token` were\n       * configured)\n       */\n      documentId?: string\n      /**\n       * The dataset name that is currently referencing the subject document.\n       * This will be omitted if there is no access to the current project and\n       * dataset pair (e.g. if no `sanity-project-token` were configured)\n       */\n      datasetName?: string\n    }>\n  }\n}\n\nfunction getDocumentExistence(\n  documentId: string,\n  {versionedClient}: {versionedClient: SanityClient},\n): Observable<string | undefined> {\n  const draftId = getDraftId(documentId)\n  const publishedId = getPublishedId(documentId)\n  const requestOptions = {\n    uri: versionedClient.getDataUrl('doc', `${draftId},${publishedId}`),\n    json: true,\n    query: {excludeContent: 'true'},\n    tag: 'use-referring-documents.document-existence',\n  }\n  return versionedClient.observable.request<AvailabilityResponse>(requestOptions).pipe(\n    map(({omitted}) => {\n      const nonExistant = omitted.filter((doc) => doc.reason === 'existence')\n      if (nonExistant.length === 2) {\n        // None of the documents exist\n        return undefined\n      }\n\n      if (nonExistant.length === 0) {\n        // Both exist, so use the published one\n        return publishedId\n      }\n\n      // If the draft does not exist, use the published ID, and vice versa\n      return nonExistant.some((doc) => doc.id === draftId) ? publishedId : draftId\n    }),\n  )\n}\n\n/**\n * fetches the cross-dataset references using the client observable.request\n * method (for that requests can be automatically cancelled)\n */\nfunction fetchCrossDatasetReferences(\n  documentId: string,\n  context: {versionedClient: SanityClient},\n): Observable<ReferringDocuments['crossDatasetReferences']> {\n  const {versionedClient} = context\n\n  return getVisiblePoll$().pipe(\n    switchMap(() => getDocumentExistence(documentId, context)),\n    switchMap((checkDocumentId) => {\n      if (!checkDocumentId) {\n        return of({totalCount: 0, references: []})\n      }\n\n      const currentDataset = versionedClient.config().dataset\n\n      return versionedClient.observable\n        .request({\n          url: `/data/references/${currentDataset}/documents/${checkDocumentId}/to?excludeInternalReferences=true&excludePaths=true`,\n          tag: 'use-referring-documents.external',\n        })\n        .pipe(\n          catchError((e) => {\n            // it's possible that referencing document doesn't exist yet so the\n            // API will return a 404. In those cases, we want to catch and return\n            // a response with no references\n            if (isClientError(e) && e.statusCode === 404) {\n              return of({totalCount: 0, references: []})\n            }\n\n            throw e\n          }),\n        )\n    }),\n  )\n}\n\nconst useInternalReferences = createHookFromObservableFactory(\n  ([documentId, documentStore]: [string, DocumentStore]) => {\n    const referencesClause = '*[references($documentId)][0...100]{_id,_type}'\n    const totalClause = 'count(*[references($documentId)])'\n    const fetchQuery = `{\"references\":${referencesClause},\"totalCount\":${totalClause}}`\n    const listenQuery = '*[references($documentId)]'\n\n    return documentStore.listenQuery(\n      {fetch: fetchQuery, listen: listenQuery},\n      {documentId},\n      {tag: 'use-referring-documents', transitions: ['appear', 'disappear'], throttleTime: 5000},\n    ) as Observable<ReferringDocuments['internalReferences']>\n  },\n)\n\nconst useCrossDatasetReferences = createHookFromObservableFactory(\n  ([documentId, versionedClient]: [string, SanityClient]) => {\n    // (documentId: string, versionedClient: SanityClient) => {\n    return getVisiblePoll$().pipe(\n      switchMap(() =>\n        fetchCrossDatasetReferences(documentId, {\n          versionedClient,\n        }),\n      ),\n    )\n  },\n)\n\nexport function useReferringDocuments(documentId: string): ReferringDocuments {\n  const versionedClient = useClient(DEFAULT_STUDIO_CLIENT_OPTIONS)\n\n  const documentStore = useDocumentStore()\n  const publishedId = getPublishedId(documentId)\n\n  const [internalReferences, isInternalReferencesLoading] = useInternalReferences(\n    useMemo(() => [publishedId, documentStore], [documentStore, publishedId]),\n  )\n\n  const [crossDatasetReferences, isCrossDatasetReferencesLoading] = useCrossDatasetReferences(\n    useMemo(() => [publishedId, versionedClient], [publishedId, versionedClient]),\n  )\n\n  const projectIds = useMemo(() => {\n    return Array.from(\n      new Set(\n        crossDatasetReferences?.references\n          .map((crossDatasetReference) => crossDatasetReference.projectId)\n          .filter(Boolean),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const datasetNames = useMemo(() => {\n    return Array.from(\n      new Set<string>(\n        crossDatasetReferences?.references\n          // .filter((name) => typeof name === 'string')\n          .map((crossDatasetReference) => crossDatasetReference?.datasetName || '')\n          .filter((datasetName) => Boolean(datasetName) && datasetName !== ''),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const hasUnknownDatasetNames = useMemo(() => {\n    return Boolean(\n      crossDatasetReferences?.references.some(\n        (crossDatasetReference) => typeof crossDatasetReference.datasetName !== 'string',\n      ),\n    )\n  }, [crossDatasetReferences?.references])\n\n  return {\n    totalCount: (internalReferences?.totalCount || 0) + (crossDatasetReferences?.totalCount || 0),\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n    internalReferences,\n    crossDatasetReferences,\n    isLoading: isInternalReferencesLoading || isCrossDatasetReferencesLoading,\n  }\n}\n","import {Box, Flex} from '@sanity/ui'\nimport {useId, useMemo} from 'react'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {DocTitle} from '../DocTitle'\nimport {ConfirmDeleteDialogBody} from './ConfirmDeleteDialogBody'\nimport {useReferringDocuments} from './useReferringDocuments'\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface ConfirmDeleteDialogProps {\n  /**\n   * Incoming document ID used to find other referencing documents. This\n   * field respects draft IDs (e.g. if you pass in a published ID when one\n   * doesn't exist the document title may not show up).\n   */\n  id: string\n  /**\n   * The schema typename of the incoming document\n   */\n  type: string\n  /**\n   * The name of the action being done. (e.g. the `'unpublish'` action requires\n   * the same document deletion confirmation).\n   */\n  action?: 'delete' | 'unpublish'\n  onCancel: () => void\n  onConfirm: () => void\n}\n\n/**\n * A confirmation dialog used to prevent unwanted document deletes. Loads all\n * the referencing internal and cross-data references prior to showing the\n * delete button.\n *\n * @internal\n */\nexport function ConfirmDeleteDialog({\n  id,\n  type,\n  action = 'delete',\n  onCancel,\n  onConfirm,\n}: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const dialogId = `deletion-confirmation-${useId()}`\n  const {\n    internalReferences,\n    crossDatasetReferences,\n    isLoading,\n    totalCount,\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n  } = useReferringDocuments(id)\n  const documentTitle = <DocTitle document={useMemo(() => ({_id: id, _type: type}), [id, type])} />\n  const showConfirmButton = !isLoading\n\n  return (\n    <Dialog\n      width={1}\n      id={dialogId}\n      header={t('confirm-delete-dialog.header.text', {context: action})}\n      footer={{\n        cancelButton: {\n          onClick: onCancel,\n          text: t('confirm-delete-dialog.cancel-button.text'),\n        },\n        confirmButton: showConfirmButton\n          ? {\n              text:\n                totalCount > 0\n                  ? t('confirm-delete-dialog.confirm-anyway-button.text', {context: action})\n                  : t('confirm-delete-dialog.confirm-button.text', {context: action}),\n              onClick: onConfirm,\n            }\n          : undefined,\n      }}\n      onClose={onCancel}\n      onClickOutside={onCancel}\n    >\n      <DialogBody>\n        {crossDatasetReferences && internalReferences && !isLoading ? (\n          <ConfirmDeleteDialogBody\n            crossDatasetReferences={crossDatasetReferences}\n            internalReferences={internalReferences}\n            documentTitle={documentTitle}\n            isLoading={isLoading}\n            totalCount={totalCount}\n            action={action}\n            projectIds={projectIds}\n            datasetNames={datasetNames}\n            hasUnknownDatasetNames={hasUnknownDatasetNames}\n            onReferenceLinkClick={onCancel}\n          />\n        ) : (\n          <LoadingContainer data-testid=\"loading-container\">\n            <LoadingBlock showText title={t('confirm-delete-dialog.loading.text')} />\n          </LoadingContainer>\n        )}\n      </DialogBody>\n    </Dialog>\n  )\n}\n","import {Box, Text} from '@sanity/ui'\nimport {type ComponentProps, useCallback, useId, useState} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {Dialog, ErrorBoundary} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {ConfirmDeleteDialog, type ConfirmDeleteDialogProps} from './ConfirmDeleteDialog'\n\nexport type {ConfirmDeleteDialogProps}\n\ntype ArgType<T> = T extends (arg: infer U) => unknown ? U : never\ntype ErrorInfo = ArgType<ComponentProps<typeof ErrorBoundary>['onCatch']>\n\n/** @internal */\nfunction ConfirmDeleteDialogContainer(props: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const id = useId()\n  const [error, setError] = useState<ErrorInfo | null>(null)\n  const handleRetry = useCallback(() => setError(null), [])\n\n  return error ? (\n    <Dialog\n      id={`dialog-error-${id}`}\n      data-testid=\"confirm-delete-error-dialog\"\n      header={t('confirm-delete-dialog.error.title.text')}\n      footer={{\n        confirmButton: {\n          text: t('confirm-delete-dialog.error.retry-button.text'),\n          onClick: handleRetry,\n          tone: 'default',\n        },\n      }}\n      onClose={props.onCancel}\n    >\n      <Box padding={4}>\n        <Text size={1}>{t('confirm-delete-dialog.error.message.text')}</Text>\n      </Box>\n    </Dialog>\n  ) : (\n    <ErrorBoundary onCatch={setError}>\n      <ConfirmDeleteDialog {...props} />\n    </ErrorBoundary>\n  )\n}\n\nexport {ConfirmDeleteDialogContainer as ConfirmDeleteDialog}\n","import {type ReactElement, useEffect, useState} from 'react'\n\nexport function Delay({\n  children,\n  ms = 0,\n}: {\n  children?: ReactElement | (() => ReactElement)\n  ms?: number\n}): ReactElement {\n  const [ready, setReady] = useState(ms <= 0)\n\n  useEffect(() => {\n    if (ms <= 0) {\n      return undefined\n    }\n\n    const timeoutId = setTimeout(() => setReady(true), ms)\n\n    return () => {\n      clearTimeout(timeoutId)\n    }\n  }, [ms])\n\n  if (!ready || !children) {\n    return <></>\n  }\n\n  return typeof children === 'function' ? children() : children\n}\n","/**\n * @internal\n */\nexport const PANE_DEBUG = false\n\n/**\n * @internal\n */\nexport const PANE_COLLAPSED_WIDTH = 51\n\n/**\n * @internal\n */\nexport const PANE_DEFAULT_MIN_WIDTH = PANE_COLLAPSED_WIDTH * 4\n","import {Layer} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {usePaneLayout} from './usePaneLayout'\n\nconst Root = styled(Layer)`\n  position: relative;\n  width: 1px;\n  min-width: 1px;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    background-color: var(--card-border-color);\n  }\n\n  &:not([data-disabled]) {\n    cursor: ew-resize;\n    width: 9px;\n    min-width: 9px;\n    margin: 0 -4px;\n\n    &:before {\n      left: 4px;\n    }\n\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 9px;\n      bottom: 0;\n      background-color: var(--card-border-color);\n      opacity: 0;\n      transition: opacity 150ms;\n    }\n\n    &[data-dragging]:after,\n    &:hover:after {\n      opacity: 0.2;\n    }\n  }\n`\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneDivider({\n  disabled,\n  element,\n}: {\n  disabled?: boolean\n  element: HTMLElement | null\n}) {\n  const {resize} = usePaneLayout()\n  const [dragging, setDragging] = useState(false)\n\n  const handleMouseDown = useCallback(\n    (event: any) => {\n      if (!element) return\n\n      setDragging(true)\n\n      event.preventDefault()\n\n      const startX = event.pageX\n\n      resize('start', element, 0)\n\n      const handleMouseMove = (e: MouseEvent) => {\n        e.preventDefault()\n\n        const deltaX = e.pageX - startX\n\n        resize('move', element, deltaX)\n      }\n\n      const handleMouseUp = (e: MouseEvent) => {\n        e.preventDefault()\n\n        setDragging(false)\n\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n\n        resize('end', element, 0)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [element, resize],\n  )\n\n  return (\n    <Root\n      data-disabled={disabled ? '' : undefined}\n      data-dragging={dragging ? '' : undefined}\n      onMouseDown={handleMouseDown}\n    />\n  )\n}\n","import {BoundaryElementProvider, Card, type CardProps, Code, Flex} from '@sanity/ui'\nimport {\n  type ForwardedRef,\n  forwardRef,\n  type HTMLProps,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {IsLastPaneProvider, LegacyLayerProvider} from 'sanity'\nimport {PaneContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {PANE_COLLAPSED_WIDTH, PANE_DEBUG, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {PaneDivider} from './PaneDivider'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneProps {\n  children?: ReactNode\n  currentMinWidth?: number\n  currentMaxWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  maxWidth?: number\n  selected?: boolean\n}\n\nconst Root = styled(Card)`\n  outline: none;\n\n  // NOTE: This will render a border to the right side of each pane\n  // without taking up physical space.\n  box-shadow: 1px 0 0 var(--card-border-color);\n`\n\n/**\n * @hidden\n * @internal\n */\n// eslint-disable-next-line complexity\nexport const Pane = forwardRef(function Pane(\n  props: PaneProps &\n    Omit<CardProps, 'as' | 'overflow'> &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'hidden' | 'id' | 'style'>,\n  forwardedRef: ForwardedRef<HTMLDivElement>,\n) {\n  const {\n    children,\n    currentMinWidth: currentMinWidthProp,\n    currentMaxWidth: currentMaxWidthProp,\n    flex: flexProp = 1,\n    id,\n    minWidth: minWidthProp,\n    maxWidth: maxWidthProp,\n    selected = false,\n    ...restProps\n  } = props\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const {\n    collapse,\n    collapsed: layoutCollapsed,\n    expand,\n    expandedElement,\n    mount,\n    panes,\n  } = usePaneLayout()\n  const pane = panes.find((p) => p.element === rootElement)\n  const paneIndex = pane && panes.indexOf(pane)\n  const nextPane = typeof paneIndex === 'number' ? panes[paneIndex + 1] : undefined\n  const isLast = paneIndex === panes.length - 1\n  const expanded = expandedElement === rootElement\n  const collapsed = layoutCollapsed ? false : pane?.collapsed || false\n  const nextCollapsed = nextPane?.collapsed || false\n  const ref = useRef<HTMLDivElement | null>(null)\n  const flex = pane?.flex ?? flexProp\n  const currentMinWidth = pane?.currentMinWidth ?? currentMinWidthProp\n  const currentMaxWidth = pane?.currentMaxWidth ?? currentMaxWidthProp\n\n  // Forward ref to parent\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(forwardedRef, () => ref.current)\n\n  const setRef = useCallback((refValue: HTMLDivElement | null) => {\n    setRootElement(refValue)\n    ref.current = refValue\n  }, [])\n\n  useEffect(() => {\n    if (!rootElement) return undefined\n    return mount(rootElement, {\n      currentMinWidth: currentMinWidthProp,\n      currentMaxWidth: currentMaxWidthProp,\n      flex: flexProp,\n      id,\n      minWidth: minWidthProp,\n      maxWidth: maxWidthProp,\n    })\n  }, [\n    currentMinWidthProp,\n    currentMaxWidthProp,\n    flexProp,\n    id,\n    minWidthProp,\n    maxWidthProp,\n    mount,\n    rootElement,\n  ])\n\n  const handleCollapse = useCallback(() => {\n    if (!rootElement) return\n    collapse(rootElement)\n  }, [collapse, rootElement])\n\n  const handleExpand = useCallback(() => {\n    if (!rootElement) return\n    expand(rootElement)\n  }, [expand, rootElement])\n\n  const contextValue = useMemo(\n    () => ({\n      collapse: handleCollapse,\n      collapsed: layoutCollapsed ? false : collapsed,\n      expand: handleExpand,\n      index: paneIndex,\n      isLast,\n      rootElement,\n    }),\n    [collapsed, handleCollapse, handleExpand, isLast, layoutCollapsed, paneIndex, rootElement],\n  )\n\n  const minWidth = useMemo(() => {\n    if (layoutCollapsed) {\n      return undefined\n    }\n\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (currentMinWidth === 0) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    if (isLast) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    return currentMinWidth || minWidthProp || PANE_DEFAULT_MIN_WIDTH\n  }, [collapsed, currentMinWidth, isLast, layoutCollapsed, minWidthProp])\n\n  const maxWidth = useMemo(() => {\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (layoutCollapsed && isLast) {\n      return undefined\n    }\n\n    if (isLast) {\n      if (maxWidthProp) {\n        return currentMaxWidth ?? maxWidthProp\n      }\n\n      return undefined\n    }\n\n    return currentMaxWidth ?? maxWidthProp\n  }, [collapsed, currentMaxWidth, isLast, layoutCollapsed, maxWidthProp])\n\n  const hidden = layoutCollapsed && !isLast\n\n  const divider = useMemo(\n    () =>\n      !isLast &&\n      !layoutCollapsed && (\n        <LegacyLayerProvider zOffset=\"paneResizer\">\n          <PaneDivider disabled={collapsed || nextCollapsed} element={rootElement} />\n        </LegacyLayerProvider>\n      ),\n    [collapsed, isLast, layoutCollapsed, nextCollapsed, rootElement],\n  )\n\n  const style = useMemo(\n    () => ({\n      flex,\n      minWidth,\n      maxWidth: maxWidth === Infinity ? undefined : maxWidth,\n    }),\n    [flex, minWidth, maxWidth],\n  )\n\n  return (\n    <>\n      <LegacyLayerProvider zOffset=\"pane\">\n        <PaneContext.Provider value={contextValue}>\n          <IsLastPaneProvider isLastPane={isLast}>\n            <Root\n              data-testid=\"pane\"\n              data-ui=\"Pane\"\n              tone=\"inherit\"\n              hidden={hidden}\n              id={id}\n              overflow={layoutCollapsed ? undefined : 'hidden'}\n              {...restProps}\n              data-pane-collapsed={collapsed ? '' : undefined}\n              data-pane-index={paneIndex}\n              data-pane-selected={selected ? '' : undefined}\n              ref={setRef}\n              style={style}\n            >\n              {PANE_DEBUG && (\n                <Card padding={4} tone={expanded ? 'primary' : 'caution'}>\n                  <Code size={1}>\n                    {[\n                      `#${paneIndex}`,\n                      `collapsed=${collapsed}`,\n                      `currentMinWidth=${currentMinWidth}`,\n                      `currentMaxWidth=${currentMaxWidth}`,\n                      `flex=${flex}`,\n                      `minWidth=${minWidth}`,\n                      `maxWidth=${maxWidth}`,\n                    ].join('\\n')}\n                  </Code>\n                </Card>\n              )}\n\n              <BoundaryElementProvider element={rootElement}>\n                {!hidden && (\n                  <Flex direction=\"column\" height=\"fill\">\n                    {children}\n                  </Flex>\n                )}\n              </BoundaryElementProvider>\n            </Root>\n          </IsLastPaneProvider>\n        </PaneContext.Provider>\n      </LegacyLayerProvider>\n\n      {divider}\n    </>\n  )\n})\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  position: relative;\n  outline: none;\n`\n\nRoot.displayName = 'PaneContent__root'\n","import {useContext} from 'react'\nimport {PaneContext} from 'sanity/_singletons'\n\nimport {type PaneContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePane(): PaneContextValue {\n  const pane = useContext(PaneContext)\n\n  if (!pane) {\n    throw new Error('Pane: missing context value')\n  }\n\n  return pane\n}\n","import {type BoxOverflow} from '@sanity/ui'\nimport {type ElementType, type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\nimport {Root} from './PaneContent.styles'\nimport {usePane} from './usePane'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneContentProps {\n  as?: ElementType | keyof JSX.IntrinsicElements\n  overflow?: BoxOverflow\n  padding?: number | number[]\n}\n\n/**\n * @hidden\n * @internal\n */\nexport const PaneContent = forwardRef(function PaneContent(\n  props: PaneContentProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {as, children, overflow, padding, ...restProps} = props\n  const {collapsed} = usePane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  return (\n    <Root\n      data-testid=\"pane-content\"\n      forwardedAs={as}\n      {...restProps}\n      flex={1}\n      hidden={collapsed}\n      overflow={layoutCollapsed ? undefined : overflow}\n      padding={padding}\n      ref={ref}\n      tone=\"inherit\"\n    >\n      {children}\n    </Root>\n  )\n})\n","/**\n * Remove the spaces and lower case the string\n *\n * @param str - string to remove the spaces and lower case\n * @returns str with no spaces and lower case\n */\nexport function toLowerCaseNoSpaces(str: string | undefined): string {\n  if (!str) return ''\n  return str.toLocaleLowerCase().replaceAll(' ', '')\n}\n","import {CheckmarkIcon} from '@sanity/icons'\nimport {MenuDivider, Text} from '@sanity/ui'\nimport {type MouseEvent, useCallback} from 'react'\nimport {TooltipOfDisabled, useGetI18nText, useI18nText} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {MenuGroup, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {toLowerCaseNoSpaces} from '../../util/toLowerCaseNoSpaces'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\nconst MENU_GROUP_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'left-start',\n  portal: true,\n}\n\nexport function PaneMenuButtonItem(props: {\n  disabled?: boolean\n  isAfterGroup: boolean\n  node: _PaneMenuNode\n}) {\n  const {disabled, isAfterGroup, node} = props\n  const getI18nText = useGetI18nText('i18n' in node ? node : undefined)\n\n  if (node.type === 'divider') {\n    return <MenuDivider />\n  }\n\n  const {title} = getI18nText(node)\n\n  if (node.type === 'group') {\n    if (node.children.length === 0) {\n      return null\n    }\n\n    if (node.expanded) {\n      return (\n        <>\n          {isAfterGroup && <MenuDivider />}\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </>\n      )\n    }\n\n    return (\n      <>\n        {isAfterGroup && <MenuDivider />}\n        <MenuGroup\n          disabled={disabled}\n          icon={node.icon}\n          popover={MENU_GROUP_POPOVER_PROPS}\n          text={title}\n        >\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </MenuGroup>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {isAfterGroup && <MenuDivider />}\n      <PaneContextMenuItemResolver disabled={disabled} node={node} />\n    </>\n  )\n}\n\nfunction PaneContextMenuItemResolver(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {node} = props\n\n  if (node.intent) {\n    return <PaneContextIntentMenuItem {...props} intent={node.intent} />\n  }\n\n  return <PaneContextMenuItem {...props} />\n}\n\nfunction PaneContextMenuItem(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {disabled, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        icon={node.icon}\n        iconRight={node.iconRight || (node.selected && CheckmarkIcon)}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClick={node.onAction}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n        data-testid={`action-${toLowerCaseNoSpaces(node.title)}`}\n      />\n    </TooltipOfDisabled>\n  )\n}\n\nfunction PaneContextIntentMenuItem(props: {\n  disabled?: boolean\n  intent: Intent\n  node: _PaneMenuItem\n}) {\n  const {disabled, intent, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        as=\"a\"\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        href={intentLink.href}\n        icon={node.icon}\n        iconRight={node.selected ? CheckmarkIcon : undefined}\n        onClick={handleClick}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n      />\n    </TooltipOfDisabled>\n  )\n}\n","import {Menu, MenuDivider} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {ContextMenuButton} from 'sanity'\n\nimport {MenuButton, type PopoverProps} from '../../../ui-components'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\ninterface PaneContextMenuButtonProps {\n  nodes: _PaneMenuNode[]\n  actionsNodes?: ReactNode\n}\n\nconst CONTEXT_MENU_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nfunction nodesHasTone(nodes: _PaneMenuNode[], tone: NonNullable<_PaneMenuItem['tone']>): boolean {\n  return nodes.some((node) => {\n    return (\n      (node.type === 'item' && node.tone === tone) ||\n      (node.type === 'group' && nodesHasTone(node.children, tone))\n    )\n  })\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneContextMenuButton(props: PaneContextMenuButtonProps) {\n  const {nodes, actionsNodes} = props\n  const id = useId()\n\n  const hasCritical = nodesHasTone(nodes, 'critical')\n  const hasCaution = nodesHasTone(nodes, 'caution')\n\n  return (\n    <MenuButton\n      button={\n        <ContextMenuButton\n          // eslint-disable-next-line no-nested-ternary\n          tone={hasCritical ? 'critical' : hasCaution ? 'caution' : undefined}\n          data-testid=\"pane-context-menu-button\"\n        />\n      }\n      id={id}\n      menu={\n        <Menu>\n          {actionsNodes && (\n            <>\n              {actionsNodes}\n              <MenuDivider />\n            </>\n          )}\n          {nodes.map((node, nodeIndex) => {\n            const isAfterGroup = nodes[nodeIndex - 1]?.type === 'group'\n            return <PaneMenuButtonItem isAfterGroup={isAfterGroup} key={node.key} node={node} />\n          })}\n        </Menu>\n      }\n      popover={CONTEXT_MENU_POPOVER_PROPS}\n    />\n  )\n}\n","import {Card, Layer} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Layer)`\n  position: sticky;\n  bottom: 0;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: -1px;\n    border-bottom: 1px solid var(--card-border-color);\n  }\n`\n\nexport const RootCard = styled(Card)`\n  padding-bottom: env(safe-area-inset-bottom);\n`\n","import {Box} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Root, RootCard} from './PaneFooter.styles'\nimport {usePane} from './usePane'\n\ninterface PaneFooterProps {\n  children?: ReactNode\n  padding?: number | number[]\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneFooter = forwardRef(function PaneFooter(\n  props: PaneFooterProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {children, padding} = props\n  const {collapsed} = usePane()\n\n  return (\n    <LegacyLayerProvider zOffset=\"paneFooter\">\n      <Root data-testid=\"pane-footer\" hidden={collapsed} ref={ref}>\n        <RootCard tone=\"inherit\">\n          <Box padding={padding}>{children}</Box>\n        </RootCard>\n      </Root>\n    </LegacyLayerProvider>\n  )\n})\n","import {Box, Card, Flex, Layer, rgba, Text, TextSkeleton, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\ninterface RootProps {\n  $border?: boolean\n}\n\nexport const Root = styled(Layer)<RootProps>(({$border}) => {\n  return css`\n    line-height: 0;\n    position: sticky;\n    top: 0;\n\n    &:not([data-collapsed]):after {\n      content: '';\n      display: block;\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: -1px;\n      border-bottom: 1px solid ${$border ? 'var(--card-border-color)' : 'transparent'};\n      opacity: 1;\n    }\n  `\n})\n\nexport const Layout = styled(Flex)`\n  transform-origin: calc(51px / 2);\n\n  [data-collapsed] > div > & {\n    transform: rotate(90deg);\n  }\n`\n\nexport const TitleCard = styled(Card)(({theme}: {theme: Theme}) => {\n  const {fg, bg} = theme.sanity.color.card.enabled\n\n  // Disable color updates on hover\n  return css`\n    background-color: ${bg};\n\n    [data-ui='Text'] {\n      color: ${fg};\n    }\n  `\n})\n\nexport const TitleTextSkeleton = styled(TextSkeleton)`\n  width: 66%;\n  max-width: 175px;\n`\n\nexport const TitleText = styled(Text)`\n  cursor: default;\n  outline: none;\n`\n\nexport const TabsBox = styled(Box)(({theme}: {theme: Theme}) => {\n  const {color, space} = theme.sanity\n\n  return css`\n    overflow: hidden;\n    overflow: clip;\n    position: relative;\n\n    & > div {\n      white-space: nowrap;\n      overflow: auto;\n      /* Hide scrollbars */\n      scrollbar-width: none;\n      &::-webkit-scrollbar {\n        width: 0;\n        height: 0;\n      }\n    }\n\n    /* right padding */\n    & > div:after {\n      content: '';\n      display: inline-block;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      width: ${space[3]}px;\n      height: 1px;\n    }\n\n    /* Gradient that makes it look like tabs disappear into nothing (looks nicer) */\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      background: linear-gradient(to right, ${rgba(color.base.bg, 0)}, var(--card-bg-color));\n      width: ${space[3]}px;\n      pointer-events: none;\n    }\n  `\n})\n","import {Box, Card, Flex, LayerProvider, useElementRect} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode, useCallback, useMemo} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Layout, Root, TabsBox, TitleCard, TitleText, TitleTextSkeleton} from './PaneHeader.styles'\nimport {usePane} from './usePane'\n\n/**\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneHeaderProps {\n  actions?: ReactNode\n  backButton?: ReactNode\n  border?: boolean\n  contentAfter?: ReactNode\n  loading?: boolean\n  subActions?: ReactNode\n  tabIndex?: number\n  tabs?: ReactNode\n  title: ReactNode\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneHeader = forwardRef(function PaneHeader(\n  props: PaneHeaderProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {actions, backButton, border, contentAfter, loading, subActions, tabs, tabIndex, title} =\n    props\n  const {collapse, collapsed, expand, rootElement: paneElement} = usePane()\n  const paneRect = useElementRect(paneElement || null)\n\n  const layoutStyle = useMemo(\n    () => ({\n      width: collapsed ? paneRect?.height || window.innerHeight : undefined,\n    }),\n    [collapsed, paneRect],\n  )\n\n  const handleTitleClick = useCallback(() => {\n    if (collapsed) return\n    collapse()\n  }, [collapse, collapsed])\n\n  const handleLayoutClick = useCallback(() => {\n    if (!collapsed) return\n    expand()\n  }, [collapsed, expand])\n\n  const showTabsOrSubActions = Boolean(!collapsed && (tabs || subActions))\n\n  return (\n    <LayerProvider zOffset={100}>\n      <Root\n        $border={border}\n        data-collapsed={collapsed ? '' : undefined}\n        data-testid=\"pane-header\"\n        ref={ref}\n      >\n        <LegacyLayerProvider zOffset=\"paneHeader\">\n          <Card data-collapsed={collapsed ? '' : undefined} tone=\"inherit\">\n            <Layout\n              gap={1}\n              onClick={handleLayoutClick}\n              padding={3}\n              paddingBottom={collapsed || !showTabsOrSubActions ? 3 : 2}\n              sizing=\"border\"\n              style={layoutStyle}\n            >\n              {backButton && <Box flex=\"none\">{backButton}</Box>}\n\n              <TitleCard\n                __unstable_focusRing\n                flex={1}\n                forwardedAs=\"button\"\n                onClick={handleTitleClick}\n                paddingLeft={backButton ? 1 : 2}\n                padding={2}\n                tabIndex={tabIndex}\n              >\n                {loading && <TitleTextSkeleton animated radius={1} size={1} />}\n                {!loading && (\n                  <TitleText size={1} textOverflow=\"ellipsis\" weight=\"semibold\">\n                    {title}\n                  </TitleText>\n                )}\n              </TitleCard>\n\n              {actions && (\n                <Flex align=\"center\" hidden={collapsed}>\n                  <LegacyLayerProvider zOffset=\"paneHeader\">{actions}</LegacyLayerProvider>\n                </Flex>\n              )}\n            </Layout>\n\n            {showTabsOrSubActions && (\n              <Flex\n                align=\"center\"\n                hidden={collapsed}\n                overflow=\"auto\"\n                paddingBottom={3}\n                paddingX={3}\n              >\n                <TabsBox flex={1} marginRight={subActions ? 3 : 0}>\n                  {tabs}\n                </TabsBox>\n\n                {subActions && subActions}\n              </Flex>\n            )}\n\n            {!collapsed && contentAfter && contentAfter}\n          </Card>\n        </LegacyLayerProvider>\n      </Root>\n    </LayerProvider>\n  )\n})\n","import {UnknownIcon} from '@sanity/icons'\nimport {Menu} from '@sanity/ui'\nimport {type MouseEvent, useCallback, useId} from 'react'\nimport {StatusButton, useI18nText, useTranslation} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {Button, MenuButton} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuGroup, type _PaneMenuItem} from './types'\n\nfunction getDisabledReason(node: _PaneMenuItem) {\n  if (!node.disabled) {\n    return {disabledReason: undefined, ariaLabel: undefined, isDisabled: false}\n  }\n\n  /**\n   * This component supports receiving a `reason: string | react.ReactNode`.\n   * We are casting it as string, to avoid the ts error, as content will be rendered into the tooltip which only accepts string, but it won't crash if it's a ReactNode.\n   * For the aria label, we want to check if it's actually a string, to avoid generating an aria-label with the value `[object Object]`.\n   */\n  const disabledReason =\n    typeof node.disabled === 'object' ? (node.disabled.reason as string) : undefined\n  const ariaLabel =\n    typeof node.disabled === 'object' && typeof node.disabled?.reason === 'string'\n      ? node.disabled.reason\n      : 'This is disabled'\n\n  return {disabledReason, ariaLabel, isDisabled: Boolean(node.disabled)}\n}\nexport interface PaneHeaderActionButtonProps {\n  node: _PaneMenuItem | _PaneMenuGroup\n}\n\nexport function PaneHeaderActionButton(props: PaneHeaderActionButtonProps) {\n  const {node} = props\n\n  if (node.type === 'item') {\n    return <PaneHeaderMenuItemActionButton node={node} />\n  }\n\n  if (node.type === 'group') {\n    return <PaneHeaderMenuGroupActionButton node={node} />\n  }\n\n  console.warn('unknown menu node (expected `type: \"item\" | \"group\"`):', node)\n\n  return null\n}\n\nexport interface PaneHeaderMenuItemActionButtonProps {\n  node: _PaneMenuItem\n}\n\nexport function PaneHeaderMenuItemActionButton(props: PaneHeaderMenuItemActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n  const {t} = useTranslation()\n\n  if (node.intent) {\n    return <PaneHeaderActionIntentButton {...props} intent={node.intent} />\n  }\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      disabled={isDisabled}\n      icon={node.icon}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClick={node.onAction}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : title,\n      }}\n    />\n  )\n}\n\nfunction PaneHeaderActionIntentButton(props: {intent: Intent; node: _PaneMenuItem}) {\n  const {intent, node} = props\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n  const {t} = useTranslation()\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLButtonElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      forwardedAs=\"a\"\n      disabled={isDisabled}\n      href={intentLink.href}\n      icon={node.icon}\n      onClick={handleClick}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || node.title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : node.title,\n        placement: 'bottom',\n        portal: true,\n      }}\n    />\n  )\n}\n\nexport interface PaneHeaderMenuGroupActionButtonProps {\n  node: _PaneMenuGroup\n}\n\nfunction PaneHeaderMenuGroupActionButton(props: PaneHeaderMenuGroupActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          disabled={!!node.disabled}\n          icon={node.icon ?? UnknownIcon}\n          label={title}\n          mode=\"bleed\"\n          tooltipProps={{content: node.title, portal: true}}\n        />\n      }\n      id={useId()}\n      menu={\n        <Menu>\n          {node.children.map((child, idx) => {\n            return (\n              <PaneMenuButtonItem\n                disabled={Boolean(node.disabled)}\n                isAfterGroup={node.children[idx - 1]?.type === 'group'}\n                key={child.key}\n                node={child}\n              />\n            )\n          })}\n        </Menu>\n      }\n    />\n  )\n}\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  transition: opacity 200ms;\n  position: relative;\n  z-index: 1;\n  padding-left: env(safe-area-inset-left);\n  padding-right: env(safe-area-inset-right);\n  opacity: 0;\n\n  &:not([hidden]) {\n    display: flex;\n  }\n\n  &:not([data-collapsed]) {\n    overflow: auto;\n  }\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n\n  &[data-resizing] {\n    pointer-events: none;\n  }\n`\n","import {PANE_DEFAULT_MIN_WIDTH} from '../constants'\nimport {type PaneConfigOpts, type PaneResizeCache} from '../types'\n\nexport function _calcPaneResize(\n  cache: PaneResizeCache,\n  left: PaneConfigOpts,\n  right: PaneConfigOpts,\n  deltaX: number,\n): {leftFlex: number; leftW: number; rightFlex: number; rightW: number} {\n  const sum = {\n    flex: cache.left.flex + cache.right.flex,\n    width: cache.left.width + cache.right.width,\n  }\n\n  const leftMinWidth = left.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n  const rightMinWidth = right.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n\n  const leftMaxWidth = Math.min(left.maxWidth || Infinity, sum.width - rightMinWidth)\n  const rightMaxWidth = Math.min(right.maxWidth || Infinity, sum.width - leftMinWidth)\n\n  // Get min. delta X\n  let minDeltaX = leftMinWidth - cache.left.width\n  const rightMinDeltaX = cache.right.width - rightMaxWidth\n  if (minDeltaX < rightMinDeltaX) {\n    minDeltaX = rightMinDeltaX\n  }\n\n  // Get max. delta X\n  let maxDeltaX = cache.right.width - rightMinWidth\n  const leftMaxDeltaX = leftMaxWidth - cache.left.width\n  if (maxDeltaX > leftMaxDeltaX) {\n    maxDeltaX = leftMaxDeltaX\n  }\n\n  const _deltaX = Math.min(Math.max(deltaX, minDeltaX), maxDeltaX)\n\n  const leftW = cache.left.width + _deltaX\n  const rightW = cache.right.width - _deltaX\n\n  const leftFlex = (leftW / sum.width) * sum.flex\n  const rightFlex = (rightW / sum.width) * sum.flex\n\n  return {leftFlex, leftW, rightFlex, rightW}\n}\n","/**\n * @internal\n */\nexport function _getDOMPath(rootElement: HTMLElement, el: HTMLElement): number[] {\n  const path: number[] = []\n\n  let e = el\n\n  while (e !== rootElement) {\n    const parentElement = e.parentElement\n\n    if (!parentElement) return path\n\n    const children = Array.from(parentElement.childNodes)\n    const index = children.indexOf(e)\n\n    path.unshift(index)\n\n    if (parentElement === rootElement) {\n      return path\n    }\n\n    e = parentElement\n  }\n\n  return path\n}\n","import {_getDOMPath} from './_getDOMPath'\n\nconst EMPTY_PATH: number[] = []\n\n/**\n * @internal\n */\nexport function _sortElements(rootElement: HTMLElement, elements: HTMLElement[]): void {\n  // Create a map containing the DOM path of each pane element.\n  // The DOM path is relative to the `rootElement`, and is used in the next step for sorting.\n  const map = new WeakMap<HTMLElement, number[]>()\n\n  for (const element of elements) {\n    map.set(element, _getDOMPath(rootElement, element))\n  }\n\n  const _sortByElementPath = (a: HTMLElement, b: HTMLElement) => {\n    const _a = map.get(a) || EMPTY_PATH\n    const _b = map.get(b) || EMPTY_PATH\n\n    const len = Math.max(_a.length, _b.length)\n\n    // Loop until there are different indexes\n    for (let i = 0; i < len; i += 1) {\n      const aIndex = _a[i] || -1\n      const bIndex = _b[i] || -1\n\n      if (aIndex !== bIndex) {\n        return aIndex - bIndex\n      }\n    }\n\n    return 0\n  }\n\n  elements.sort(_sortByElementPath)\n}\n","import {PANE_COLLAPSED_WIDTH, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {_calcPaneResize, _sortElements} from './helpers'\nimport {\n  type PaneConfigOpts,\n  type PaneData,\n  type PaneResizeCache,\n  type PaneResizeData,\n} from './types'\n\nexport interface PaneLayoutState {\n  expandedElement: HTMLElement | null\n  panes: PaneData[]\n  resizing: boolean\n}\n\nexport type PaneLayoutStateObserver = (state: PaneLayoutState) => void\n\nexport interface PaneLayoutController {\n  collapse: (element: HTMLElement) => void\n  expand: (element: HTMLElement) => void\n  mount: (element: HTMLElement, options: PaneConfigOpts) => () => void\n  resize: (type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) => void\n  setRootElement: (nextRootElement: HTMLElement | null) => void\n  setRootWidth: (nextRootWidth: number) => void\n  subscribe: (observer: PaneLayoutStateObserver) => () => void\n}\n\nexport function createPaneLayoutController(): PaneLayoutController {\n  const observers: PaneLayoutStateObserver[] = []\n  const elements: HTMLElement[] = []\n  const optionsMap = new WeakMap<HTMLElement, PaneConfigOpts & {original: PaneConfigOpts}>()\n  const userCollapsedElementSet = new Set<HTMLElement>()\n  const cache: Partial<PaneResizeCache> = {}\n\n  // Mutable internal state\n  let rootElement: HTMLElement | null = null\n  let rootWidth = 0\n  let expandedElement: HTMLElement | null = null\n  let resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n  let resizing = false\n\n  function collapse(element: HTMLElement) {\n    userCollapsedElementSet.add(element)\n\n    if (expandedElement === element) {\n      expandedElement = null\n    }\n\n    _notifyObservers()\n  }\n\n  function expand(element: HTMLElement) {\n    userCollapsedElementSet.delete(element)\n\n    expandedElement = element\n\n    _notifyObservers()\n  }\n\n  function mount(element: HTMLElement, options: PaneConfigOpts) {\n    optionsMap.set(element, {...options, original: options})\n\n    elements.push(element)\n\n    if (rootElement) {\n      _sortElements(rootElement, elements)\n    }\n\n    expand(element)\n\n    return () => {\n      const idx = elements.indexOf(element)\n\n      if (idx > -1) {\n        elements.splice(idx, 1)\n      }\n\n      optionsMap.delete(element)\n\n      _notifyObservers()\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  function resize(type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) {\n    const leftIndex = elements.indexOf(leftElement)\n    const leftOptions = optionsMap.get(leftElement)\n\n    if (!leftOptions) return\n\n    const rightElement = elements[leftIndex + 1]\n    const rightOptions = optionsMap.get(rightElement)\n\n    if (!rightOptions) return\n\n    if (type === 'start') {\n      resizing = true\n\n      cache.left = {\n        element: leftElement,\n        flex: leftOptions.flex || 1,\n        width: leftElement.offsetWidth,\n      }\n\n      cache.right = {\n        element: rightElement,\n        flex: rightOptions.flex || 1,\n        width: rightElement.offsetWidth,\n      }\n\n      _notifyObservers()\n    }\n\n    if (type === 'move' && cache.left && cache.right) {\n      resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n\n      const {leftW, rightW, leftFlex, rightFlex} = _calcPaneResize(\n        cache as PaneResizeCache,\n        leftOptions,\n        rightOptions,\n        deltaX,\n      )\n\n      // update resize cache\n      resizeDataMap.set(leftElement, {flex: leftFlex, width: leftW})\n      resizeDataMap.set(rightElement, {flex: rightFlex, width: rightW})\n\n      _notifyObservers()\n    }\n\n    if (type === 'end') {\n      resizing = false\n\n      const leftResizeData = resizeDataMap.get(leftElement)\n      const rightResizeData = resizeDataMap.get(rightElement)\n\n      // Update left options\n      optionsMap.set(leftElement, {\n        ...leftOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: leftResizeData?.flex ?? leftOptions.flex,\n      })\n\n      // Update right options\n      optionsMap.set(rightElement, {\n        ...rightOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: rightResizeData?.flex ?? rightOptions.flex,\n      })\n\n      // Reset resize data map\n      resizeDataMap = new Map()\n\n      // Reset cache\n      delete cache.left\n      delete cache.right\n\n      _notifyObservers()\n    }\n  }\n\n  function setRootElement(nextRootElement: HTMLElement | null) {\n    rootElement = nextRootElement\n  }\n\n  function setRootWidth(nextRootWidth: number) {\n    rootWidth = nextRootWidth\n    _notifyObservers()\n  }\n\n  function subscribe(observer: PaneLayoutStateObserver) {\n    observers.push(observer)\n\n    return () => {\n      const idx = observers.push(observer)\n\n      if (idx > -1) {\n        observers.splice(idx, 1)\n      }\n    }\n  }\n\n  return {collapse, expand, mount, resize, setRootElement, setRootWidth, subscribe}\n\n  // eslint-disable-next-line complexity\n  function _notifyObservers() {\n    if (!rootWidth) return\n\n    // Create a reversed array of pane elements, so we can loop over them backwards.\n    // Place the expanded element first (so it has the least chance of being collapsed).\n    const _elements: HTMLElement[] = []\n    for (const element of elements) {\n      if (element !== expandedElement) {\n        _elements.unshift(element)\n      }\n    }\n    if (expandedElement) {\n      _elements.unshift(expandedElement)\n    }\n\n    const dataMap = new WeakMap<HTMLElement, PaneData>()\n    const len = _elements.length\n    const lastElement = _elements[0]\n    const collapsedWidth = (len - 1) * PANE_COLLAPSED_WIDTH\n\n    let remaingWidth = rootWidth - collapsedWidth\n\n    for (const element of _elements) {\n      const options = optionsMap.get(element)\n\n      if (!options) {\n        continue\n      }\n\n      const minWidth = options.currentMinWidth || options.minWidth || PANE_DEFAULT_MIN_WIDTH\n      const isLast = element === lastElement\n\n      // A pane is collapsed if:\n      // - it’s explictly collapsed by the user\n      const userCollapsed = userCollapsedElementSet.has(element)\n      // - it’s minimum width is larger than the remaining width\n      const sizeCollapsed = minWidth > remaingWidth\n      // - if the element is not the last (expanded pane)\n      const collapsed = isLast ? false : userCollapsed || sizeCollapsed\n\n      const resizeData = resizeDataMap.get(element)\n\n      // Collect pane data\n      dataMap.set(element, {\n        element: element,\n        collapsed: collapsed,\n        currentMinWidth: resizeData?.width ?? options.currentMinWidth,\n        currentMaxWidth: resizeData?.width ?? options.currentMaxWidth,\n        flex: resizeData?.flex ?? options.flex ?? 1,\n      })\n\n      // Update remaining width\n      if (collapsed) {\n        remaingWidth -= PANE_COLLAPSED_WIDTH\n      } else {\n        remaingWidth -= minWidth - PANE_COLLAPSED_WIDTH\n      }\n    }\n\n    const panes: PaneData[] = []\n\n    for (const element of elements) {\n      const data = dataMap.get(element)\n\n      if (data) panes.push(data)\n    }\n\n    for (const observer of observers) {\n      observer({\n        expandedElement: expandedElement || elements[elements.length - 1] || null,\n        panes,\n        resizing,\n      })\n    }\n  }\n}\n","import {type CardProps, useElementRect} from '@sanity/ui'\nimport {type HTMLProps, useEffect, useMemo, useState} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {Root} from './PaneLayout.styles'\nimport {createPaneLayoutController, type PaneLayoutState} from './paneLayoutController'\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneLayoutProps {\n  minWidth?: number\n  onCollapse?: () => void\n  onExpand?: () => void\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneLayout(\n  props: PaneLayoutProps &\n    CardProps &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'wrap'>,\n) {\n  const {children, minWidth, onCollapse, onExpand, ...restProps} = props\n  const controller = useMemo(() => createPaneLayoutController(), [])\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const rootRect = useElementRect(rootElement)\n  const width = rootRect?.width || 0\n  const collapsed = width === undefined || !minWidth ? undefined : width < minWidth\n  const [state, setState] = useState<PaneLayoutState>({\n    expandedElement: null,\n    panes: [],\n    resizing: false,\n  })\n\n  // Set root element\n  useEffect(() => controller.setRootElement(rootElement), [controller, rootElement])\n\n  // Set root size\n  useEffect(() => controller.setRootWidth(width), [controller, width])\n\n  // Subscribe to state changes\n  useEffect(() => controller.subscribe(setState), [controller])\n\n  // Call the `onCollapse` and `onExpand` callbacks as the `collapsed` boolean changes\n  useEffect(() => {\n    if (collapsed === undefined) return\n    if (collapsed && onCollapse) onCollapse()\n    if (!collapsed && onExpand) onExpand()\n  }, [collapsed, onCollapse, onExpand])\n\n  // This is the context value that gives each pane the information they need\n  const paneLayout: PaneLayoutContextValue = useMemo(\n    () => ({\n      collapse: controller.collapse,\n      collapsed,\n      expand: controller.expand,\n      expandedElement: state.expandedElement,\n      mount: controller.mount,\n      panes: state.panes,\n      resize: controller.resize,\n      resizing: state.resizing,\n    }),\n    [collapsed, controller, state.expandedElement, state.panes, state.resizing],\n  )\n\n  return (\n    <PaneLayoutContext.Provider value={paneLayout}>\n      <Root\n        data-ui=\"PaneLayout\"\n        {...restProps}\n        data-collapsed={collapsed ? '' : undefined}\n        // The `data-resizing` attribute is used to improve cursor behavior\n        data-resizing={state.resizing ? '' : undefined}\n        // The `data-mounted` attribute is used to fade in the layout and prevent flash of\n        // non-collapsed panes\n        data-mounted={width ? '' : undefined}\n        ref={setRootElement}\n      >\n        {children}\n      </Root>\n    </PaneLayoutContext.Provider>\n  )\n}\n","/* eslint-disable camelcase */\n\nimport {negate} from 'lodash'\n\nimport {type _PaneMenuGroup, type _PaneMenuItem, type _PaneMenuNode} from './components/pane/types'\nimport {type DocumentFieldMenuActionNode, type PaneMenuItem, type PaneMenuItemGroup} from './types'\n\nexport function isMenuNodeButton(node: _PaneMenuNode): node is _PaneMenuItem | _PaneMenuGroup {\n  return (node.type === 'item' || node.type === 'group') && node.renderAsButton\n}\n\nexport const isNotMenuNodeButton = negate(isMenuNodeButton)\n\nexport function resolveMenuNodes(params: {\n  actionHandler: (item: PaneMenuItem) => void\n  fieldActions?: DocumentFieldMenuActionNode[]\n  menuItems: PaneMenuItem[]\n  menuItemGroups: PaneMenuItemGroup[]\n}): _PaneMenuNode[] {\n  const {fieldActions = [], menuItems, menuItemGroups} = params\n\n  const nodes: _PaneMenuNode[] = []\n\n  let keyOffset = 0\n\n  for (let i = 0; i < fieldActions.length; i += 1) {\n    const a = fieldActions[i]\n\n    nodes.push(mapFieldActionToPaneMenuNode(a, `${i}-${a.type}`))\n  }\n\n  keyOffset += nodes.length\n\n  const groups: _PaneMenuGroup[] = []\n\n  for (const itemGroup of menuItemGroups) {\n    const group = groups.find((g) => g.key === itemGroup.id)\n\n    if (!group) {\n      groups.push({\n        type: 'group',\n        key: itemGroup.id,\n\n        children: [],\n        expanded: true,\n        renderAsButton: false,\n        title: itemGroup.title,\n        i18n: itemGroup.i18n,\n      })\n    }\n  }\n\n  const ungroupedItems: _PaneMenuItem[] = []\n\n  for (let i = 0; i < menuItems.length; i += 1) {\n    const item = menuItems[i]\n\n    let group = item.group && groups.find((g) => g.key === item.group)\n\n    if (item.group && !group) {\n      group = {\n        type: 'group',\n        key: item.group,\n\n        expanded: true,\n        icon: item.icon,\n        title: item.group,\n        children: [],\n        renderAsButton: false,\n      }\n      groups.push(group)\n    }\n\n    if (group) {\n      group.children.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    } else {\n      ungroupedItems.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    }\n  }\n\n  return [...ungroupedItems, ...groups, ...nodes]\n}\n\nfunction mapFieldActionToPaneMenuNode(a: DocumentFieldMenuActionNode, key: string): _PaneMenuNode {\n  if (a.type === 'divider') {\n    return {\n      type: 'divider',\n      key,\n    }\n  }\n\n  if (a.type === 'group') {\n    return {\n      type: 'group',\n      key,\n\n      children: a.children.map((child, childIdx) =>\n        mapFieldActionToPaneMenuNode(child, `${key}-${childIdx}-${child.type}`),\n      ),\n      disabled: a.disabled,\n      expanded: a.expanded ?? true,\n      icon: a.icon,\n      title: a.title,\n      i18n: a.i18n,\n      renderAsButton: a.renderAsButton ?? false,\n    }\n  }\n\n  return {\n    type: 'item',\n    key,\n    intent: a.intent,\n    disabled: a.disabled,\n    icon: a.icon,\n    iconRight: a.iconRight,\n    onAction: a.onAction,\n    renderAsButton: a.renderAsButton ?? false,\n    selected: a.selected,\n    title: a.title,\n    i18n: a.i18n,\n    tone: a.tone,\n  }\n}\n","import {type ComponentProps, type ForwardedRef, forwardRef, type ReactNode, useMemo} from 'react'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, type ButtonProps} from '../../ui-components'\nimport {type PaneMenuItem} from '../types'\n\ntype RouterIntent = NonNullable<PaneMenuItem['intent']>\n\nexport const IntentButton = forwardRef(function IntentButton(\n  props: {\n    intent: RouterIntent\n  } & ButtonProps &\n    Omit<ComponentProps<typeof Button>, 'as' | 'href' | 'type'>,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {intent, ...restProps} = props\n\n  const Link = useMemo(\n    () =>\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      forwardRef(function Link(\n        linkProps: {children: ReactNode},\n        linkRef: ForwardedRef<HTMLAnchorElement>,\n      ) {\n        return (\n          <IntentLink {...linkProps} intent={intent.type} params={intent.params} ref={linkRef} />\n        )\n      }),\n    [intent],\n  )\n\n  return props.disabled ? (\n    <Button {...restProps} as=\"a\" role=\"link\" aria-disabled=\"true\" />\n  ) : (\n    <Button {...restProps} as={Link} data-as=\"a\" ref={ref as ForwardedRef<HTMLButtonElement>} />\n  )\n})\n","import {type ComponentProps, type ReactNode} from 'react'\nimport {InsufficientPermissionsMessage, useCurrentUser, useTranslation} from 'sanity'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\ninterface InsufficientPermissionsMessageTooltipProps {\n  reveal: boolean\n  /**\n   * delegates to `InsufficientPermissionsMessage`'s `context` prop\n   * @see InsufficientPermissionsMessage\n   */\n  context: ComponentProps<typeof InsufficientPermissionsMessage>['context']\n  loading: boolean\n  children: ReactNode\n}\n\nexport function InsufficientPermissionsMessageTooltip({\n  reveal,\n  context,\n  loading,\n  children,\n}: InsufficientPermissionsMessageTooltipProps) {\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!reveal) {\n    return <>{children}</>\n  }\n\n  return (\n    <Tooltip\n      content={\n        loading ? (\n          t('insufficient-permissions-message-tooltip.loading-text')\n        ) : (\n          <InsufficientPermissionsMessage context={context} currentUser={currentUser} />\n        )\n      }\n      portal\n    >\n      {/* this wrapping div is to allow mouse events */}\n      {/* while the child element is disabled */}\n      <div>{children}</div>\n    </Tooltip>\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type Schema} from '@sanity/types'\nimport {Menu} from '@sanity/ui'\nimport {type ComponentProps, type ForwardedRef, forwardRef, useMemo} from 'react'\nimport {\n  type InitialValueTemplateItem,\n  type Template,\n  type TemplatePermissionsResult,\n  useGetI18nText,\n  useSchema,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, MenuButton, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {IntentButton} from '../IntentButton'\nimport {InsufficientPermissionsMessageTooltip} from './InsufficientPermissionsMessageTooltip'\n\nexport type PaneHeaderIntentProps = ComponentProps<typeof IntentButton>['intent']\n\nconst POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nconst getIntent = (\n  schema: Schema,\n  templates: Template[],\n  item: InitialValueTemplateItem,\n): PaneHeaderIntentProps | null => {\n  const typeName = templates.find((t) => t.id === item.templateId)?.schemaType\n  if (!typeName) return null\n\n  const baseParams = {\n    template: item.templateId,\n    type: typeName,\n    id: item.initialDocumentId,\n  }\n\n  return {\n    type: 'create',\n    params: item.parameters ? [baseParams, item.parameters] : baseParams,\n  }\n}\n\ninterface PaneHeaderCreateButtonProps {\n  templateItems: InitialValueTemplateItem[]\n}\n\nexport function PaneHeaderCreateButton({templateItems}: PaneHeaderCreateButtonProps) {\n  const schema = useSchema()\n  const templates = useTemplates()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const getI18nText = useGetI18nText([...templateItems, ...templates])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n\n  const nothingGranted = useMemo(() => {\n    return (\n      !isTemplatePermissionsLoading &&\n      templatePermissions?.every((permission) => !permission.granted)\n    )\n  }, [isTemplatePermissionsLoading, templatePermissions])\n\n  const permissionsById = useMemo(() => {\n    if (!templatePermissions) return {}\n    return templatePermissions.reduce<Record<string, TemplatePermissionsResult | undefined>>(\n      (acc, permission) => {\n        acc[permission.id] = permission\n        return acc\n      },\n      {},\n    )\n  }, [templatePermissions])\n\n  if (nothingGranted) {\n    return (\n      <InsufficientPermissionsMessageTooltip\n        context=\"create-document-type\"\n        reveal\n        loading={isTemplatePermissionsLoading}\n      >\n        <Button\n          aria-label={t('pane-header.disabled-created-button.aria-label')}\n          icon={AddIcon}\n          data-testid=\"action-intent-button\"\n          disabled\n          mode=\"bleed\"\n          // This button handles the tooltip in a special way, won't reuse the forced tooltip.\n          tooltipProps={null}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  if (templateItems.length === 1) {\n    const firstItem = templateItems[0]\n    const permissions = permissionsById[firstItem.id]\n    const disabled = !permissions?.granted\n    const intent = getIntent(schema, templates, firstItem)\n    if (!intent) return null\n\n    return (\n      <InsufficientPermissionsMessageTooltip\n        reveal={disabled}\n        loading={isTemplatePermissionsLoading}\n        context=\"create-document-type\"\n      >\n        <IntentButton\n          aria-label={getI18nText(firstItem).title}\n          icon={firstItem.icon || AddIcon}\n          intent={intent}\n          mode=\"bleed\"\n          disabled={disabled}\n          data-testid=\"action-intent-button\"\n          tooltipProps={disabled ? null : {content: t('pane-header.create-new-button.tooltip')}}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          icon={AddIcon}\n          mode=\"bleed\"\n          data-testid=\"multi-action-intent-button\"\n          tooltipProps={{content: t('pane-header.create-new-button.tooltip')}}\n        />\n      }\n      id=\"create-menu\"\n      menu={\n        <Menu>\n          {templateItems.map((item, itemIndex) => {\n            const permissions = permissionsById[item.id]\n            const disabled = !permissions?.granted\n            const intent = getIntent(schema, templates, item)\n            const template = templates.find((i) => i.id === item.templateId)\n            if (!template || !intent) return null\n\n            const Link = forwardRef((linkProps, linkRef: ForwardedRef<never>) =>\n              disabled ? (\n                <button type=\"button\" disabled {...linkProps} ref={linkRef} />\n              ) : (\n                <IntentLink\n                  {...linkProps}\n                  intent={intent.type}\n                  params={intent.params}\n                  ref={linkRef}\n                />\n              ),\n            )\n\n            Link.displayName = 'Link'\n\n            const {title} = getI18nText({\n              ...item,\n              // replace the title with the template title\n              title: item.title || getI18nText(template).title,\n            })\n\n            return (\n              <InsufficientPermissionsMessageTooltip\n                context=\"create-document-type\"\n                key={item.id}\n                reveal={disabled}\n                loading={isTemplatePermissionsLoading}\n              >\n                <MenuItem\n                  as={Link}\n                  data-as={disabled ? 'button' : 'a'}\n                  text={title}\n                  aria-label={\n                    disabled ? t('pane-header.disabled-created-button.aria-label') : title\n                  }\n                  disabled={disabled}\n                  data-testid={`action-intent-button-${itemIndex}`}\n                />\n              </InsufficientPermissionsMessageTooltip>\n            )\n          })}\n        </Menu>\n      }\n      popover={POPOVER_PROPS}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {uniqBy} from 'lodash'\nimport {memo, useCallback, useMemo} from 'react'\nimport {EMPTY_ARRAY, EMPTY_OBJECT, type InitialValueTemplateItem, useTemplates} from 'sanity'\n\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../menuNodes'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {PaneContextMenuButton} from '../pane/PaneContextMenuButton'\nimport {PaneHeaderActionButton} from '../pane/PaneHeaderActionButton'\nimport {PaneHeaderCreateButton} from './PaneHeaderCreateButton'\n\nfunction isNonNullable<T>(value: T): value is NonNullable<T> {\n  return value !== null && value !== undefined\n}\n\n/**\n * hashes an object to a string where the order of the keys don't matter\n */\nconst hashObject = (value: unknown) => {\n  const sortObject = (v: unknown): unknown => {\n    if (typeof v !== 'object' || !v) return v\n    if (Array.isArray(v)) return v.map(sortObject)\n    return Object.entries(v).sort(([keyA], [keyB]) => keyA.localeCompare(keyB, 'en'))\n  }\n\n  const normalize = (v: unknown) => JSON.parse(JSON.stringify(v))\n\n  return JSON.stringify(sortObject(normalize(value)))\n}\n\ninterface PaneHeaderActionsProps {\n  initialValueTemplateItems?: InitialValueTemplateItem[]\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  actionHandlers?: Record<string, StructureToolPaneActionHandler>\n}\n\nexport const PaneHeaderActions = memo(function PaneHeaderActions(props: PaneHeaderActionsProps) {\n  const {\n    initialValueTemplateItems: initialValueTemplateItemsFromStructure = EMPTY_ARRAY,\n    menuItems = EMPTY_ARRAY,\n    menuItemGroups = EMPTY_ARRAY,\n    actionHandlers = EMPTY_OBJECT as Record<string, StructureToolPaneActionHandler>,\n  } = props\n\n  const templates = useTemplates()\n\n  const handleAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (typeof item.action === 'string' && !(item.action in actionHandlers)) {\n        console.warn('No handler for action:', item.action)\n        return false\n      }\n\n      const handler =\n        // eslint-disable-next-line no-nested-ternary\n        typeof item.action === 'function'\n          ? item.action\n          : typeof item.action === 'string'\n            ? actionHandlers[item.action]\n            : null\n\n      if (handler) {\n        handler(item.params as Record<string, string>)\n        return true\n      }\n\n      return false\n    },\n    [actionHandlers],\n  )\n\n  const menuNodes = useMemo(\n    () =>\n      resolveMenuNodes({\n        actionHandler: handleAction,\n        menuItemGroups,\n        menuItems: menuItems\n          // remove items with `create` intents because those will get combined\n          // into one action button (see `initialValueTemplateItemFromMenuItems`)\n          .filter((item) => item.intent?.type !== 'create'),\n      }),\n    [handleAction, menuItemGroups, menuItems],\n  )\n\n  const actionNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n  const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n\n  const initialValueTemplateItemFromMenuItems = useMemo(() => {\n    return menuItems\n      .map((item, menuItemIndex) => {\n        if (item.intent?.type !== 'create') return null\n\n        const {params} = item.intent\n        if (!params) return null\n\n        const intentParams = Array.isArray(params) ? params[0] : params\n        const templateParams = Array.isArray(params) ? params[1] : undefined\n\n        // fallback to the schema type name as the template ID.\n        // by default, the initial template values are populated from every\n        // document type in the schema\n        const templateId = intentParams.template || intentParams.type\n        if (!templateId) return null\n\n        // eslint-disable-next-line max-nested-callbacks\n        const template = templates.find((t) => t.id === templateId)\n        // the template doesn't exist then the action might be disabled\n        if (!template) return null\n\n        const initialDocumentId = intentParams.id\n\n        return {\n          item,\n          template,\n          templateParams,\n          menuItemIndex,\n          initialDocumentId,\n        }\n      })\n      .filter(isNonNullable)\n      .map(({initialDocumentId, item, template, menuItemIndex, templateParams}) => {\n        const initialValueTemplateItem: InitialValueTemplateItem = {\n          id: `menuItem${menuItemIndex}`,\n          initialDocumentId,\n          templateId: template.id,\n          type: 'initialValueTemplateItem',\n          title: item.title || template.title,\n          i18n: item.i18n || template.i18n,\n          icon: item.icon as InitialValueTemplateItem['icon'],\n          description: template.description,\n          parameters: templateParams,\n          schemaType: template.schemaType,\n        }\n\n        return initialValueTemplateItem\n      })\n  }, [menuItems, templates])\n\n  const combinedInitialValueTemplates = useMemo(() => {\n    // this de-dupes create actions\n    return uniqBy(\n      [...initialValueTemplateItemFromMenuItems, ...initialValueTemplateItemsFromStructure],\n      (item) => hashObject([item.initialDocumentId, item.templateId, item.parameters]),\n    )\n  }, [initialValueTemplateItemFromMenuItems, initialValueTemplateItemsFromStructure])\n\n  return (\n    <Flex gap={1}>\n      {combinedInitialValueTemplates.length > 0 && (\n        <PaneHeaderCreateButton templateItems={combinedInitialValueTemplates} />\n      )}\n\n      {actionNodes.map((node) => (\n        <PaneHeaderActionButton key={node.key} node={node} />\n      ))}\n\n      {contextMenuNodes.length > 0 && <PaneContextMenuButton nodes={contextMenuNodes} />}\n    </Flex>\n  )\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {type GeneralPreviewLayoutKey, SanityDefaultPreview, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface MissingSchemaTypeProps {\n  layout?: GeneralPreviewLayoutKey\n  value: SanityDocument\n}\n\nexport function MissingSchemaType(props: MissingSchemaTypeProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {layout, value} = props\n\n  return (\n    <SanityDefaultPreview\n      title={\n        <em>\n          <Translate\n            t={t}\n            i18nKey=\"pane-item.missing-schema-type.title\"\n            components={{Code: 'code'}}\n            values={{documentType: value._type}}\n          />\n        </em>\n      }\n      subtitle={\n        <Translate\n          t={t}\n          i18nKey=\"pane-item.missing-schema-type.subtitle\"\n          components={{Code: 'code'}}\n          values={{documentId: value._id}}\n        />\n      }\n      // eslint-disable-next-line react/jsx-no-bind\n      media={() => <WarningOutlineIcon />}\n      layout={layout}\n    />\n  )\n}\n","import {ChevronRightIcon, DocumentIcon, FolderIcon} from '@sanity/icons'\nimport {\n  isSanityDocument,\n  type PreviewValue,\n  type SanityDocument,\n  type SchemaType,\n} from '@sanity/types'\nimport {Box, type CardProps, Text} from '@sanity/ui'\nimport {\n  type ComponentType,\n  type MouseEvent,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport {\n  type FIXME,\n  type GeneralPreviewLayoutKey,\n  PreviewCard,\n  SanityDefaultPreview,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n  useSchema,\n} from 'sanity'\n\nimport {MissingSchemaType} from '../MissingSchemaType'\nimport {usePaneRouter} from '../paneRouter'\nimport {PaneItemPreview} from './PaneItemPreview'\n\ninterface PaneItemProps {\n  id: string\n  layout?: GeneralPreviewLayoutKey\n  icon?: ComponentType<any> | false\n  pressed?: boolean\n  selected?: boolean\n  title?: string\n  value?: PreviewValue | SanityDocument\n  schemaType?: SchemaType\n  margin?: CardProps['margin']\n  marginBottom?: CardProps['marginBottom']\n  marginTop?: CardProps['marginTop']\n}\n\n/**\n * Return `false` if we explicitly disable the icon.\n * Otherwise return the passed icon or the schema type icon as a backup.\n */\nexport function getIconWithFallback(\n  icon: ComponentType<any> | false | undefined,\n  schemaType: SchemaType | undefined,\n  defaultIcon: ComponentType<any>,\n): ComponentType<any> | false {\n  if (icon === false) {\n    return false\n  }\n\n  return icon || (schemaType && schemaType.icon) || defaultIcon || false\n}\n\nexport function PaneItem(props: PaneItemProps) {\n  const {\n    icon,\n    id,\n    layout = 'default',\n    pressed,\n    schemaType,\n    selected,\n    title,\n    value,\n    margin,\n    marginBottom,\n    marginTop,\n  } = props\n  const schema = useSchema()\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ChildLink} = usePaneRouter()\n  const documentPresence = useDocumentPresence(id)\n  const hasSchemaType = Boolean(schemaType && schemaType.name && schema.get(schemaType.name))\n  const [clicked, setClicked] = useState<boolean>(false)\n\n  const preview = useMemo(() => {\n    if (value && isSanityDocument(value)) {\n      if (!schemaType || !hasSchemaType) {\n        return <MissingSchemaType value={value} />\n      }\n\n      return (\n        <PaneItemPreview\n          documentPreviewStore={documentPreviewStore}\n          icon={getIconWithFallback(icon, schemaType, DocumentIcon)}\n          layout={layout}\n          schemaType={schemaType}\n          value={value}\n          presence={documentPresence}\n        />\n      )\n    }\n\n    // Always render non-document values as compact previews\n    return (\n      <SanityDefaultPreview\n        status={\n          <Box style={{opacity: 0.5}}>\n            <Text muted size={1}>\n              <ChevronRightIcon />\n            </Text>\n          </Box>\n        }\n        icon={getIconWithFallback(icon, schemaType, FolderIcon)}\n        layout=\"compact\"\n        title={title}\n      />\n    )\n  }, [\n    documentPreviewStore,\n    hasSchemaType,\n    icon,\n    layout,\n    schemaType,\n    title,\n    value,\n    documentPresence,\n  ])\n\n  const Link = useMemo(\n    () =>\n      function LinkComponent(linkProps: {children: ReactNode}) {\n        return <ChildLink {...linkProps} childId={id} />\n      },\n    [ChildLink, id],\n  )\n\n  const handleClick = useCallback((e: MouseEvent<HTMLElement>) => {\n    if (e.metaKey) {\n      setClicked(false)\n      return\n    }\n\n    setClicked(true)\n  }, [])\n\n  // Reset `clicked` state when `selected` prop changes\n  useEffect(() => setClicked(false), [selected])\n\n  return (\n    <PreviewCard\n      data-testid={`pane-item-${title}`}\n      __unstable_focusRing\n      as={Link as FIXME}\n      data-as=\"a\"\n      margin={margin}\n      marginBottom={marginBottom}\n      marginTop={marginTop}\n      onClick={handleClick}\n      pressed={pressed}\n      radius={2}\n      selected={selected || clicked}\n      sizing=\"border\"\n      tabIndex={-1}\n      tone=\"inherit\"\n    >\n      {preview}\n    </PreviewCard>\n  )\n}\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentActionDescription,\n  type DocumentActionGroup,\n  type DocumentActionProps,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Action<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderActionCollectionProps {\n  actions: Action<DocumentActionProps, DocumentActionDescription>[]\n  actionProps: Omit<DocumentActionProps, 'onComplete'>\n  children: (props: {states: DocumentActionDescription[]}) => ReactNode\n  onActionComplete?: () => void\n  group?: DocumentActionGroup\n}\n\n/** @internal */\nexport const RenderActionCollectionState = memo((props: RenderActionCollectionProps) => {\n  const {actions, children, actionProps, onActionComplete, group} = props\n\n  return (\n    <GetHookCollectionState<Omit<DocumentActionProps, 'onComplete'>, DocumentActionDescription>\n      onReset={onActionComplete}\n      hooks={actions}\n      args={actionProps}\n      group={group}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderActionCollectionState.displayName = 'Memo(RenderActionCollectionState)'\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentBadgeDescription,\n  type DocumentBadgeProps,\n  type EditStateFor,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Badge<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderBadgeCollectionProps {\n  badges: Badge<DocumentBadgeProps, DocumentBadgeDescription>[]\n  badgeProps: EditStateFor\n  children: (props: {states: DocumentBadgeDescription[]}) => ReactNode\n}\n\n/** @internal */\nexport const RenderBadgeCollectionState = memo((props: RenderBadgeCollectionProps) => {\n  const {badges, children, badgeProps} = props\n\n  return (\n    <GetHookCollectionState<EditStateFor, DocumentBadgeDescription>\n      hooks={badges}\n      args={badgeProps}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderBadgeCollectionState.displayName = 'Memo(RenderBadgeCollectionState)'\n","import {Box, type CardTone} from '@sanity/ui'\n\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\n\n/**\n * @internal\n */\nexport function ErrorPane(props: {\n  children?: React.ReactNode\n  currentMinWidth?: number\n  flex?: number\n  minWidth?: number\n  paneKey: string\n  title?: React.ReactNode\n  tone?: CardTone\n}) {\n  const {\n    children,\n    currentMinWidth,\n    flex,\n    minWidth,\n    paneKey,\n    title = 'Error',\n    tone = 'critical',\n  } = props\n\n  return (\n    <Pane\n      currentMinWidth={currentMinWidth}\n      flex={flex}\n      id={paneKey}\n      minWidth={minWidth}\n      tone={tone}\n    >\n      <PaneHeader title={title} />\n      <PaneContent overflow=\"auto\">\n        <Box paddingX={4} paddingY={5}>\n          {children}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n","import {merge, type Observable, of} from 'rxjs'\nimport {delay, mapTo} from 'rxjs/operators'\nimport {isDev} from 'sanity'\n\n/**\n * @internal\n */\nexport type WaitMessage = {messageKey: string} | {message: string}\n\n/**\n * @internal\n */\nexport function getWaitMessages(path: string[]): Observable<WaitMessage> {\n  const thresholds: (WaitMessage & {ms: number})[] = [\n    {ms: 300, messageKey: 'panes.resolving.default-message'},\n    {ms: 5000, messageKey: 'panes.resolving.slow-resolve-message'},\n  ]\n\n  if (isDev) {\n    const message = [\n      'Check console for errors?',\n      'Is your observable/promise resolving?',\n      path.length > 0 ? `Structure path: ${path.join(' ➝ ')}` : '',\n    ]\n\n    thresholds.push({\n      ms: 10000,\n      message: message.join('\\n'),\n    })\n  }\n\n  const src = of(null)\n\n  return merge(\n    ...thresholds.map((threshold) =>\n      src.pipe(\n        mapTo(\n          'messageKey' in threshold\n            ? {messageKey: threshold.messageKey}\n            : {message: threshold.message},\n        ),\n        delay(threshold.ms),\n      ),\n    ),\n  )\n}\n","import {_raf2, type CardTone, Flex} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useState} from 'react'\nimport {type Observable} from 'rxjs'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay} from '../../components/Delay'\nimport {Pane, PaneContent} from '../../components/pane'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {getWaitMessages, type WaitMessage} from './getWaitMessages'\n\ninterface LoadingPaneProps {\n  delay?: number\n  flex?: number\n  message?: string | ((p: string[]) => string | Observable<WaitMessage>)\n  minWidth?: number\n  paneKey: string\n  path?: string\n  selected?: boolean\n  title?: string\n  tone?: CardTone\n}\n\nconst DELAY = false\nconst DEFAULT_MESSAGE_KEY = 'panes.resolving.default-message'\n\nconst Content = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n`\n\n/**\n * @internal\n */\nexport const LoadingPane = memo((props: LoadingPaneProps) => {\n  const {\n    delay = 300,\n    flex,\n    message: messageProp = getWaitMessages,\n    minWidth,\n    paneKey,\n    path,\n    selected,\n    title,\n    tone,\n  } = props\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const resolvedMessage = useMemo(() => {\n    if (typeof messageProp === 'function') {\n      return messageProp(path ? path.split(';') : [])\n    }\n\n    return messageProp\n  }, [messageProp, path])\n\n  const [currentMessage, setCurrentMessage] = useState<string | null>(() => {\n    if (typeof resolvedMessage === 'string') return resolvedMessage\n    return t(DEFAULT_MESSAGE_KEY)\n  })\n\n  useEffect(() => {\n    if (typeof resolvedMessage !== 'object') return undefined\n    if (typeof resolvedMessage.subscribe !== 'function') return undefined\n\n    const sub = resolvedMessage.subscribe((message) => {\n      setCurrentMessage('messageKey' in message ? t(message.messageKey) : message.message)\n    })\n\n    return () => sub.unsubscribe()\n  }, [resolvedMessage, t])\n\n  const [contentElement, setContentElement] = useState<HTMLDivElement | null>(null)\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    if (!contentElement) return undefined\n    return _raf2(() => setMounted(true))\n  }, [contentElement])\n\n  const content = (\n    <Content\n      align=\"center\"\n      data-mounted={mounted ? '' : undefined}\n      direction=\"column\"\n      height=\"fill\"\n      justify=\"center\"\n      ref={setContentElement}\n    >\n      <LoadingBlock showText title={title || currentMessage} />\n    </Content>\n  )\n\n  return (\n    <Pane flex={flex} id={paneKey} minWidth={minWidth} selected={selected} tone={tone}>\n      <PaneContent>{DELAY ? <Delay ms={delay}>{content}</Delay> : content}</PaneContent>\n    </Pane>\n  )\n})\n\nLoadingPane.displayName = 'Memo(LoadingPane)'\n","import {useContext} from 'react'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\n\n/** @internal */\nexport function useDocumentPane(): DocumentPaneContextValue {\n  const documentPane = useContext(DocumentPaneContext)\n\n  if (!documentPane) {\n    throw new Error('DocumentPane: missing context value')\n  }\n\n  return documentPane\n}\n","import {useCallback, useLayoutEffect, useRef} from 'react'\nimport {\n  COMMENTS_INSPECTOR_NAME,\n  CommentsEnabledProvider,\n  CommentsProvider,\n  useCommentsEnabled,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface CommentsWrapperProps {\n  children: React.ReactNode\n  documentId: string\n  documentType: string\n}\n\n/**\n * @internal\n * A wrapper that conditionally wraps the document layout in a comments provider\n * if the feature is enabled for the project and the current document.\n */\nexport function CommentsWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  return (\n    <CommentsEnabledProvider documentId={documentId} documentType={documentType}>\n      <CommentsProviderWrapper documentId={documentId} documentType={documentType}>\n        {children}\n      </CommentsProviderWrapper>\n    </CommentsEnabledProvider>\n  )\n}\n\nfunction CommentsProviderWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  const {enabled} = useCommentsEnabled()\n  const {connectionState, onPathOpen, inspector, openInspector} = useDocumentPane()\n  const {params, setParams, createPathWithParams} = usePaneRouter()\n\n  const selectedCommentId = params?.comment\n  const paramsRef = useRef(params)\n\n  useLayoutEffect(() => {\n    paramsRef.current = params\n  }, [params])\n\n  const getCommentLink = useCallback(\n    (commentId: string) => {\n      // Generate a path based on the current pane params.\n      // We force a value for `inspect` to ensure that this is included in URLs when comments\n      // are created outside of the inspector context (i.e. directly on the field)\n      // @todo: consider filtering pane router params and culling all non-active RHS panes prior to generating this link\n      const path = createPathWithParams({\n        ...paramsRef.current,\n        comment: commentId,\n        inspect: COMMENTS_INSPECTOR_NAME,\n      })\n      return `${window.location.origin}${path}`\n    },\n    [createPathWithParams],\n  )\n\n  const handleClearSelectedComment = useCallback(() => {\n    setParams({...paramsRef.current, comment: undefined})\n  }, [setParams])\n\n  const handleOpenCommentsInspector = useCallback(() => {\n    if (inspector?.name === COMMENTS_INSPECTOR_NAME) return\n\n    openInspector(COMMENTS_INSPECTOR_NAME)\n  }, [inspector?.name, openInspector])\n\n  // If comments are not enabled, render the default document layout\n  if (!enabled) {\n    return <>{children}</>\n  }\n\n  return (\n    <CommentsProvider\n      documentId={documentId}\n      documentType={documentType}\n      getCommentLink={getCommentLink}\n      isCommentsOpen={inspector?.name === COMMENTS_INSPECTOR_NAME}\n      isConnecting={connectionState === 'connecting'}\n      onClearSelectedComment={handleClearSelectedComment}\n      onCommentsOpen={handleOpenCommentsInspector}\n      onPathOpen={onPathOpen}\n      selectedCommentId={selectedCommentId}\n      sortOrder=\"desc\"\n      type=\"field\"\n    >\n      {children}\n    </CommentsProvider>\n  )\n}\n","/**\n * @internal\n */\nexport const _DEBUG = false\n\nexport const EMPTY_PARAMS = {}\nexport const LOADING_PANE = Symbol('LOADING_PANE')\n\nexport const DOCUMENT_PANEL_PORTAL_ELEMENT = 'documentPanelPortalElement'\n","import {useContext} from 'react'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {type StructureToolContextValue} from './types'\n\n/** @internal */\nexport function useStructureTool(): StructureToolContextValue {\n  const structureTool = useContext(StructureToolContext)\n\n  if (!structureTool) throw new Error(`StructureTool: missing context value`)\n\n  return structureTool\n}\n","import {type PaneRouterContextValue} from '../../components'\nimport {type PaneMenuItemGroup} from '../../types'\n\nexport const DOCUMENT_PANEL_MIN_WIDTH = 320\nexport const DOCUMENT_PANEL_INITIAL_MIN_WIDTH = 600\n\nexport const DOCUMENT_INSPECTOR_MIN_WIDTH = 320\nexport const DOCUMENT_INSPECTOR_MAX_WIDTH = 540\n\nexport const EMPTY_PARAMS: NonNullable<PaneRouterContextValue['params']> = {}\n\nexport const INSPECT_ACTION_PREFIX = 'inspect:'\n\nexport const DEFAULT_MENU_ITEM_GROUPS: PaneMenuItemGroup[] = [{id: 'inspectors'}, {id: 'links'}]\n\n// inspectors\nexport const HISTORY_INSPECTOR_NAME = 'sanity/structure/history'\nexport const VALIDATION_INSPECTOR_NAME = 'sanity/structure/validation'\n","import {memo, useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, useUnique} from 'sanity'\n\ninterface DocumentInspectorMenuItemsResolverProps {\n  documentId: string\n  documentType: string\n  inspectors: DocumentInspector[]\n  onMenuItems: (items: DocumentInspectorMenuItem[]) => void\n}\n\n// The menu item in a document inspector are resolved in a React hook (`useMenuItem`).\n// This means that the menu item needs to be resolved in a React component (in accordance with the rules of hooks).\n// In this component, we map over the configured inspectors and render a `InspectorMenuItem` for each.\n// The `InspectorMenuItem` will resolve the menu item in a React hook and call the `setMenuItem` callback\n// with the resolved menu item and the index of the inspector.\n// Finally, we call the `onMenuItems` callback with the resolved menu items.\nexport function DocumentInspectorMenuItemsResolver(props: DocumentInspectorMenuItemsResolverProps) {\n  const {documentId, documentType, inspectors, onMenuItems} = props\n\n  const len = inspectors.length\n  const lenRef = useRef(len)\n\n  const [menuItems, setMenuItems] = useState<DocumentInspectorMenuItem[]>(() =>\n    Array.from(new Array(len)),\n  )\n\n  const menuItemsRef = useRef(menuItems)\n\n  useEffect(() => {\n    if (lenRef.current !== len) {\n      const newFieldActions = Array.from(new Array(len))\n\n      for (let i = 0; i < len; i++) {\n        newFieldActions[i] = menuItemsRef.current[i]\n      }\n\n      lenRef.current = len\n\n      setMenuItems(() => {\n        menuItemsRef.current = newFieldActions\n        return newFieldActions\n      })\n    }\n  }, [len])\n\n  const setMenuItem = useCallback((index: number, node: DocumentInspectorMenuItem) => {\n    setMenuItems((prev) => {\n      const next = [...prev]\n      next[index] = node\n      menuItemsRef.current = next\n      return next\n    })\n  }, [])\n\n  useEffect(() => {\n    onMenuItems(menuItems.filter(Boolean))\n  }, [menuItems, onMenuItems])\n\n  const InspectorMenuItems = useMemo(() => {\n    return inspectors.map((inspector, index) => {\n      return inspector.useMenuItem\n        ? ([\n            defineInspectorMenuItemComponent({\n              documentId,\n              documentType,\n              index,\n              setMenuItem,\n              useMenuItem: inspector.useMenuItem,\n            }),\n            inspector.name,\n          ] as const)\n        : ([() => null, ''] as const)\n    })\n  }, [documentId, documentType, inspectors, setMenuItem])\n\n  return (\n    <>\n      {InspectorMenuItems.map(([InspectorMenuItem, key]) => key && <InspectorMenuItem key={key} />)}\n    </>\n  )\n}\n\nfunction defineInspectorMenuItemComponent({\n  documentId,\n  documentType,\n  index,\n  setMenuItem,\n  useMenuItem,\n}: {\n  documentId: string\n  documentType: string\n  index: number\n  setMenuItem: (index: number, node: DocumentInspectorMenuItem) => void\n  useMenuItem: NonNullable<DocumentInspector['useMenuItem']>\n}) {\n  return memo(function InspectorMenuItem() {\n    const menuItem = useMenuItem({\n      documentId,\n      documentType,\n    })\n    const node = useUnique(menuItem)\n\n    useEffect(() => {\n      setMenuItem(index, node)\n    }, [node])\n\n    return null\n  })\n}\n","import {unstable_useValuePreview as useValuePreview} from 'sanity'\n\nimport {useDocumentPane} from './useDocumentPane'\n\n/**\n * useDocumentTitle hook return type.\n *\n * @beta\n * @hidden\n */\ninterface UseDocumentTitle {\n  error?: string\n  title?: string\n}\n\n/**\n * React hook that returns the document title for the current document in the document pane.\n *\n * @beta\n * @hidden\n *\n * @returns The document title or error. See {@link UseDocumentTitle}\n */\nexport function useDocumentTitle(): UseDocumentTitle {\n  const {connectionState, schemaType, title, editState} = useDocumentPane()\n  const documentValue = editState?.draft || editState?.published\n  const subscribed = Boolean(documentValue)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return {error: undefined, title: undefined}\n  }\n\n  if (title) {\n    return {error: undefined, title}\n  }\n\n  if (!documentValue) {\n    return {error: undefined, title: `New ${schemaType?.title || schemaType?.name}`}\n  }\n\n  if (error) {\n    return {error: `Error: ${error.message}`, title: undefined}\n  }\n\n  return {error: undefined, title: value?.title}\n}\n","import {useToast} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useRef} from 'react'\nimport {Translate, useDocumentOperationEvent, useTranslation} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {useDocumentPane} from './useDocumentPane'\nimport {useDocumentTitle} from './useDocumentTitle'\n\nconst IGNORE_OPS = ['patch', 'commit']\n\nexport const DocumentOperationResults = memo(function DocumentOperationResults() {\n  const {push: pushToast} = useToast()\n  const {documentId, documentType, value: documentPaneValue} = useDocumentPane()\n  const documentTitleInfo = useDocumentTitle()\n  const titleError = documentTitleInfo.error\n  const event: any = useDocumentOperationEvent(documentId, documentType)\n  const prevEvent = useRef(event)\n  const paneRouter = usePaneRouter()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const title = useMemo(() => {\n    // If title isn't set from document preview, use the title from the document pane value\n    if (\n      !documentTitleInfo.title &&\n      !titleError &&\n      !IGNORE_OPS.includes(event?.op) &&\n      typeof documentPaneValue.title === 'string' &&\n      event?.type === 'success'\n    ) {\n      return documentPaneValue.title\n    }\n    return documentTitleInfo.title\n  }, [documentTitleInfo.title, titleError, event, documentPaneValue.title])\n  //Truncate the document title and add \"...\" if it is over 25 characters\n  const documentTitleBase = title || t('panes.document-operation-results.operation-undefined-title')\n  const documentTitle =\n    documentTitleBase.length > 25 ? `${documentTitleBase.slice(0, 25)}...` : documentTitleBase\n\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    let cleanupId: number | undefined\n\n    if (event.type === 'error') {\n      pushToast({\n        closable: true,\n        duration: 30000, // 30s\n        status: 'error',\n        title: t('panes.document-operation-results.operation-error', {context: event.op}),\n        description: (\n          <details>\n            <summary>{t('panes.document-operation-results.error.summary.title')}</summary>\n            {event.error.message}\n          </details>\n        ),\n      })\n    }\n\n    if (event.type === 'success' && !IGNORE_OPS.includes(event.op)) {\n      pushToast({\n        closable: true,\n        status: 'success',\n        title: (\n          <Translate\n            context={event.op}\n            i18nKey=\"panes.document-operation-results.operation-success\"\n            t={t}\n            values={{\n              op: event.op,\n              title: documentTitle,\n            }}\n            components={{\n              Strong: 'strong',\n            }}\n          />\n        ),\n      })\n    }\n\n    /**\n     * If the document was deleted successfully, close the pane.\n     */\n    if (event.type === 'success' && event.op === 'delete') {\n      // Wait until next tick to allow deletion toasts to appear first\n      cleanupId = setTimeout(() => paneRouter.closeCurrentAndAfter(), 0) as any as number\n    }\n\n    prevEvent.current = event\n\n    // eslint-disable-next-line consistent-return\n    return () => clearTimeout(cleanupId)\n  }, [event, paneRouter, pushToast, t, documentTitle])\n\n  return null\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type PreviewValue, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {assignWith} from 'lodash'\nimport {type ReactNode} from 'react'\nimport {combineLatest, type Observable, of} from 'rxjs'\nimport {map, startWith} from 'rxjs/operators'\nimport {type DocumentPreviewStore, getDraftId, getPublishedId} from 'sanity'\n\nimport {type PaneItemPreviewState} from './types'\n\nexport const isLiveEditEnabled = (schemaType: SchemaType) => schemaType.liveEdit === true\n\nexport const getMissingDocumentFallback = (item: SanityDocument) => ({\n  title: <em>{item.title ? String(item.title) : 'Missing document'}</em>,\n  subtitle: <em>{item.title ? `Missing document ID: ${item._id}` : `Document ID: ${item._id}`}</em>,\n  media: () => <WarningOutlineIcon />,\n})\n\nexport const getValueWithFallback = ({\n  value,\n  draft,\n  published,\n}: {\n  value: SanityDocument\n  draft?: Partial<SanityDocument> | PreviewValue | null\n  published?: Partial<SanityDocument> | PreviewValue | null\n}) => {\n  const snapshot = draft || published\n\n  if (!snapshot) {\n    return getMissingDocumentFallback(value)\n  }\n\n  return assignWith({}, snapshot, value, (objValue, srcValue) => {\n    return typeof srcValue === 'undefined' ? objValue : srcValue\n  })\n}\n\nexport function getPreviewStateObservable(\n  documentPreviewStore: DocumentPreviewStore,\n  schemaType: SchemaType,\n  documentId: string,\n  title: ReactNode,\n): Observable<PaneItemPreviewState> {\n  const draft$ = isLiveEditEnabled(schemaType)\n    ? of({snapshot: null})\n    : documentPreviewStore.observeForPreview(\n        {_type: 'reference', _ref: getDraftId(documentId)},\n        schemaType,\n      )\n\n  const published$ = documentPreviewStore.observeForPreview(\n    {_type: 'reference', _ref: getPublishedId(documentId)},\n    schemaType,\n  )\n\n  return combineLatest([draft$, published$]).pipe(\n    map(([draft, published]) => ({\n      draft: draft.snapshot ? {title, ...(draft.snapshot || {})} : null,\n      isLoading: false,\n      published: published.snapshot ? {title, ...(published.snapshot || {})} : null,\n    })),\n    startWith({draft: null, isLoading: true, published: null}),\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Card, type CardProps, Flex, Text} from '@sanity/ui'\nimport {type HTMLProps, type ReactNode} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport interface DocumentInspectorHeaderProps {\n  as?: CardProps['as']\n  closeButtonLabel: string\n  flex?: CardProps['flex']\n  onClose: () => void\n  title: ReactNode\n}\n\nconst Root = styled(Card)({\n  position: 'relative',\n  zIndex: 1,\n  lineHeight: 0,\n})\n\n/** @internal */\nexport function DocumentInspectorHeader(\n  props: DocumentInspectorHeaderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n) {\n  const {as: forwardedAs, children, closeButtonLabel, onClose, title, ...restProps} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Root {...restProps} as={forwardedAs}>\n      <Flex padding={2}>\n        <Box flex={1} padding={3}>\n          <Text as=\"h1\" size={1} weight=\"medium\">\n            {title}\n          </Text>\n        </Box>\n        <Box flex=\"none\" padding={1}>\n          <Button\n            aria-label={closeButtonLabel}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n      {children}\n    </Root>\n  )\n}\n","import {type MouseEvent, useCallback, useRef} from 'react'\nimport {styled} from 'styled-components'\n\nconst Root = styled.div`\n  position: absolute;\n  top: 0;\n  left: -4px;\n  bottom: 0;\n  width: 9px;\n  z-index: 201;\n  cursor: ew-resize;\n\n  /* Border */\n  & > span:nth-child(1) {\n    display: block;\n    border-left: 1px solid var(--card-border-color);\n    position: absolute;\n    top: 0;\n    left: 4px;\n    bottom: 0;\n    transition: opacity 200ms;\n  }\n\n  /* Hover effect */\n  & > span:nth-child(2) {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 9px;\n    bottom: 0;\n    background-color: var(--card-border-color);\n    opacity: 0;\n    transition: opacity 150ms;\n  }\n\n  @media (hover: hover) {\n    &:hover > span:nth-child(2) {\n      opacity: 0.2;\n    }\n  }\n`\n\nexport function Resizer(props: {onResize: (delta: number) => void; onResizeStart: () => void}) {\n  const {onResize, onResizeStart} = props\n\n  const mouseXRef = useRef(0)\n\n  const handleMouseDown = useCallback(\n    (event: MouseEvent) => {\n      event.preventDefault()\n\n      mouseXRef.current = event.pageX\n\n      onResizeStart()\n\n      const handleMouseMove = (e: globalThis.MouseEvent) => {\n        e.preventDefault()\n        onResize(e.pageX - mouseXRef.current)\n      }\n\n      const handleMouseUp = () => {\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [onResize, onResizeStart],\n  )\n\n  return (\n    <Root onMouseDown={handleMouseDown}>\n      {/* Hover effect */}\n      <span />\n\n      {/* Border */}\n      <span />\n    </Root>\n  )\n}\n","import {Box, type BoxProps} from '@sanity/ui'\nimport {type HTMLProps, useCallback, useMemo, useRef, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {Resizer} from './Resizer'\n\nexport interface ResizableProps {\n  minWidth: number\n  maxWidth: number\n}\n\nconst Root = styled(Box)`\n  position: relative;\n  flex: 1;\n  padding-left: 1px;\n`\n\nexport function Resizable(\n  props: ResizableProps & BoxProps & Omit<HTMLProps<HTMLDivElement>, 'as'>,\n) {\n  const {as: forwardedAs, children, minWidth, maxWidth, ...restProps} = props\n  const [element, setElement] = useState<HTMLDivElement | null>(null)\n  const elementWidthRef = useRef<number>()\n  const [targetWidth, setTargetWidth] = useState<number>()\n\n  const handleResizeStart = useCallback(() => {\n    elementWidthRef.current = element?.offsetWidth\n  }, [element])\n\n  const handleResize = useCallback(\n    (deltaX: number) => {\n      const w = elementWidthRef.current\n\n      if (!w) return\n\n      setTargetWidth(Math.min(Math.max(w - deltaX, minWidth), maxWidth))\n    },\n    [minWidth, maxWidth],\n  )\n\n  const style = useMemo(\n    () => (targetWidth ? {flex: 'none', width: targetWidth} : {minWidth, maxWidth}),\n    [minWidth, maxWidth, targetWidth],\n  )\n\n  return (\n    <Root as={forwardedAs} {...restProps} ref={setElement} style={style}>\n      {children}\n      <Resizer onResize={handleResize} onResizeStart={handleResizeStart} />\n    </Root>\n  )\n}\n","import {Box} from '@sanity/ui'\nimport {createElement, type ReactElement, useCallback} from 'react'\n\nimport {usePane} from '../../../components'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DOCUMENT_INSPECTOR_MAX_WIDTH, DOCUMENT_INSPECTOR_MIN_WIDTH} from '../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Resizable} from './Resizable'\n\ninterface DocumentInspectorPanelProps {\n  documentId: string\n  documentType: string\n  flex?: number | number[]\n}\n\nexport function DocumentInspectorPanel(props: DocumentInspectorPanelProps): ReactElement | null {\n  const {documentId, documentType, flex} = props\n  const {collapsed} = usePane()\n  const {closeInspector, inspector} = useDocumentPane()\n  const {features} = useStructureTool()\n\n  const handleClose = useCallback(() => {\n    if (inspector) closeInspector(inspector.name)\n  }, [closeInspector, inspector])\n\n  if (collapsed || !inspector) return null\n\n  const element = createElement(inspector.component, {\n    onClose: handleClose,\n    documentId,\n    documentType,\n  })\n\n  if (features.resizablePanes) {\n    return (\n      <Resizable\n        as=\"aside\"\n        data-ui=\"DocumentInspectorPanel\"\n        flex={flex}\n        maxWidth={DOCUMENT_INSPECTOR_MAX_WIDTH}\n        minWidth={DOCUMENT_INSPECTOR_MIN_WIDTH}\n      >\n        {element}\n      </Resizable>\n    )\n  }\n\n  return (\n    <Box as=\"aside\" data-ui=\"DocumentInspectorPanel\" flex={flex}>\n      {element}\n    </Box>\n  )\n}\n","import {useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {map} from 'rxjs/operators'\nimport {useKeyValueStore} from 'sanity'\n\nconst STRUCTURE_TOOL_NAMESPACE = 'studio.structure-tool'\n\n/**\n * @internal\n */\nexport function useStructureToolSetting<ValueType>(\n  namespace: string,\n  key: string | null,\n  defaultValue?: ValueType,\n): [ValueType | undefined, (_value: ValueType) => void] {\n  const keyValueStore = useKeyValueStore()\n\n  const keyValueStoreKey = [STRUCTURE_TOOL_NAMESPACE, namespace, key].filter(Boolean).join('.')\n\n  const value$ = useMemo(() => {\n    return keyValueStore\n      .getKey(keyValueStoreKey)\n      .pipe(map((value) => (value === null ? defaultValue : value)))\n  }, [defaultValue, keyValueStore, keyValueStoreKey])\n\n  const value = useObservable(value$, defaultValue) as ValueType\n  const set = useCallback(\n    (newValue: ValueType) => {\n      if (newValue !== value) {\n        keyValueStore.setKey(keyValueStoreKey, newValue as string)\n      }\n    },\n    [keyValueStore, keyValueStoreKey, value],\n  )\n\n  return useMemo(() => [value, set], [set, value])\n}\n","export const VIEW_MODE_PARSED = {id: 'parsed', title: 'document-inspector.view-mode.parsed'}\nexport const VIEW_MODE_RAW = {id: 'raw', title: 'document-inspector.view-mode.raw-json'}\nexport const VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW]\n","import {type SanityDocumentLike} from '@sanity/types'\nimport LRU from 'quick-lru'\nimport {isRecord, isString} from 'sanity'\n\nconst lru = new LRU({maxSize: 1000})\n\nexport function isExpanded(keyPath: any, value: any): any {\n  const cached = lru.get(keyPath)\n\n  if (cached === undefined) {\n    lru.set(keyPath, Array.isArray(value) || isRecord(value))\n    return isExpanded(keyPath, value)\n  }\n\n  return cached\n}\n\nexport function toggleExpanded(event: any): void {\n  const {path} = event\n  const current = lru.get(path)\n\n  if (current === undefined) {\n    // something is wrong\n    return\n  }\n\n  lru.set(path, !current)\n}\n\nexport function selectElement(element: HTMLElement): void {\n  const sel = window.getSelection()\n\n  if (sel) {\n    const range = document.createRange()\n\n    sel.removeAllRanges()\n    range.selectNodeContents(element)\n    sel.addRange(range)\n  }\n}\n\nexport function select(event: any): void {\n  selectElement(event.currentTarget)\n}\n\nexport function maybeSelectAll(event: any): void {\n  const selectAll = event.keyCode === 65 && (event.metaKey || event.ctrlKey)\n\n  if (!selectAll) {\n    return\n  }\n\n  event.preventDefault()\n\n  selectElement(event.currentTarget)\n}\n\nexport function isDocumentLike(value: unknown): value is SanityDocumentLike {\n  return isRecord(value) && isString(value._id) && isString(value._type)\n}\n","import {rem, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const JSONInspectorWrapper = styled.div(({theme}: {theme: Theme}) => {\n  const {color, fonts, space} = theme.sanity\n\n  return css`\n    & .json-inspector,\n    & .json-inspector .json-inspector__selection {\n      font-family: ${fonts.code.family};\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n      color: var(--card-code-fg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf {\n      padding-left: ${rem(space[4])};\n    }\n\n    & .json-inspector .json-inspector__leaf.json-inspector__leaf_root {\n      padding-top: ${rem(space[3])};\n      padding-left: 0;\n    }\n\n    & .json-inspector > .json-inspector__leaf_root > .json-inspector__line > .json-inspector__key {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__line {\n      display: block;\n      position: relative;\n      cursor: default;\n    }\n\n    & .json-inspector .json-inspector__line::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: -200px;\n      right: -50px;\n      bottom: 0;\n      z-index: -1;\n      pointer-events: none;\n    }\n\n    & .json-inspector .json-inspector__line:hover::after {\n      background: var(--card-code-bg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line {\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line::before {\n      content: '▸ ';\n      margin-left: calc(0 - ${rem(space[4])} + 3px);\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    &\n      .json-inspector\n      .json-inspector__leaf_expanded.json-inspector__leaf_composite\n      > .json-inspector__line::before {\n      content: '▾ ';\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    & .json-inspector .json-inspector__radio,\n    & .json-inspector .json-inspector__flatpath {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__value {\n      margin-left: ${rem(space[4] / 2)};\n    }\n\n    &\n      .json-inspector\n      > .json-inspector__leaf_root\n      > .json-inspector__line\n      > .json-inspector__key\n      + .json-inspector__value {\n      margin: 0;\n    }\n\n    & .json-inspector .json-inspector__key {\n      color: ${color.syntax.property};\n    }\n\n    & .json-inspector .json-inspector__value_helper,\n    & .json-inspector .json-inspector__value_null {\n      color: ${color.syntax.constant};\n    }\n\n    & .json-inspector .json-inspector__not-found {\n      padding-top: ${rem(space[3])};\n    }\n\n    & .json-inspector .json-inspector__value_string {\n      color: ${color.syntax.string};\n    }\n\n    & .json-inspector .json-inspector__value_boolean {\n      color: ${color.syntax.boolean};\n    }\n\n    & .json-inspector .json-inspector__value_number {\n      color: ${color.syntax.number};\n    }\n\n    & .json-inspector .json-inspector__show-original {\n      display: inline-block;\n      padding: 0 6px;\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__show-original:hover {\n      color: inherit;\n    }\n\n    & .json-inspector .json-inspector__show-original::before {\n      content: '↔';\n    }\n\n    & .json-inspector .json-inspector__show-original:hover::after {\n      content: ' expand';\n    }\n  `\n})\n","import {SearchIcon} from '@sanity/icons'\nimport {TextInput} from '@sanity/ui'\nimport {type ChangeEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport function Search(props: {onChange: (q: string) => void; query: string}) {\n  const {onChange, query} = props\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.value),\n    [onChange],\n  )\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <TextInput\n      icon={SearchIcon}\n      onChange={handleChange}\n      placeholder={t('document-inspector.search.placeholder')}\n      radius={2}\n      value={query || ''}\n    />\n  )\n}\n","import JSONInspector from '@rexxars/react-json-inspector'\nimport {type SanityDocument} from '@sanity/types'\nimport {Card, Code, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {Translate, useTranslation} from 'sanity'\n\nimport {Dialog, Tab} from '../../../../ui-components'\nimport {DocTitle} from '../../../components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureToolSetting} from '../../../useStructureToolSetting'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {VIEW_MODE_PARSED, VIEW_MODE_RAW, VIEW_MODES} from './constants'\nimport {isDocumentLike, isExpanded, maybeSelectAll, select, toggleExpanded} from './helpers'\nimport {JSONInspectorWrapper} from './InspectDialog.styles'\nimport {Search} from './Search'\n\ninterface InspectDialogProps {\n  value: Partial<SanityDocument> | null\n}\n\nexport function InspectDialog(props: InspectDialogProps) {\n  const {value} = props\n  const {onInspectClose, paneKey} = useDocumentPane()\n  const dialogIdPrefix = `${paneKey}_inspect_`\n\n  /* this creates a view mode (the default that it opens with is the parsed tab) that is saved based on the paneKey\n  where the inspect dialog lives.\n  This also means that when a page is loaded, the state of the tabs remains and doesn't revert to the pane tab */\n  const [viewModeId, onViewModeChange] = useStructureToolSetting(\n    'inspect-view-mode',\n    null,\n    'parsed',\n  )\n\n  /* based on the view mode it shows the right tab content */\n  const viewMode = VIEW_MODES.find((mode) => mode.id === viewModeId)\n\n  const setParsedViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_PARSED.id)\n  }, [onViewModeChange])\n\n  const setRawViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_RAW.id)\n  }, [onViewModeChange])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Dialog\n      bodyHeight=\"fill\"\n      id={`${dialogIdPrefix}dialog`}\n      header={\n        isDocumentLike(value) ? (\n          <Translate\n            t={t}\n            i18nKey=\"document-inspector.dialog.title\"\n            components={{\n              DocumentTitle: () => (\n                <em>\n                  <DocTitle document={value} />\n                </em>\n              ),\n            }}\n          />\n        ) : (\n          <em>{t('document-inspector.dialog.title-no-value')}</em>\n        )\n      }\n      onClose={onInspectClose}\n      onClickOutside={onInspectClose}\n      padding={false}\n      width={2}\n    >\n      <Flex direction=\"column\" height=\"fill\">\n        <Card\n          padding={3}\n          paddingTop={0}\n          shadow={1}\n          style={{position: 'sticky', bottom: 0, zIndex: 3}}\n        >\n          <TabList space={1}>\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_PARSED.id}`}\n              label={t(VIEW_MODE_PARSED.title)}\n              onClick={setParsedViewMode}\n              selected={viewMode === VIEW_MODE_PARSED}\n            />\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_RAW.id}`}\n              label={t(VIEW_MODE_RAW.title)}\n              onClick={setRawViewMode}\n              selected={viewMode === VIEW_MODE_RAW}\n            />\n          </TabList>\n        </Card>\n\n        <TabPanel\n          aria-labelledby={`${dialogIdPrefix}tab-${viewModeId}`}\n          flex={1}\n          id={`${dialogIdPrefix}tabpanel`}\n          overflow=\"auto\"\n          padding={4}\n          style={{outline: 'none'}}\n        >\n          {viewMode === VIEW_MODE_PARSED && (\n            <JSONInspectorWrapper>\n              <JSONInspector\n                data={value}\n                isExpanded={isExpanded}\n                onClick={toggleExpanded}\n                search={Search}\n                filterOptions={{ignoreCase: true}}\n              />\n            </JSONInspectorWrapper>\n          )}\n\n          {viewMode === VIEW_MODE_RAW && (\n            <Code\n              language=\"json\"\n              tabIndex={0}\n              onKeyDown={maybeSelectAll}\n              onDoubleClick={select}\n              onFocus={select}\n              size={1}\n            >\n              {JSON.stringify(value, null, 2)}\n            </Code>\n          )}\n        </TabPanel>\n      </Flex>\n    </Dialog>\n  )\n}\n","import {type ButtonMode, type ButtonTone, Card, type CardTone, Flex, Text} from '@sanity/ui'\nimport {type ComponentType, type ElementType, type JSX, type ReactNode} from 'react'\n\nimport {Button} from '../../../../../ui-components'\n\ninterface BannerProps {\n  action?: {\n    as?: ElementType | keyof JSX.IntrinsicElements\n    icon?: ComponentType\n    onClick?: () => void\n    text: string\n    tone?: ButtonTone\n    disabled?: boolean\n    mode?: ButtonMode\n  }\n  content: ReactNode\n  icon?: ComponentType\n  tone?: CardTone\n}\n\nexport function Banner(props: BannerProps) {\n  const {action, content, icon: Icon, tone = 'transparent', ...rest} = props\n\n  return (\n    <Card borderBottom paddingX={4} paddingY={2} tone={tone} {...rest}>\n      <Flex align=\"center\" gap={3}>\n        {Icon && (\n          <Text size={0}>\n            <Icon />\n          </Text>\n        )}\n\n        <Flex align=\"center\" flex={1} gap={2} paddingY={3}>\n          {content}\n        </Flex>\n\n        {action && (\n          <Button {...action} mode={action.mode || 'ghost'} tone={action.tone || 'default'} />\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {ReadOnlyIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {useDocumentOperation, useTranslation} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\ninterface DeletedDocumentBannerProps {\n  revisionId?: string | null\n}\n\nexport function DeletedDocumentBanner({revisionId}: DeletedDocumentBannerProps) {\n  const {documentId, documentType} = useDocumentPane()\n  const {restore} = useDocumentOperation(documentId, documentType)\n  const {navigateIntent} = useRouter()\n  const handleRestore = useCallback(() => {\n    if (revisionId) {\n      restore.execute(revisionId)\n      navigateIntent('edit', {id: documentId, type: documentType})\n    }\n  }, [documentId, documentType, navigateIntent, restore, revisionId])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Banner\n      action={\n        revisionId\n          ? {\n              onClick: handleRestore,\n              text: t('banners.deleted-document-banner.restore-button.text'),\n            }\n          : undefined\n      }\n      content={\n        <Text size={1} weight=\"medium\">\n          {t('banners.deleted-document-banner.text')}\n        </Text>\n      }\n      data-testid=\"deleted-document-banner\"\n      icon={ReadOnlyIcon}\n    />\n  )\n}\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {isDeprecatedSchemaType, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\nexport function DeprecatedDocumentTypeBanner() {\n  const {schemaType} = useDocumentPane()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!isDeprecatedSchemaType(schemaType)) {\n    return null\n  }\n\n  return (\n    <Banner\n      content={\n        <Text size={1} weight=\"medium\">\n          <Translate t={t} i18nKey=\"banners.deprecated-document-type-banner.text\" />{' '}\n          {schemaType.deprecated.reason}\n        </Text>\n      }\n      data-testid=\"deprecated-document-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/** @internal */\nexport const AskToEditDialogOpened = defineEvent({\n  name: 'Ask To Edit Dialog Opened',\n  version: 1,\n  description: 'User clicked the \"Ask to edit\" button in the document permissions banner',\n})\n\n/** @internal */\nexport const AskToEditRequestSent = defineEvent({\n  name: 'Ask To Edit Request Sent',\n  version: 1,\n  description: 'User sent a role change request from the dialog',\n})\n","import {useTelemetry} from '@sanity/telemetry/react'\nimport {Box, Card, DialogProvider, Flex, Stack, Text, TextInput, useToast} from '@sanity/ui'\nimport {useId, useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {catchError, map, type Observable, of, startWith} from 'rxjs'\nimport {type Role, useClient, useProjectId, useTranslation, useZIndex} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {AskToEditRequestSent} from './__telemetry__/RequestPermissionDialog.telemetry'\nimport {type AccessRequest} from './useRoleRequestsStatus'\n\nconst MAX_NOTE_LENGTH = 150\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface RequestPermissionDialogProps {\n  onClose?: () => void\n  onRequestSubmitted?: () => void\n}\n\n/**\n * A dialog that enables the user to request permission to change their\n * member role from \"Viewer\" to \"Editor\" or \"Admin\" depending on the\n * project's available roles.\n *\n * @internal\n */\nexport function RequestPermissionDialog({\n  onClose,\n  onRequestSubmitted,\n}: RequestPermissionDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemtry = useTelemetry()\n  const dialogId = `request-permissions-${useId()}`\n  const projectId = useProjectId()\n  const client = useClient({apiVersion: '2024-09-26'})\n  const toast = useToast()\n  const zOffset = useZIndex()\n\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const [note, setNote] = useState('')\n\n  const [msgError, setMsgError] = useState<string | undefined>()\n  const [hasTooManyRequests, setHasTooManyRequests] = useState<boolean>(false)\n  const [hasBeenDenied, setHasBeenDenied] = useState<boolean>(false)\n\n  const requestedRole$: Observable<'administrator' | 'editor'> = useMemo(() => {\n    const adminRole = 'administrator' as const\n    if (!projectId || !client) return of(adminRole)\n    return client.observable\n      .request<(Role & {appliesToUsers?: boolean})[]>({url: `/projects/${projectId}/roles`})\n      .pipe(\n        map((roles) => {\n          const hasEditor = roles\n            .filter((role) => role?.appliesToUsers)\n            .find((role) => role.name === 'editor')\n          return hasEditor ? 'editor' : adminRole\n        }),\n        startWith(adminRole),\n        catchError(() => of(adminRole)),\n      )\n  }, [projectId, client])\n\n  const requestedRole = useObservable(requestedRole$)\n\n  const onSubmit = () => {\n    setIsSubmitting(true)\n    client\n      .request<AccessRequest | null>({\n        url: `/access/project/${projectId}/requests`,\n        method: 'post',\n        body: {note, requestUrl: window?.location.href, requestedRole, type: 'role'},\n      })\n      .then((request) => {\n        if (request) {\n          if (onRequestSubmitted) onRequestSubmitted()\n          telemtry.log(AskToEditRequestSent)\n          toast.push({title: 'Edit access requested'})\n        }\n      })\n      .catch((err) => {\n        const statusCode = err?.response?.statusCode\n        const errMessage = err?.response?.body?.message\n        if (statusCode === 429) {\n          // User is over their cross-project request limit\n          setHasTooManyRequests(true)\n          setMsgError(errMessage)\n        }\n        if (statusCode === 409) {\n          // If we get a 409, user has been denied on this project or has a valid pending request\n          // valid pending request should be handled by GET request above\n          setHasBeenDenied(true)\n          setMsgError(errMessage)\n        } else {\n          toast.push({\n            title: 'There was a problem submitting your request.',\n            status: 'error',\n          })\n        }\n      })\n      .finally(() => {\n        setIsSubmitting(false)\n      })\n  }\n\n  return (\n    <DialogProvider position={'fixed'} zOffset={zOffset.fullscreen}>\n      <Dialog\n        width={1}\n        id={dialogId}\n        header={t('request-permission-dialog.header.text')}\n        footer={{\n          cancelButton: {\n            onClick: onClose,\n            text: t('confirm-dialog.cancel-button.fallback-text'),\n          },\n          confirmButton: {\n            onClick: onSubmit,\n            loading: isSubmitting,\n            disabled: hasTooManyRequests || hasBeenDenied,\n            text: t('request-permission-dialog.confirm-button.text'),\n            tone: 'primary',\n            type: 'submit',\n          },\n        }}\n        onClose={onClose}\n        onClickOutside={onClose}\n      >\n        <DialogBody>\n          <Stack space={4}>\n            <Text>{t('request-permission-dialog.description.text')}</Text>\n            {hasTooManyRequests || hasBeenDenied ? (\n              <Card tone={'caution'} padding={3} radius={2} shadow={1}>\n                <Text size={1}>\n                  {hasTooManyRequests && (\n                    <>{msgError ?? t('request-permission-dialog.warning.limit-reached.text')}</>\n                  )}\n                  {hasBeenDenied && (\n                    <>{msgError ?? t('request-permission-dialog.warning.denied.text')}</>\n                  )}\n                </Text>\n              </Card>\n            ) : (\n              <Stack space={3} paddingBottom={0}>\n                <TextInput\n                  placeholder={t('request-permission-dialog.note-input.placeholder.text')}\n                  disabled={isSubmitting}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') onSubmit()\n                  }}\n                  maxLength={MAX_NOTE_LENGTH}\n                  value={note}\n                  onChange={(e) => {\n                    setNote(e.currentTarget.value)\n                  }}\n                />\n\n                <Text align=\"right\" muted size={1}>{`${note.length}/${MAX_NOTE_LENGTH}`}</Text>\n              </Stack>\n            )}\n          </Stack>\n        </DialogBody>\n      </Dialog>\n    </DialogProvider>\n  )\n}\n","import {addWeeks, isAfter, isBefore} from 'date-fns'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {of} from 'rxjs'\nimport {catchError, map, startWith} from 'rxjs/operators'\nimport {type SanityClient, useClient, useProjectId} from 'sanity'\n\n/** @internal */\nexport interface AccessRequest {\n  id: string\n  status: 'pending' | 'accepted' | 'declined'\n  resourceId: string\n  resourceType: 'project'\n  createdAt: string\n  updatedAt: string\n  updatedByUserId: string\n  requestedByUserId: string\n  requestedRole: string\n  type: 'access' | 'role'\n  note: string\n}\n\nconst LOADING_STATE = {loading: true, error: false, status: undefined}\nconst EMPTY_STATE = {loading: false, error: false, status: 'none'}\nconst DECLINED_STATE = {loading: false, error: false, status: 'declined'}\nconst PENDING_STATE = {loading: false, error: false, status: 'pending'}\nconst EXPIRED_STATE = {loading: false, error: false, status: 'expired'}\n\n/** @internal */\nexport const useRoleRequestsStatus = () => {\n  const client = useClient({apiVersion: '2024-07-01'})\n  const projectId = useProjectId()\n\n  const checkRoleRequests$ = useMemo(() => {\n    if (!client || !projectId) {\n      return of(EMPTY_STATE)\n    }\n\n    return checkRoleRequests(client, projectId)\n  }, [client, projectId])\n\n  const {loading, error, status} = useObservable(checkRoleRequests$, LOADING_STATE)\n  return {data: status, loading, error}\n}\n\nfunction checkRoleRequests(client: SanityClient, projectId: string) {\n  return client.observable\n    .request<AccessRequest[] | null>({\n      url: '/access/requests/me',\n      tag: 'use-role-requests-status',\n    })\n    .pipe(\n      map((requests) => {\n        if (!requests || requests.length === 0) {\n          return EMPTY_STATE\n        }\n\n        // Filter requests for the specific project and where type is 'role'\n        const projectRequests = requests.filter(\n          (request) => request.resourceId === projectId && request.type === 'role',\n        )\n\n        const declinedRequest = projectRequests.find((request) => request.status === 'declined')\n        if (\n          declinedRequest &&\n          isAfter(addWeeks(new Date(declinedRequest.createdAt), 2), new Date())\n        ) {\n          return DECLINED_STATE\n        }\n\n        const pendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isAfter(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n        if (pendingRequest) {\n          return PENDING_STATE\n        }\n\n        const oldPendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isBefore(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n\n        return oldPendingRequest ? EXPIRED_STATE : EMPTY_STATE\n      }),\n      catchError((err) => {\n        console.error('Failed to fetch access requests', err)\n        return of({loading: false, error: true, status: undefined})\n      }),\n      startWith(LOADING_STATE), // Start with loading state\n    )\n}\n","import {ReadOnlyIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Text} from '@sanity/ui'\nimport {useMemo, useState} from 'react'\nimport {Translate, useCurrentUser, useListFormat, useTranslation} from 'sanity'\n\nimport {\n  RequestPermissionDialog,\n  useRoleRequestsStatus,\n} from '../../../../components/requestPermissionDialog'\nimport {AskToEditDialogOpened} from '../../../../components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {Banner} from './Banner'\n\ninterface InsufficientPermissionBannerProps {\n  requiredPermission: 'update' | 'create'\n}\n\nexport function InsufficientPermissionBanner({\n  requiredPermission,\n}: InsufficientPermissionBannerProps) {\n  const currentUser = useCurrentUser()\n\n  const {\n    data: roleRequestStatus,\n    loading: requestStatusLoading,\n    error: requestStatusError,\n  } = useRoleRequestsStatus()\n  const [requestSent, setRequestSent] = useState(false)\n  const requestPending = useMemo(\n    () => roleRequestStatus === 'pending' || roleRequestStatus === 'declined' || requestSent,\n    [roleRequestStatus, requestSent],\n  )\n  const currentUserRoles = currentUser?.roles || []\n  const isOnlyViewer = currentUserRoles.length === 1 && currentUserRoles[0].name === 'viewer'\n  const [showRequestPermissionDialog, setShowRequestPermissionDialog] = useState(false)\n\n  const listFormat = useListFormat({style: 'short'})\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemetry = useTelemetry()\n\n  const roleTitles = currentUserRoles.map((role) => role.title)\n  const roles = listFormat\n    .formatToParts(roleTitles)\n    .map((part) =>\n      part.type === 'element' ? <code key={part.value}>{part.value}</code> : part.value,\n    )\n\n  return (\n    <>\n      <Banner\n        content={\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey=\"banners.permission-check-banner.missing-permission\"\n              components={{Roles: () => <>{roles}</>}}\n              values={{count: roles.length, roles: roleTitles}}\n              context={requiredPermission}\n            />\n          </Text>\n        }\n        action={\n          isOnlyViewer && roleRequestStatus && !requestStatusError && !requestStatusLoading\n            ? {\n                onClick: requestPending\n                  ? undefined\n                  : () => {\n                      setShowRequestPermissionDialog(true)\n                      telemetry.log(AskToEditDialogOpened)\n                    },\n                text: requestPending\n                  ? t('banners.permission-check-banner.request-permission-button.sent')\n                  : t('banners.permission-check-banner.request-permission-button.text'),\n                tone: requestPending ? 'default' : 'primary',\n                disabled: requestPending,\n                mode: requestPending ? 'bleed' : undefined,\n              }\n            : undefined\n        }\n        data-testid=\"permission-check-banner\"\n        icon={ReadOnlyIcon}\n      />\n      {showRequestPermissionDialog && (\n        <RequestPermissionDialog\n          onClose={() => setShowRequestPermissionDialog(false)}\n          onRequestSubmitted={() => {\n            setRequestSent(true)\n            setShowRequestPermissionDialog(false)\n          }}\n        />\n      )}\n    </>\n  )\n}\n","import {CloseIcon, SyncIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {type KeyedSegment, type Reference} from '@sanity/types'\nimport {Text} from '@sanity/ui'\nimport {fromString as pathFromString, get as pathGet} from '@sanity/util/paths'\nimport {memo, useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, type Observable, of} from 'rxjs'\nimport {debounceTime, map} from 'rxjs/operators'\nimport {\n  type DocumentAvailability,\n  getPublishedId,\n  useDocumentPreviewStore,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {type RouterPaneGroup} from '../../../../types'\nimport {Banner} from './Banner'\n\ninterface ParentReferenceInfo {\n  loading: boolean\n  result?: {\n    availability: {draft: DocumentAvailability; published: DocumentAvailability}\n    refValue: string | undefined\n  }\n}\n\nexport const ReferenceChangedBanner = memo(() => {\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {params, groupIndex, routerPanesState, replaceCurrent, BackLink} = usePaneRouter()\n  const routerReferenceId = routerPanesState[groupIndex]?.[0].id\n  const parentGroup = routerPanesState[groupIndex - 1] as RouterPaneGroup | undefined\n  const parentSibling = parentGroup?.[0]\n  const parentId = parentSibling?.id\n  const hasHistoryOpen = Boolean(parentSibling?.params?.rev)\n  const parentRefPath = useMemo(() => {\n    return (params?.parentRefPath && pathFromString(params.parentRefPath)) || null\n  }, [params?.parentRefPath])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  /**\n   * Loads information regarding the reference field of the parent pane. This\n   * is only applicable to child references (aka references-in-place).\n   *\n   * It utilizes the pane ID of the parent pane (which is a document ID) along\n   * with the `parentRefPath` router param on the current pane to find the\n   * current value of the reference field on the parent document.\n   *\n   * This is used to compare with the current pane's document ID. If the IDs\n   * don't match then this banner should reveal itself\n   */\n  const referenceInfoObservable = useMemo((): Observable<ParentReferenceInfo> => {\n    const parentRefPathSegment = parentRefPath?.[0] as string | undefined\n\n    // short-circuit: this document pane is not a child reference pane\n    if (!parentId || !parentRefPathSegment || !parentRefPath) {\n      return of({loading: false})\n    }\n\n    const publishedId = getPublishedId(parentId)\n    const path = pathFromString(parentRefPathSegment)\n\n    // note: observePaths doesn't support keyed path segments, so we need to select the nearest parent\n    const keyedSegmentIndex = path.findIndex(\n      (p): p is KeyedSegment => typeof p == 'object' && '_key' in p,\n    )\n\n    return concat(\n      // emit a loading state instantly\n      of({loading: true}),\n      // then emit the values from watching the published ID's path\n      documentPreviewStore\n        .unstable_observePathsDocumentPair(\n          publishedId,\n          (keyedSegmentIndex === -1 ? path : path.slice(0, keyedSegmentIndex)) as string[][],\n        )\n        .pipe(\n          // this debounce time is needed to prevent flashing banners due to\n          // the router state updating faster than the content-lake state. we\n          // debounce to wait for more emissions because the value pulled\n          // initially could be stale.\n          debounceTime(750),\n          map(\n            ({draft, published}): ParentReferenceInfo => ({\n              loading: false,\n              result: {\n                availability: {\n                  draft: draft.availability,\n                  published: published.availability,\n                },\n                refValue: pathGet<Reference>(draft.snapshot || published.snapshot, parentRefPath)\n                  ?._ref,\n              },\n            }),\n          ),\n        ),\n    )\n  }, [documentPreviewStore, parentId, parentRefPath])\n  const referenceInfo = useObservable(referenceInfoObservable, {loading: true})\n\n  const handleReloadReference = useCallback(() => {\n    if (referenceInfo.loading) return\n\n    if (referenceInfo.result?.refValue) {\n      replaceCurrent({\n        id: referenceInfo.result.refValue,\n        params: params as Record<string, string>,\n      })\n    }\n  }, [referenceInfo.loading, referenceInfo.result, replaceCurrent, params])\n\n  const shouldHide =\n    // if `parentId` or `parentRefPath` is not present then this banner is n/a\n    !parentId ||\n    !parentRefPath ||\n    // if viewing this pane via history, then hide\n    hasHistoryOpen ||\n    // if loading, hide\n    referenceInfo.loading ||\n    // if the parent document is not available (e.g. due to permission denied or\n    // not found) we don't want to display a warning here, but instead rely on the\n    // parent view to display the appropriate message\n    (!referenceInfo.result?.availability.draft.available &&\n      !referenceInfo.result?.availability.published.available) ||\n    // if the references are the same, then hide the reference changed banner\n    referenceInfo.result?.refValue === routerReferenceId\n\n  if (shouldHide) return null\n\n  return (\n    <Banner\n      action={\n        referenceInfo.result?.refValue\n          ? {\n              onClick: handleReloadReference,\n              icon: SyncIcon,\n              text: t('banners.reference-changed-banner.reason-changed.reload-button.text'),\n            }\n          : {\n              as: BackLink,\n              icon: CloseIcon,\n              text: t('banners.reference-changed-banner.reason-removed.close-button.text'),\n            }\n      }\n      data-testid=\"reference-changed-banner\"\n      content={\n        <Text size={1} weight=\"medium\">\n          {referenceInfo.result?.refValue\n            ? t('banners.reference-changed-banner.reason-changed.text')\n            : t('banners.reference-changed-banner.reason-removed.text')}\n        </Text>\n      }\n      icon={WarningOutlineIcon}\n      tone=\"caution\"\n    />\n  )\n})\n\nReferenceChangedBanner.displayName = 'Memo(ReferenceChangedBanner)'\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface TypeInfo {\n  liveEditResolveType: 'publish' | 'discard'\n}\n\n/**\n * When a draft in a live edit document is published\n * @internal\n */\nexport const ResolvedLiveEdit = defineEvent<TypeInfo>({\n  name: 'Resolved LiveEdit Draft',\n  version: 1,\n  description: 'User resolved a draft of a live edit document to continue editing',\n})\n","import {type SanityDocument} from '@sanity/client'\nimport {ErrorOutlineIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Flex, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useState} from 'react'\nimport {\n  isDraftId,\n  type ObjectSchemaType,\n  Translate,\n  useDocumentOperation,\n  useTranslation,\n} from 'sanity'\n\nimport {Button} from '../../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {ResolvedLiveEdit} from './__telemetry__/DraftLiveEditBanner.telemetry'\nimport {Banner} from './Banner'\n\ninterface DraftLiveEditBannerProps {\n  displayed: Partial<SanityDocument> | null\n  documentId: string\n  schemaType: ObjectSchemaType\n}\n\nexport function DraftLiveEditBanner({\n  displayed,\n  documentId,\n  schemaType,\n}: DraftLiveEditBannerProps): JSX.Element | null {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const [isPublishing, setPublishing] = useState(false)\n  const [isDiscarding, setDiscarding] = useState(false)\n  const telemetry = useTelemetry()\n\n  const {publish, discardChanges} = useDocumentOperation(documentId, displayed?._type || '')\n\n  const handlePublish = useCallback(() => {\n    publish.execute()\n    setPublishing(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'publish'})\n  }, [publish, telemetry])\n\n  const handleDiscard = useCallback(() => {\n    discardChanges.execute()\n    setDiscarding(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'discard'})\n  }, [discardChanges, telemetry])\n\n  useEffect(() => {\n    return () => {\n      setPublishing(false)\n      setDiscarding(false)\n    }\n  })\n\n  if (displayed && displayed._id && !isDraftId(displayed._id)) {\n    return null\n  }\n\n  return (\n    <Banner\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1}>\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey={'banners.live-edit-draft-banner.text'}\n              values={{schemaType: schemaType.title}}\n            />\n          </Text>\n          <Button\n            onClick={handlePublish}\n            text={t('action.publish.live-edit.label')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.publish.tooltip')}}\n            loading={isPublishing}\n          />\n\n          <Button\n            onClick={handleDiscard}\n            text={t('banners.live-edit-draft-banner.discard.tooltip')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.discard.tooltip')}}\n            loading={isDiscarding}\n          />\n        </Flex>\n      }\n      data-testid=\"live-edit-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {Heading, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'react-i18next'\nimport {css, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\n\ninterface DocumentHeaderProps {\n  documentId: string\n  schemaType: ObjectSchemaType\n  title?: string\n}\n\n/**\n * Use CSS container queries to conditionally render headings at different sizes.\n * We hide this entire container (including the document type) if container queries\n * not supported in the current browser.\n *\n * Note that usage of container queries in `styled-components` is only supported in `6.x`.\n * As such, studios that include `\"styled-components\": \"<6\"` as a dependency will only see\n * the largest heading size here, even if their browser supports it!\n */\n\nexport const TitleContainer = styled(Stack)`\n  ${({theme}) => {\n    return css`\n      @supports not (container-type: inline-size) {\n        display: none !important;\n      }\n\n      container-type: inline-size;\n\n      [data-heading] {\n        font-size: ${theme.sanity.fonts.heading.sizes[4].fontSize}px;\n        line-height: ${theme.sanity.fonts.heading.sizes[4].lineHeight}px;\n        overflow-wrap: break-word;\n        text-wrap: pretty;\n      }\n\n      @container (max-width: 560px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[3].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[3].lineHeight}px;\n        }\n      }\n\n      @container (max-width: 420px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[2].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[2].lineHeight}px;\n        }\n      }\n    `\n  }}\n`\n\n/**\n * Header containing current document title and type.\n * Document type is hidden if the document `_id` matches the current document `_type`.\n * The entire header is hidden if container queries are not supported.\n */\nexport const FormHeader = ({documentId, schemaType, title}: DocumentHeaderProps) => {\n  const isSingleton = documentId === schemaType.name\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (schemaType.__experimental_formPreviewTitle === false) {\n    return null\n  }\n\n  return (\n    <TitleContainer marginBottom={6} space={4}>\n      {!isSingleton && (\n        <Text muted size={1}>\n          {schemaType.title ?? schemaType.name}\n        </Text>\n      )}\n\n      <Heading as=\"h2\" data-heading muted={!title} data-testid=\"document-panel-document-title\">\n        {title ?? t('document-view.form-view.form-title-fallback')}\n      </Heading>\n    </TitleContainer>\n  )\n}\n","import {type ToastParams, useToast} from '@sanity/ui'\nimport {useEffect} from 'react'\n\n// https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value\nconst LONG_ENOUGH_BUT_NOT_TOO_LONG = 1000 * 60 * 60 * 24 * 24\n\n/**\n * Workaround to support conditional toast (e.g. a toast that is visible as long as a condition holds true)\n */\nexport function useConditionalToast(params: ToastParams & {id: string; enabled?: boolean}) {\n  const toast = useToast()\n\n  // note1: there's a `duration || 0` in Sanity UI's pushToast(), so make it non-falsey\n  // note2: cannot use `Infinity` as duration, since it exceeds setTimeout's maximum delay value\n  useEffect(() => {\n    if (params.enabled) {\n      toast.push({...params, duration: LONG_ENOUGH_BUT_NOT_TOO_LONG})\n    }\n    return () => {\n      if (params.enabled) {\n        toast.push({\n          ...params,\n          // Note: @sanity/ui fallbacks to the default duration of 4s in case of falsey values\n          duration: 0.01,\n        })\n      }\n    }\n  }, [params, toast])\n}\n","/* eslint-disable no-nested-ternary */\nimport {Box, Container, Flex, focusFirstDescendant, Spinner, Text} from '@sanity/ui'\nimport {type FormEvent, forwardRef, useCallback, useEffect, useMemo, useState} from 'react'\nimport {tap} from 'rxjs/operators'\nimport {\n  createPatchChannel,\n  type DocumentMutationEvent,\n  type DocumentRebaseEvent,\n  FormBuilder,\n  type FormDocumentValue,\n  fromMutationPatches,\n  type PatchMsg,\n  PresenceOverlay,\n  useDocumentPresence,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\n\nimport {Delay} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {useDocumentTitle} from '../../useDocumentTitle'\nimport {FormHeader} from './FormHeader'\nimport {useConditionalToast} from './useConditionalToast'\n\ninterface FormViewProps {\n  hidden: boolean\n  margins: [number, number, number, number]\n}\n\nconst preventDefault = (ev: FormEvent) => ev.preventDefault()\n\nexport const FormView = forwardRef<HTMLDivElement, FormViewProps>(function FormView(props, ref) {\n  const {hidden, margins} = props\n\n  const {\n    collapsedFieldSets,\n    collapsedPaths,\n    displayed: value,\n    editState,\n    documentId,\n    documentType,\n    fieldActions,\n    onChange,\n    validation,\n    ready,\n    formState,\n    onFocus,\n    connectionState,\n    onBlur,\n    onSetCollapsedPath,\n    onPathOpen,\n    onSetCollapsedFieldSet,\n    onSetActiveFieldGroup,\n    openPath,\n  } = useDocumentPane()\n  const documentStore = useDocumentStore()\n  const presence = useDocumentPresence(documentId)\n  const {title} = useDocumentTitle()\n  // The `patchChannel` is an INTERNAL publish/subscribe channel that we use to notify form-builder\n  // nodes about both remote and local patches.\n  // - Used by the Portable Text input to modify selections.\n  // - Used by `withDocument` to reset value.\n  const patchChannel = useMemo(() => createPatchChannel(), [])\n\n  const isLocked = editState?.transactionSyncLock?.enabled\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const conditionalToastParams = useMemo(\n    () => ({\n      id: `sync-lock`,\n      status: 'warning' as const,\n      enabled: isLocked,\n      title: t('document-view.form-view.sync-lock-toast.title'),\n      description: t('document-view.form-view.sync-lock-toast.description'),\n      closable: true,\n    }),\n    [isLocked, t],\n  )\n\n  useConditionalToast(conditionalToastParams)\n\n  useEffect(() => {\n    const sub = documentStore.pair\n      .documentEvents(documentId, documentType)\n      .pipe(\n        tap((event) => {\n          if (event.type === 'mutation') {\n            patchChannel.publish(prepareMutationEvent(event))\n          }\n\n          if (event.type === 'rebase') {\n            patchChannel.publish(prepareRebaseEvent(event))\n          }\n        }),\n      )\n      .subscribe()\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [documentId, documentStore, documentType, patchChannel])\n\n  const hasRev = Boolean(value?._rev)\n  useEffect(() => {\n    if (hasRev) {\n      // this is a workaround for an issue that caused the document pushed to withDocument to get\n      // stuck at the first initial value.\n      // This effect is triggered only when the document goes from not having a revision, to getting one\n      // so it will kick in as soon as the document is received from the backend\n      patchChannel.publish({\n        type: 'mutation',\n        patches: [],\n        snapshot: value,\n      })\n    }\n    // React to changes in hasRev only\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasRev])\n\n  const [formRef, setFormRef] = useState<null | HTMLDivElement>(null)\n\n  // We only want to run it on first mount\n  const [focusedFirstDescendant, setFocusedFirstDescendant] = useState(false)\n  useEffect(() => {\n    // Only focus on the first descendant if there is not already a focus path\n    // This is to avoid stealing focus from intent links\n    if (!focusedFirstDescendant && ready && !formState?.focusPath.length && formRef) {\n      setFocusedFirstDescendant(true)\n      focusFirstDescendant(formRef)\n    }\n  }, [focusedFirstDescendant, formRef, formState?.focusPath.length, ready])\n\n  const setRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      setFormRef(node)\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ref.current = node\n      }\n    },\n    [ref],\n  )\n\n  // const after = useMemo(\n  //   () =>\n  //     Array.isArray(afterEditorComponents) &&\n  //     afterEditorComponents.map(\n  //       (AfterEditorComponent: ComponentType<{documentId: string}>, idx: number) => (\n  //         <AfterEditorComponent key={String(idx)} documentId={documentId} />\n  //       )\n  //     ),\n  //   [documentId]\n  // )\n\n  return (\n    <Container\n      hidden={hidden}\n      paddingX={4}\n      paddingTop={5}\n      paddingBottom={9}\n      sizing=\"border\"\n      width={1}\n    >\n      <PresenceOverlay margins={margins}>\n        <Box as=\"form\" onSubmit={preventDefault} ref={setRef}>\n          {connectionState === 'connecting' && !editState?.draft && !editState?.published ? (\n            <Delay ms={300}>\n              {/* TODO: replace with loading block */}\n              <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n                <Spinner muted />\n                <Box marginTop={3}>\n                  <Text align=\"center\" muted size={1}>\n                    {t('document-view.form-view.loading')}\n                  </Text>\n                </Box>\n              </Flex>\n            </Delay>\n          ) : formState === null || hidden ? (\n            <Box padding={2}>\n              <Text>{t('document-view.form-view.form-hidden')}</Text>\n            </Box>\n          ) : (\n            <>\n              <FormHeader documentId={documentId} schemaType={formState.schemaType} title={title} />\n              <FormBuilder\n                __internal_fieldActions={fieldActions}\n                __internal_patchChannel={patchChannel}\n                changed={formState.changed}\n                collapsedFieldSets={collapsedFieldSets}\n                collapsedPaths={collapsedPaths}\n                focused={formState.focused}\n                focusPath={formState.focusPath}\n                groups={formState.groups}\n                id=\"root\"\n                members={formState.members}\n                onChange={onChange}\n                onFieldGroupSelect={onSetActiveFieldGroup}\n                onPathBlur={onBlur}\n                onPathFocus={onFocus}\n                onPathOpen={onPathOpen}\n                onSetFieldSetCollapsed={onSetCollapsedFieldSet}\n                onSetPathCollapsed={onSetCollapsedPath}\n                openPath={openPath}\n                presence={presence}\n                readOnly={\n                  connectionState === 'reconnecting' || formState.readOnly || !editState?.ready\n                }\n                schemaType={formState.schemaType}\n                validation={validation}\n                value={\n                  // note: the form state doesn't have a typed concept of a \"document\" value\n                  // but these should be compatible\n                  formState.value as FormDocumentValue\n                }\n              />\n            </>\n          )}\n        </Box>\n      </PresenceOverlay>\n    </Container>\n  )\n})\n\nfunction prepareMutationEvent(event: DocumentMutationEvent): PatchMsg {\n  const patches = event.mutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'mutation',\n    snapshot: event.document,\n    patches: fromMutationPatches(event.origin, patches),\n  }\n}\n\nfunction prepareRebaseEvent(event: DocumentRebaseEvent): PatchMsg {\n  const remotePatches = event.remoteMutations.map((mut) => mut.patch).filter(Boolean)\n  const localPatches = event.localMutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'rebase',\n    snapshot: event.document,\n    patches: fromMutationPatches('remote', remotePatches).concat(\n      fromMutationPatches('local', localPatches),\n    ),\n  }\n}\n","import {BoundaryElementProvider, Box, Flex, PortalProvider, usePortal} from '@sanity/ui'\nimport {createElement, useEffect, useMemo, useRef, useState} from 'react'\nimport {ScrollContainer, useTimelineSelector, VirtualizerScrollInstanceProvider} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {PaneContent, usePane, usePaneLayout} from '../../../components'\nimport {isLiveEditEnabled} from '../../../components/paneItem/helpers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DocumentInspectorPanel} from '../documentInspector'\nimport {InspectDialog} from '../inspectDialog'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {\n  DeletedDocumentBanner,\n  DeprecatedDocumentTypeBanner,\n  InsufficientPermissionBanner,\n  ReferenceChangedBanner,\n} from './banners'\nimport {DraftLiveEditBanner} from './banners/DraftLiveEditBanner'\nimport {FormView} from './documentViews'\n\ninterface DocumentPanelProps {\n  footerHeight: number | null\n  headerHeight: number | null\n  isInspectOpen: boolean\n  rootElement: HTMLDivElement | null\n  setDocumentPanelPortalElement: (el: HTMLElement | null) => void\n}\n\nconst DocumentBox = styled(Box)({\n  position: 'relative',\n})\n\nconst Scroller = styled(ScrollContainer)<{$disabled: boolean}>(({$disabled}) => {\n  if ($disabled) {\n    return {height: '100%'}\n  }\n\n  return css`\n    height: 100%;\n    overflow: auto;\n    position: relative;\n    scroll-behavior: smooth;\n    outline: none;\n  `\n})\n\nexport const DocumentPanel = function DocumentPanel(props: DocumentPanelProps) {\n  const {footerHeight, headerHeight, isInspectOpen, rootElement, setDocumentPanelPortalElement} =\n    props\n  const {\n    activeViewId,\n    displayed,\n    documentId,\n    editState,\n    inspector,\n    value,\n    views,\n    ready,\n    schemaType,\n    permissions,\n    isPermissionsLoading,\n    isDeleting,\n    isDeleted,\n    timelineStore,\n  } = useDocumentPane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed} = usePane()\n  const parentPortal = usePortal()\n  const {features} = useStructureTool()\n  const portalRef = useRef<HTMLDivElement | null>(null)\n  const [documentScrollElement, setDocumentScrollElement] = useState<HTMLDivElement | null>(null)\n  const formContainerElement = useRef<HTMLDivElement | null>(null)\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n\n  const activeView = useMemo(\n    () => views.find((view) => view.id === activeViewId) || views[0] || {type: 'form'},\n    [activeViewId, views],\n  )\n\n  // Use a local portal container when split panes is supported\n  const portalElement: HTMLElement | null = features.splitPanes\n    ? portalRef.current || parentPortal.element\n    : parentPortal.element\n\n  // Calculate the height of the header\n  const margins: [number, number, number, number] = useMemo(() => {\n    if (layoutCollapsed) {\n      return [headerHeight || 0, 0, footerHeight ? footerHeight + 2 : 2, 0]\n    }\n\n    return [0, 0, 2, 0]\n  }, [layoutCollapsed, footerHeight, headerHeight])\n\n  const formViewHidden = activeView.type !== 'form'\n\n  const activeViewNode = useMemo(\n    () =>\n      activeView.type === 'component' &&\n      activeView.component &&\n      createElement(activeView.component, {\n        document: {\n          draft: editState?.draft || null,\n          displayed: displayed || value,\n          historical: displayed,\n          published: editState?.published || null,\n        },\n        documentId,\n        options: activeView.options,\n        schemaType,\n      }),\n    [activeView, displayed, documentId, editState?.draft, editState?.published, schemaType, value],\n  )\n\n  const lastNonDeletedRevId = useTimelineSelector(\n    timelineStore,\n    (state) => state.lastNonDeletedRevId,\n  )\n\n  const isLiveEdit = isLiveEditEnabled(schemaType)\n\n  // Scroll to top as `documentId` changes\n  useEffect(() => {\n    if (!documentScrollElement?.scrollTo) return\n    documentScrollElement.scrollTo(0, 0)\n  }, [documentId, documentScrollElement])\n\n  // Pass portal element to `DocumentPane`\n  useEffect(() => {\n    if (portalElement) {\n      setDocumentPanelPortalElement(portalElement)\n    }\n  }, [portalElement, setDocumentPanelPortalElement])\n\n  const inspectDialog = useMemo(() => {\n    return isInspectOpen ? <InspectDialog value={displayed || value} /> : null\n  }, [isInspectOpen, displayed, value])\n\n  const showInspector = Boolean(!collapsed && inspector)\n\n  return (\n    <PaneContent>\n      <Flex height=\"fill\">\n        {(features.resizablePanes || !showInspector) && (\n          <DocumentBox flex={2} overflow=\"hidden\">\n            <PortalProvider\n              element={portalElement}\n              __unstable_elements={{documentScrollElement: documentScrollElement}}\n            >\n              <BoundaryElementProvider element={documentScrollElement}>\n                <VirtualizerScrollInstanceProvider\n                  scrollElement={documentScrollElement}\n                  containerElement={formContainerElement}\n                >\n                  {activeView.type === 'form' && isLiveEdit && ready && (\n                    <DraftLiveEditBanner\n                      displayed={displayed}\n                      documentId={documentId}\n                      schemaType={schemaType}\n                    />\n                  )}\n\n                  {activeView.type === 'form' && !isPermissionsLoading && ready && (\n                    <>\n                      {!permissions?.granted && (\n                        <InsufficientPermissionBanner requiredPermission={requiredPermission} />\n                      )}\n                      {!isDeleting && isDeleted && (\n                        <DeletedDocumentBanner revisionId={lastNonDeletedRevId} />\n                      )}\n                      <ReferenceChangedBanner />\n                      <DeprecatedDocumentTypeBanner />\n                    </>\n                  )}\n\n                  <Scroller\n                    $disabled={layoutCollapsed || false}\n                    data-testid=\"document-panel-scroller\"\n                    ref={setDocumentScrollElement}\n                  >\n                    <FormView\n                      hidden={formViewHidden}\n                      margins={margins}\n                      ref={formContainerElement}\n                    />\n                    {activeViewNode}\n                  </Scroller>\n\n                  {inspectDialog}\n\n                  <div data-testid=\"document-panel-portal\" ref={portalRef} />\n                </VirtualizerScrollInstanceProvider>\n              </BoundaryElementProvider>\n            </PortalProvider>\n          </DocumentBox>\n        )}\n\n        {showInspector && (\n          <BoundaryElementProvider element={rootElement}>\n            <DocumentInspectorPanel\n              documentId={documentId}\n              documentType={schemaType.name}\n              flex={1}\n            />\n          </BoundaryElementProvider>\n        )}\n      </Flex>\n    </PaneContent>\n  )\n}\n","import {type Placement} from '@sanity/ui'\n\nimport {type DialogProps} from '../../../../../ui-components'\n\nexport const POPOVER_FALLBACK_PLACEMENTS: Placement[] = ['left', 'bottom']\n\nexport const DIALOG_WIDTH_TO_UI_WIDTH: {[key: string]: DialogProps['width']} = {\n  small: 0,\n  medium: 1,\n  large: 2,\n  full: 'auto',\n}\n","import {\n  Box,\n  Button, // eslint-disable-line no-restricted-imports\n  Flex,\n  Grid,\n  Popover, // eslint-disable-line no-restricted-imports\n  Text,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionConfirmDialogProps, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function ConfirmDialog(props: {\n  dialog: DocumentActionConfirmDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<ConfirmDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Dialog rendered by custom document actions of dialog type `confirm`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction ConfirmDialogContent(props: {dialog: DocumentActionConfirmDialogProps}) {\n  const {dialog} = props\n  const {\n    cancelButtonIcon,\n    cancelButtonText,\n    confirmButtonIcon,\n    confirmButtonText,\n    // color,\n    message,\n    onCancel,\n    onConfirm,\n    tone,\n  } = dialog\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onCancel()\n    },\n    [isTopLayer, onCancel],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onCancel, () => [ref.current])\n\n  return (\n    <Flex direction=\"column\" ref={ref} style={{minWidth: 320 - 16, maxWidth: 400}}>\n      <Box flex={1} overflow=\"auto\" padding={4}>\n        <Text>{message}</Text>\n      </Box>\n      <Box paddingX={4} paddingY={3} style={{borderTop: '1px solid var(--card-border-color)'}}>\n        <Grid columns={2} gap={2}>\n          <Button\n            data-testid=\"confirm-dialog-cancel-button\"\n            icon={cancelButtonIcon}\n            onClick={onCancel}\n            mode=\"ghost\"\n            text={cancelButtonText || t('confirm-dialog.cancel-button.fallback-text')}\n          />\n          <Button\n            data-testid=\"confirm-dialog-confirm-button\"\n            icon={confirmButtonIcon}\n            onClick={onConfirm}\n            text={confirmButtonText || t('confirm-dialog.confirm-button.fallback-text')}\n            tone={tone}\n          />\n        </Grid>\n      </Box>\n    </Flex>\n  )\n}\n","import {\n  Box,\n  Dialog, // eslint-disable-line no-restricted-imports\n} from '@sanity/ui'\nimport {useId} from 'react'\nimport {type DocumentActionModalDialogProps, LegacyLayerProvider} from 'sanity'\n\nimport {DIALOG_WIDTH_TO_UI_WIDTH} from './constants'\n\n/**\n * Dialog rendered by custom document actions of dialog type `dialog`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nexport function ModalDialog(props: {dialog: DocumentActionModalDialogProps}) {\n  const {dialog} = props\n  const dialogId = useId()\n\n  const footer = dialog.footer && (\n    <Box paddingX={4} paddingY={3}>\n      {dialog.footer}\n    </Box>\n  )\n\n  return (\n    <LegacyLayerProvider zOffset=\"fullscreen\">\n      <Dialog\n        animate\n        __unstable_hideCloseButton={dialog.showCloseButton === false}\n        footer={footer}\n        header={dialog.header}\n        id={dialogId}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClose={dialog.onClose}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClickOutside={dialog.onClose}\n        width={dialog.width === undefined ? 1 : DIALOG_WIDTH_TO_UI_WIDTH[dialog.width]}\n      >\n        <Box padding={4}>{dialog.content}</Box>\n      </Dialog>\n    </LegacyLayerProvider>\n  )\n}\n","import {\n  Popover, // eslint-disable-line no-restricted-imports\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionPopoverDialogProps} from 'sanity'\n\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function PopoverDialog(props: {\n  dialog: DocumentActionPopoverDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<PopoverDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Popover rendered by custom document actions of dialog type `popover`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction PopoverDialogContent(props: {dialog: DocumentActionPopoverDialogProps}) {\n  const {dialog} = props\n  const {content, onClose} = dialog\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onClose()\n    },\n    [isTopLayer, onClose],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onClose, () => [ref.current])\n\n  return <div ref={ref}>{content}</div>\n}\n","import {PortalProvider, Text, usePortal} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {type DocumentActionDialogProps} from 'sanity'\n\nimport {Dialog} from '../../../../ui-components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {ConfirmDialog} from './dialogs/ConfirmDialog'\nimport {ModalDialog} from './dialogs/ModalDialog'\nimport {PopoverDialog} from './dialogs/PopoverDialog'\n\nexport interface ActionStateDialogProps {\n  dialog: DocumentActionDialogProps\n  referenceElement?: HTMLElement | null\n}\n\n// A portal provider that uses the document panel portal element if it exists\n// as the portal element so that dialogs are scoped to the document panel\nfunction DocumentActionPortalProvider(props: {children: ReactNode}) {\n  const {children} = props\n  const {element, elements} = usePortal()\n  const portalElement = elements?.[DOCUMENT_PANEL_PORTAL_ELEMENT] || element\n\n  return <PortalProvider element={portalElement}>{children}</PortalProvider>\n}\n\nexport function ActionStateDialog(props: ActionStateDialogProps) {\n  const {dialog, referenceElement = null} = props\n  const modalId = useId()\n\n  if (dialog.type === 'confirm') {\n    return <ConfirmDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'popover') {\n    return <PopoverDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'dialog' || !dialog.type) {\n    return (\n      <DocumentActionPortalProvider>\n        <ModalDialog dialog={dialog} />\n      </DocumentActionPortalProvider>\n    )\n  }\n\n  if (dialog.type === 'custom') {\n    return <DocumentActionPortalProvider>{dialog?.component}</DocumentActionPortalProvider>\n  }\n\n  // @todo: add validation?\n  const unknownModal: any = dialog\n\n  // eslint-disable-next-line no-console\n  console.warn(`Unsupported modal type ${unknownModal.type}`)\n\n  return (\n    <Dialog\n      id={modalId}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClose={unknownModal.onClose}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClickOutside={unknownModal.onClose}\n      width={1}\n    >\n      {unknownModal.content || (\n        // eslint-disable-next-line i18next/no-literal-string\n        <Text size={1}>\n          Unexpected modal type (<code>{unknownModal.type}</code>)\n        </Text>\n      )}\n    </Dialog>\n  )\n}\n","import {Menu} from '@sanity/ui'\nimport {memo, type ReactNode, useCallback, useId, useMemo, useState} from 'react'\nimport {\n  ContextMenuButton,\n  type DocumentActionDescription,\n  LegacyLayerProvider,\n  useTranslation,\n} from 'sanity'\n\nimport {MenuButton, MenuItem, type PopoverProps} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {ActionStateDialog} from './ActionStateDialog'\n\nexport interface ActionMenuButtonProps {\n  actionStates: DocumentActionDescription[]\n  disabled: boolean\n}\n\n/**\n * @internal\n */\nexport const ActionDialogWrapper = memo(function ActionDialogWrapper({\n  actionStates,\n  children,\n  referenceElement,\n}: {\n  actionStates: DocumentActionDescription[]\n  children: ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  referenceElement?: HTMLElement | null\n}) {\n  const [actionIndex, setActionIndex] = useState(-1)\n  const currentAction = useMemo(() => actionStates[actionIndex], [actionIndex, actionStates])\n\n  const handleAction = useCallback((idx: number) => {\n    setActionIndex(idx)\n  }, [])\n\n  const result = useMemo(() => children({handleAction}), [children, handleAction])\n\n  return (\n    <>\n      {currentAction && currentAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={currentAction.dialog} referenceElement={referenceElement} />\n        </LegacyLayerProvider>\n      )}\n      {result}\n    </>\n  )\n})\n\n/**\n * @internal\n */\nexport function ActionMenuButton(props: ActionMenuButtonProps) {\n  const {actionStates, disabled} = props\n  const idPrefix = useId()\n\n  const [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>(null)\n\n  const popoverProps: PopoverProps = useMemo(\n    () => ({\n      placement: 'top-end',\n      portal: true,\n      preventOverflow: true,\n    }),\n    [],\n  )\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  >(\n    ({handleAction}) => (\n      <MenuButton\n        id={`${idPrefix}-action-menu`}\n        button={\n          <ContextMenuButton\n            aria-label={t('buttons.action-menu-button.aria-label')}\n            disabled={disabled}\n            data-testid=\"action-menu-button\"\n            size=\"large\"\n            tooltipProps={{content: t('buttons.action-menu-button.tooltip')}}\n          />\n        }\n        menu={\n          <Menu padding={1}>\n            {actionStates.map((actionState, idx) => (\n              <ActionMenuListItem\n                actionState={actionState}\n                disabled={disabled}\n                index={idx}\n                // eslint-disable-next-line react/no-array-index-key\n                key={idx}\n                onAction={handleAction}\n              />\n            ))}\n          </Menu>\n        }\n        popover={popoverProps}\n        ref={setReferenceElement}\n      />\n    ),\n    [actionStates, disabled, idPrefix, popoverProps, t],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={actionStates} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n}\n\ninterface ActionMenuListItemProps {\n  actionState: DocumentActionDescription\n  disabled: boolean\n  index: number\n  onAction: (idx: number) => void\n}\n\nexport function ActionMenuListItem(props: ActionMenuListItemProps) {\n  const {actionState, disabled, index, onAction} = props\n  const {onHandle} = actionState\n\n  const handleClick = useCallback(() => {\n    onAction(index)\n    if (onHandle) onHandle()\n  }, [index, onAction, onHandle])\n\n  const hotkeys = useMemo(() => {\n    return actionState.shortcut\n      ? String(actionState.shortcut)\n          .split('+')\n          .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1))\n      : undefined\n  }, [actionState.shortcut])\n\n  return (\n    <MenuItem\n      data-testid={`action-${actionState.label.replace(' ', '')}`}\n      disabled={disabled || Boolean(actionState.disabled)}\n      hotkeys={hotkeys}\n      icon={actionState.icon}\n      onClick={handleClick}\n      text={actionState.label}\n      tone={actionState.tone}\n      {...(actionState.disabled && {tooltipProps: {content: actionState.title}})}\n    />\n  )\n}\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {TrashIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\n\nconst DISABLED_REASON_TITLE_KEY = {\n  NOTHING_TO_DELETE: 'action.delete.disabled.nothing-to-delete',\n  NOT_READY: 'action.delete.disabled.not-ready',\n}\n\n/** @internal */\nexport const DeleteAction: DocumentActionComponent = ({id, type, draft, onComplete}) => {\n  const {setIsDeleting: paneSetIsDeleting} = useDocumentPane()\n  const {delete: deleteOp} = useDocumentOperation(id, type)\n  const [isDeleting, setIsDeleting] = useState(false)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setIsDeleting(true)\n    setConfirmDialogOpen(false)\n    paneSetIsDeleting(true)\n    deleteOp.execute()\n    onComplete()\n  }, [deleteOp, onComplete, paneSetIsDeleting])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'delete',\n  })\n\n  const currentUser = useCurrentUser()\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: TrashIcon,\n        disabled: true,\n        label: t('action.delete.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"delete-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: TrashIcon,\n      disabled: isDeleting || Boolean(deleteOp.disabled) || isPermissionsLoading,\n      title: (deleteOp.disabled && t(DISABLED_REASON_TITLE_KEY[deleteOp.disabled])) || '',\n      label: isDeleting ? t('action.delete.running.label') : t('action.delete.label'),\n      shortcut: 'Ctrl+Alt+D',\n      onHandle: handle,\n      dialog: isConfirmDialogOpen && {\n        type: 'custom',\n        component: (\n          <ConfirmDeleteDialog\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"delete\"\n            id={draft?._id || id}\n            type={type}\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      },\n    }\n  }, [\n    currentUser,\n    deleteOp.disabled,\n    draft?._id,\n    handle,\n    handleCancel,\n    handleConfirm,\n    id,\n    isConfirmDialogOpen,\n    isDeleting,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n    type,\n  ])\n}\n\nDeleteAction.action = 'delete'\nDeleteAction.displayName = 'DeleteAction'\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {ResetIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NO_CHANGES: 'action.discard-changes.disabled.no-change',\n  NOT_PUBLISHED: 'action.discard-changes.disabled.not-published',\n  NOT_READY: 'action.discard-changes.disabled.not-ready',\n} as const\n\n/** @internal */\nexport const DiscardChangesAction: DocumentActionComponent = ({\n  id,\n  type,\n  published,\n  liveEdit,\n  onComplete,\n}) => {\n  const {discardChanges} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'discardDraft',\n  })\n  const currentUser = useCurrentUser()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    discardChanges.execute()\n    onComplete()\n  }, [discardChanges, onComplete])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | false = useMemo(\n    () =>\n      isConfirmDialogOpen && {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.discard-changes.confirm-dialog.confirm-discard-changes'),\n      },\n    [handleConfirm, isConfirmDialogOpen, onComplete, t],\n  )\n\n  return useMemo(() => {\n    if (!published || liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: ResetIcon,\n        disabled: true,\n        label: t('action.discard-changes.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"discard-changes\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: ResetIcon,\n      disabled: Boolean(discardChanges.disabled) || isPermissionsLoading,\n      title: (discardChanges.disabled && DISABLED_REASON_KEY[discardChanges.disabled]) || '',\n      label: t('action.discard-changes.label'),\n      onHandle: handle,\n      dialog,\n    }\n  }, [\n    currentUser,\n    dialog,\n    discardChanges.disabled,\n    handle,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    published,\n    t,\n  ])\n}\n\nDiscardChangesAction.action = 'discardChanges'\nDiscardChangesAction.displayName = 'DiscardChangesAction'\n","import {CopyIcon} from '@sanity/icons'\nimport {uuid} from '@sanity/uuid'\nimport {useCallback, useMemo, useState} from 'react'\nimport {filter, firstValueFrom} from 'rxjs'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOTHING_TO_DUPLICATE: 'action.duplicate.disabled.nothing-to-duplicate',\n  NOT_READY: 'action.duplicate.disabled.not-ready',\n}\n\n/** @internal */\nexport const DuplicateAction: DocumentActionComponent = ({id, type, onComplete}) => {\n  const documentStore = useDocumentStore()\n  const {duplicate} = useDocumentOperation(id, type)\n  const {navigateIntent} = useRouter()\n  const [isDuplicating, setDuplicating] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'duplicate',\n  })\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const currentUser = useCurrentUser()\n\n  const handle = useCallback(async () => {\n    const dupeId = uuid()\n\n    setDuplicating(true)\n\n    // set up the listener before executing\n    const duplicateSuccess = firstValueFrom(\n      documentStore.pair\n        .operationEvents(id, type)\n        .pipe(filter((e) => e.op === 'duplicate' && e.type === 'success')),\n    )\n    duplicate.execute(dupeId)\n\n    // only navigate to the duplicated document when the operation is successful\n    await duplicateSuccess\n    navigateIntent('edit', {id: dupeId, type})\n\n    onComplete()\n  }, [documentStore.pair, duplicate, id, navigateIntent, onComplete, type])\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        icon: CopyIcon,\n        disabled: true,\n        label: t('action.duplicate.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"duplicate-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      icon: CopyIcon,\n      disabled: isDuplicating || Boolean(duplicate.disabled) || isPermissionsLoading,\n      label: isDuplicating ? t('action.duplicate.running.label') : t('action.duplicate.label'),\n      title: duplicate.disabled ? t(DISABLED_REASON_KEY[duplicate.disabled]) : '',\n      onHandle: handle,\n    }\n  }, [\n    currentUser,\n    duplicate.disabled,\n    handle,\n    isDuplicating,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n  ])\n}\n\nDuplicateAction.action = 'duplicate'\nDuplicateAction.displayName = 'DuplicateAction'\n","import {RevertIcon} from '@sanity/icons'\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  useDocumentOperation,\n  useDocumentOperationEvent,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\n/** @internal */\nexport const HistoryRestoreAction: DocumentActionComponent = ({id, type, revision, onComplete}) => {\n  const {restore} = useDocumentOperation(id, type)\n  const event = useDocumentOperationEvent(id, type)\n  const {navigateIntent} = useRouter()\n  const prevEvent = useRef(event)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    restore.execute(revision!)\n    onComplete()\n  }, [restore, revision, onComplete])\n\n  /**\n   * If the restore operation is successful, navigate to the document edit view\n   */\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    if (event.type === 'success' && event.op === 'restore') {\n      navigateIntent('edit', {id, type})\n    }\n\n    prevEvent.current = event\n  }, [event, id, navigateIntent, type])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.restore.confirm.message'),\n      }\n    }\n\n    return null\n  }, [handleConfirm, isConfirmDialogOpen, onComplete, t])\n\n  const isRevisionInitial = revision === '@initial'\n  const isRevisionLatest = revision === undefined // undefined means latest revision\n\n  return useMemo(() => {\n    if (isRevisionLatest) {\n      return null\n    }\n\n    return {\n      label: t('action.restore.label'),\n      tone: 'caution',\n      onHandle: handle,\n      title: t(\n        isRevisionInitial\n          ? 'action.restore.disabled.cannot-restore-initial'\n          : 'action.restore.tooltip',\n      ),\n      icon: RevertIcon,\n      dialog,\n      disabled: isRevisionInitial,\n    }\n  }, [dialog, handle, isRevisionInitial, isRevisionLatest, t])\n}\n\nHistoryRestoreAction.action = 'restore'\nHistoryRestoreAction.displayName = 'HistoryRestoreAction'\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface DocumentPublishedInfo {\n  /**\n   * The document was created and published straight away\n   */\n  publishedImmediately: boolean\n\n  /**\n   * The document had a previously published version when it was published\n   */\n  previouslyPublished: boolean\n}\nexport const DocumentPublished = defineEvent<DocumentPublishedInfo>({\n  name: 'Document Published',\n  version: 1,\n  description: 'User clicked the \"Publish\" button in the document pane',\n})\n","import {PublishIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {isValidationErrorMarker} from '@sanity/types'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  type TFunction,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useEditState,\n  useRelativeTime,\n  useSyncState,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {structureLocaleNamespace, type StructureLocaleResourceKeys} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\nimport {DocumentPublished} from './__telemetry__/documentActions.telemetry'\n\nconst DISABLED_REASON_TITLE_KEY: Record<string, StructureLocaleResourceKeys> = {\n  LIVE_EDIT_ENABLED: 'action.publish.live-edit.publish-disabled',\n  ALREADY_PUBLISHED: 'action.publish.already-published.no-time-ago.tooltip',\n  NO_CHANGES: 'action.publish.no-changes.tooltip',\n  NOT_READY: 'action.publish.disabled.not-ready',\n} as const\n\nfunction getDisabledReason(\n  reason: keyof typeof DISABLED_REASON_TITLE_KEY,\n  publishedAt: string | undefined,\n  t: TFunction,\n) {\n  if (reason === 'ALREADY_PUBLISHED' && publishedAt) {\n    return <AlreadyPublished publishedAt={publishedAt} />\n  }\n  return t(DISABLED_REASON_TITLE_KEY[reason])\n}\n\nfunction AlreadyPublished({publishedAt}: {publishedAt: string}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const timeSincePublished = useRelativeTime(publishedAt, {useTemporalPhrase: true})\n  return <span>{t('action.publish.already-published.tooltip', {timeSincePublished})}</span>\n}\n\n/** @internal */\n// eslint-disable-next-line complexity\nexport const PublishAction: DocumentActionComponent = (props) => {\n  const {id, type, liveEdit, draft, published} = props\n  const [publishState, setPublishState] = useState<'publishing' | 'published' | null>(null)\n  const {publish} = useDocumentOperation(id, type)\n  const validationStatus = useValidationStatus(id, type)\n  const syncState = useSyncState(id, type)\n  const {changesOpen, onHistoryOpen, documentId, documentType} = useDocumentPane()\n  const editState = useEditState(documentId, documentType)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const revision = (editState?.draft || editState?.published || {})._rev\n\n  const hasValidationErrors = validationStatus.validation.some(isValidationErrorMarker)\n  // we use this to \"schedule\" publish after pending tasks (e.g. validation and sync) has completed\n  const [publishScheduled, setPublishScheduled] = useState<boolean>(false)\n  const isSyncing = syncState.isSyncing\n  const isValidating = validationStatus.isValidating\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'publish',\n  })\n\n  const currentUser = useCurrentUser()\n\n  // eslint-disable-next-line no-nested-ternary\n  const title = publish.disabled\n    ? getDisabledReason(publish.disabled, (published || {})._updatedAt, t) || ''\n    : hasValidationErrors\n      ? t('action.publish.validation-issues.tooltip')\n      : ''\n\n  const hasDraft = Boolean(draft)\n\n  const doPublish = useCallback(() => {\n    publish.execute()\n    setPublishState('publishing')\n  }, [publish])\n\n  useEffect(() => {\n    // make sure the validation status is about the current revision and not an earlier one\n    const validationComplete =\n      validationStatus.isValidating === false && validationStatus.revision !== revision\n\n    if (!publishScheduled || isSyncing || !validationComplete) {\n      return\n    }\n\n    if (!hasValidationErrors) {\n      doPublish()\n    }\n    setPublishScheduled(false)\n  }, [\n    isSyncing,\n    doPublish,\n    hasValidationErrors,\n    publishScheduled,\n    validationStatus.revision,\n    revision,\n    isValidating,\n    validationStatus.isValidating,\n  ])\n\n  useEffect(() => {\n    const didPublish = publishState === 'publishing' && !hasDraft\n\n    const nextState = didPublish ? 'published' : null\n    const delay = didPublish ? 200 : 4000\n    const timer = setTimeout(() => {\n      setPublishState(nextState)\n    }, delay)\n    return () => clearTimeout(timer)\n  }, [changesOpen, publishState, hasDraft])\n\n  const telemetry = useTelemetry()\n\n  const handle = useCallback(() => {\n    telemetry.log(DocumentPublished, {\n      publishedImmediately: !draft?._createdAt,\n      previouslyPublished: Boolean(published),\n    })\n    if (\n      syncState.isSyncing ||\n      validationStatus.isValidating ||\n      validationStatus.revision !== revision\n    ) {\n      setPublishScheduled(true)\n    } else {\n      doPublish()\n    }\n  }, [\n    telemetry,\n    draft?._createdAt,\n    published,\n    syncState.isSyncing,\n    validationStatus.isValidating,\n    validationStatus.revision,\n    revision,\n    doPublish,\n  ])\n\n  return useMemo(() => {\n    if (liveEdit) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: t('action.publish.live-edit.label'),\n        title: t('action.publish.live-edit.tooltip'),\n        disabled: true,\n      }\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: 'Publish',\n        title: (\n          <InsufficientPermissionsMessage context=\"publish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    const disabled = Boolean(\n      publishScheduled ||\n        editState?.transactionSyncLock?.enabled ||\n        publishState === 'publishing' ||\n        publishState === 'published' ||\n        hasValidationErrors ||\n        publish.disabled,\n    )\n\n    return {\n      disabled: disabled || isPermissionsLoading,\n      tone: 'default',\n      label:\n        // eslint-disable-next-line no-nested-ternary\n        publishState === 'published'\n          ? t('action.publish.published.label')\n          : publishScheduled || publishState === 'publishing'\n            ? t('action.publish.running.label')\n            : t('action.publish.draft.label'),\n      // @todo: Implement loading state, to show a `<Button loading />` state\n      // loading: publishScheduled || publishState === 'publishing',\n      icon: PublishIcon,\n      // eslint-disable-next-line no-nested-ternary\n      title: publishScheduled\n        ? t('action.publish.waiting')\n        : publishState === 'published' || publishState === 'publishing'\n          ? null\n          : title,\n      shortcut: disabled || publishScheduled ? null : 'Ctrl+Alt+P',\n      onHandle: handle,\n    }\n  }, [\n    currentUser,\n    editState?.transactionSyncLock?.enabled,\n    handle,\n    hasValidationErrors,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    publish.disabled,\n    publishScheduled,\n    publishState,\n    t,\n    title,\n  ])\n}\n\nPublishAction.action = 'publish'\nPublishAction.displayName = 'PublishAction'\n","import {UnpublishIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionModalDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOT_PUBLISHED: 'action.unpublish.disabled.not-published',\n  NOT_READY: 'action.unpublish.disabled.not-ready',\n  LIVE_EDIT_ENABLED: 'action.unpublish.disabled.live-edit-enabled',\n}\n\n/** @internal */\nexport const UnpublishAction: DocumentActionComponent = ({\n  id,\n  type,\n  draft,\n  onComplete,\n  liveEdit,\n}) => {\n  const {unpublish} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'unpublish',\n  })\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setConfirmDialogOpen(false)\n    unpublish.execute()\n    onComplete()\n  }, [onComplete, unpublish])\n\n  const dialog: DocumentActionModalDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'dialog',\n        onClose: onComplete,\n        content: (\n          <ConfirmDeleteDialog\n            id={draft?._id || id}\n            type={type}\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"unpublish\"\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      }\n    }\n\n    return null\n  }, [draft, id, handleCancel, handleConfirm, isConfirmDialogOpen, onComplete, type])\n\n  return useMemo(() => {\n    if (liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: UnpublishIcon,\n        label: 'Unpublish',\n        title: (\n          <InsufficientPermissionsMessage context=\"unpublish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: UnpublishIcon,\n      disabled: Boolean(unpublish.disabled) || isPermissionsLoading,\n      label: t('action.unpublish.label'),\n      title: unpublish.disabled ? t(DISABLED_REASON_KEY[unpublish.disabled]) : '',\n      onHandle: () => setConfirmDialogOpen(true),\n      dialog,\n    }\n  }, [\n    currentUser,\n    dialog,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    t,\n    unpublish.disabled,\n  ])\n}\n\nUnpublishAction.action = 'unpublish'\nUnpublishAction.displayName = 'UnpublishAction'\n","/* eslint-disable camelcase */\nimport {Flex, LayerProvider, Stack, Text} from '@sanity/ui'\nimport {memo, useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDescription,\n  Hotkeys,\n  useTimelineSelector,\n} from 'sanity'\n\nimport {Button, Tooltip} from '../../../../ui-components'\nimport {RenderActionCollectionState} from '../../../components'\nimport {HistoryRestoreAction} from '../../../documentActions'\nimport {toLowerCaseNoSpaces} from '../../../util/toLowerCaseNoSpaces'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {ActionMenuButton} from './ActionMenuButton'\nimport {ActionStateDialog} from './ActionStateDialog'\n\ninterface DocumentStatusBarActionsInnerProps {\n  disabled: boolean\n  showMenu: boolean\n  states: DocumentActionDescription[]\n}\n\nconst DocumentStatusBarActionsInner = memo(function DocumentStatusBarActionsInner(\n  props: DocumentStatusBarActionsInnerProps,\n) {\n  const {disabled, showMenu, states} = props\n  const {__internal_tasks} = useDocumentPane()\n  const [firstActionState, ...menuActionStates] = states\n  const [buttonElement, setButtonElement] = useState<HTMLButtonElement | null>(null)\n\n  // TODO: This could be refactored to use the tooltip from the button if the firstAction.title was updated to a string.\n  const tooltipContent = useMemo(() => {\n    if (!firstActionState || (!firstActionState.title && !firstActionState.shortcut)) return null\n\n    return (\n      <Flex style={{maxWidth: 300}} align=\"center\" gap={3}>\n        {firstActionState.title && <Text size={1}>{firstActionState.title}</Text>}\n        {firstActionState.shortcut && (\n          <Hotkeys\n            data-testid=\"document-status-bar-hotkeys\"\n            fontSize={1}\n            style={{marginTop: -4, marginBottom: -4}}\n            keys={String(firstActionState.shortcut)\n              .split('+')\n              .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase())}\n          />\n        )}\n      </Flex>\n    )\n  }, [firstActionState])\n\n  return (\n    <Flex align=\"center\" gap={1}>\n      {__internal_tasks && __internal_tasks.footerAction}\n      {firstActionState && (\n        <LayerProvider zOffset={200}>\n          <Tooltip disabled={!tooltipContent} content={tooltipContent} placement=\"top\">\n            <Stack>\n              <Button\n                data-testid={`action-${toLowerCaseNoSpaces(firstActionState.label)}`}\n                disabled={disabled || Boolean(firstActionState.disabled)}\n                icon={firstActionState.icon}\n                // eslint-disable-next-line react/jsx-handler-names\n                onClick={firstActionState.onHandle}\n                ref={setButtonElement}\n                size=\"large\"\n                text={firstActionState.label}\n                tone={firstActionState.tone || 'primary'}\n              />\n            </Stack>\n          </Tooltip>\n        </LayerProvider>\n      )}\n      {showMenu && menuActionStates.length > 0 && (\n        <ActionMenuButton actionStates={menuActionStates} disabled={disabled} />\n      )}\n      {firstActionState && firstActionState.dialog && (\n        <ActionStateDialog dialog={firstActionState.dialog} referenceElement={buttonElement} />\n      )}\n    </Flex>\n  )\n})\n\nexport const DocumentStatusBarActions = memo(function DocumentStatusBarActions() {\n  const {actions: allActions, connectionState, documentId, editState} = useDocumentPane()\n  // const [isMenuOpen, setMenuOpen] = useState(false)\n  // const handleMenuOpen = useCallback(() => setMenuOpen(true), [])\n  // const handleMenuClose = useCallback(() => setMenuOpen(false), [])\n  // const handleActionComplete = useCallback(() => setMenuOpen(false), [])\n\n  // The restore action has a dedicated place in the UI; it's only visible when the user is viewing\n  // a different document revision. It must be omitted from this collection.\n  const actions = useMemo(\n    () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n    [allActions],\n  )\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected'}\n        // isMenuOpen={isMenuOpen}\n        // onMenuOpen={handleMenuOpen}\n        // onMenuClose={handleMenuClose}\n        showMenu={actions.length > 1}\n        states={states}\n        // Use document ID as key to make sure that the actions state is reset when the document changes\n        key={documentId}\n      />\n    ),\n    [actions.length, connectionState, documentId],\n  )\n\n  if (actions.length === 0 || !editState) {\n    return null\n  }\n\n  return (\n    <RenderActionCollectionState\n      // component={}\n      // onActionComplete={handleActionComplete}\n      actions={actions}\n      actionProps={editState}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport const HistoryStatusBarActions = memo(function HistoryStatusBarActions() {\n  const {actions, connectionState, editState, timelineStore} = useDocumentPane()\n\n  // Subscribe to external timeline state changes\n  const revTime = useTimelineSelector(timelineStore, (state) => state.revTime)\n\n  const revision = revTime?.id || ''\n  const disabled = (editState?.draft || editState?.published || {})._rev === revision\n  const actionProps = useMemo(() => ({...(editState || {}), revision}), [editState, revision])\n\n  // If multiple `restore` actions are defined, ensure only the final one is used.\n  const historyActions = useMemo(() => (actions ?? []).filter(isRestoreAction).slice(-1), [actions])\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected' || Boolean(disabled)}\n        showMenu={false}\n        states={states}\n      />\n    ),\n    [connectionState, disabled],\n  )\n\n  return (\n    <RenderActionCollectionState\n      actions={historyActions}\n      actionProps={actionProps as any}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport function isRestoreAction(\n  action: DocumentActionComponent,\n): action is DocumentActionComponent & {action: 'restore'} {\n  return action.action === HistoryRestoreAction.action\n}\n","import {TabList} from '@sanity/ui'\nimport {type ComponentType, type ReactNode, useCallback} from 'react'\n\nimport {Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTabs() {\n  const {activeViewId, paneKey, views} = useDocumentPane()\n  const tabPanelId = `${paneKey}tabpanel`\n\n  return (\n    <TabList space={1}>\n      {views.map((view, index) => (\n        <DocumentHeaderTab\n          icon={view.icon}\n          id={`${paneKey}tab-${view.id}`}\n          isActive={activeViewId === view.id}\n          key={view.id}\n          label={view.title}\n          tabPanelId={tabPanelId}\n          viewId={index === 0 ? null : (view.id ?? null)}\n        />\n      ))}\n    </TabList>\n  )\n}\n\nfunction DocumentHeaderTab(props: {\n  icon?: ComponentType | ReactNode\n  id: string\n  isActive: boolean\n  label: string\n  tabPanelId: string\n  viewId: string | null\n}) {\n  const {icon, id, isActive, label, tabPanelId, viewId, ...rest} = props\n  const {ready, editState} = useDocumentPane()\n  const {setView} = usePaneRouter()\n  const handleClick = useCallback(() => setView(viewId), [setView, viewId])\n\n  return (\n    <Tab\n      {...rest} // required to enable <TabList> keyboard navigation\n      aria-controls={tabPanelId}\n      disabled={!ready && !editState?.draft && !editState?.published}\n      icon={icon}\n      id={id}\n      label={label}\n      onClick={handleClick}\n      selected={isActive}\n    />\n  )\n}\n","import {type ReactElement} from 'react'\nimport {unstable_useValuePreview as useValuePreview, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTitle(): ReactElement {\n  const {connectionState, schemaType, title, editState} = useDocumentPane()\n  const documentValue = editState?.draft || editState?.published\n  const subscribed = Boolean(documentValue)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return <></>\n  }\n\n  if (title) {\n    return <>{title}</>\n  }\n\n  if (!documentValue) {\n    return (\n      <>\n        {t('panes.document-header-title.new.text', {\n          schemaType: schemaType?.title || schemaType?.name,\n        })}\n      </>\n    )\n  }\n\n  if (error) {\n    return <>{t('panes.document-header-title.error.text', {error: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>\n          {t('panes.document-header-title.untitled.text')}\n        </span>\n      )}\n    </>\n  )\n}\n","import {ArrowLeftIcon, CloseIcon, SplitVerticalIcon} from '@sanity/icons'\nimport {Flex} from '@sanity/ui'\nimport {\n  createElement,\n  type ForwardedRef,\n  forwardRef,\n  memo,\n  useCallback,\n  useDeferredValue,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, useFieldActions, useTranslation} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../../ui-components'\nimport {\n  PaneContextMenuButton,\n  PaneHeader,\n  PaneHeaderActionButton,\n  RenderActionCollectionState,\n  usePane,\n  usePaneRouter,\n} from '../../../../components'\nimport {type _PaneMenuNode} from '../../../../components/pane/types'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../../../menuNodes'\nimport {type PaneMenuItem} from '../../../../types'\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {ActionDialogWrapper, ActionMenuListItem} from '../../statusBar/ActionMenuButton'\nimport {isRestoreAction} from '../../statusBar/DocumentStatusBarActions'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {DocumentHeaderTabs} from './DocumentHeaderTabs'\nimport {DocumentHeaderTitle} from './DocumentHeaderTitle'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface DocumentPanelHeaderProps {\n  menuItems: PaneMenuItem[]\n}\n\nexport const DocumentPanelHeader = memo(\n  forwardRef(function DocumentPanelHeader(\n    _props: DocumentPanelHeaderProps,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) {\n    const {menuItems} = _props\n    const {\n      actions: allActions,\n      editState,\n      onMenuAction,\n      onPaneClose,\n      onPaneSplit,\n      menuItemGroups,\n      schemaType,\n      connectionState,\n      views,\n      unstable_languageFilter,\n    } = useDocumentPane()\n    const {features} = useStructureTool()\n    const {index, BackLink, hasGroupSiblings} = usePaneRouter()\n    const {actions: fieldActions} = useFieldActions()\n    const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(null)\n\n    // The restore action has a dedicated place in the UI; it's only visible when the user is\n    // viewing a different document revision. It must be omitted from this collection.\n    const actions = useMemo(\n      () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n      [allActions],\n    )\n\n    const menuNodes = useMemo(\n      () =>\n        resolveMenuNodes({actionHandler: onMenuAction, fieldActions, menuItems, menuItemGroups}),\n      [onMenuAction, fieldActions, menuItemGroups, menuItems],\n    )\n\n    const menuButtonNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n    const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n    const showTabs = views.length > 1\n\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    // there are three kinds of buttons possible:\n    //\n    // 1. split pane - creates a new split pane\n    // 2. close split pane — closes the current split pane\n    // 3. close pane group — closes the current pane group\n\n    // show the split pane button if they're enabled and there is more than one\n    // view available to use to create a split view\n    const showSplitPaneButton = features.splitViews && onPaneSplit && views.length > 1\n\n    // show the split pane button close button if the split button is showing\n    // and there is more than one split pane open (aka has-siblings)\n    const showSplitPaneCloseButton = showSplitPaneButton && hasGroupSiblings\n\n    // show the back button if both the feature is enabled and the current pane\n    // is not the first\n    const showBackButton = features.backButton && index > 0\n\n    // show the pane group close button if the `showSplitPaneCloseButton` is\n    // _not_ showing (the split pane button replaces the group close button)\n    // and if the back button is not showing (the back button and the close\n    // button do the same thing and shouldn't be shown at the same time)\n    // and if a BackLink component was provided\n    const showPaneGroupCloseButton = !showSplitPaneCloseButton && !showBackButton && !!BackLink\n\n    const {t} = useTranslation(structureLocaleNamespace)\n\n    const renderPaneActions = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <DocumentPanelHeaderActionDialogDeferred\n          contextMenuNodes={contextMenuNodes}\n          setReferenceElement={setReferenceElement}\n          referenceElement={referenceElement}\n          states={states}\n        />\n      ),\n      [contextMenuNodes, referenceElement],\n    )\n\n    return (\n      <TooltipDelayGroupProvider>\n        <PaneHeader\n          border\n          ref={ref}\n          loading={connectionState === 'connecting' && !editState?.draft && !editState?.published}\n          title={<DocumentHeaderTitle />}\n          tabs={showTabs && <DocumentHeaderTabs />}\n          tabIndex={tabIndex}\n          backButton={\n            showBackButton && (\n              <Button\n                as={BackLink}\n                data-as=\"a\"\n                icon={ArrowLeftIcon}\n                mode=\"bleed\"\n                tooltipProps={{content: t('pane-header.back-button.text')}}\n              />\n            )\n          }\n          actions={\n            <Flex align=\"center\" gap={1}>\n              {unstable_languageFilter.length > 0 && (\n                <>\n                  {unstable_languageFilter.map((languageFilterComponent, idx) => {\n                    return createElement(languageFilterComponent, {\n                      // eslint-disable-next-line react/no-array-index-key\n                      key: `language-filter-${idx}`,\n                      schemaType,\n                    })\n                  })}\n                </>\n              )}\n\n              {menuButtonNodes.map((item) => (\n                <PaneHeaderActionButton key={item.key} node={item} />\n              ))}\n              {editState && (\n                <RenderActionCollectionState\n                  actions={actions}\n                  actionProps={editState}\n                  group=\"paneActions\"\n                >\n                  {renderPaneActions}\n                </RenderActionCollectionState>\n              )}\n\n              {showSplitPaneButton && (\n                <Button\n                  aria-label={t('buttons.split-pane-button.aria-label')}\n                  icon={SplitVerticalIcon}\n                  key=\"split-pane-button\"\n                  mode=\"bleed\"\n                  onClick={onPaneSplit}\n                  tooltipProps={{content: t('buttons.split-pane-button.tooltip')}}\n                />\n              )}\n\n              {showSplitPaneCloseButton && (\n                <Button\n                  icon={CloseIcon}\n                  key=\"close-view-button\"\n                  mode=\"bleed\"\n                  onClick={onPaneClose}\n                  tooltipProps={{content: t('buttons.split-pane-close-button.title')}}\n                />\n              )}\n\n              {showPaneGroupCloseButton && (\n                <Button\n                  icon={CloseIcon}\n                  key=\"close-view-button\"\n                  mode=\"bleed\"\n                  tooltipProps={{content: t('buttons.split-pane-close-group-button.title')}}\n                  as={BackLink}\n                />\n              )}\n            </Flex>\n          }\n        />\n      </TooltipDelayGroupProvider>\n    )\n  }),\n)\n\nconst DocumentPanelHeaderActionDialogDeferred = memo(\n  function DocumentPanelHeaderActionDialogDeferred(props: {\n    states: DocumentActionDescription[]\n    setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n    referenceElement: HTMLElement | null\n    contextMenuNodes: _PaneMenuNode[]\n  }) {\n    const {setReferenceElement, referenceElement, contextMenuNodes} = props\n    /**\n     * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n     * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n     */\n    const states = useDeferredValue(props.states)\n\n    return (\n      <DocumentPanelHeaderActionDialog\n        setReferenceElement={setReferenceElement}\n        referenceElement={referenceElement}\n        contextMenuNodes={contextMenuNodes}\n        states={states}\n      />\n    )\n  },\n)\n\nconst DocumentPanelHeaderActionDialog = memo(function DocumentPanelHeaderActionDialog(props: {\n  states: DocumentActionDescription[]\n  setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n  referenceElement: HTMLElement | null\n  contextMenuNodes: _PaneMenuNode[]\n}) {\n  const {states, setReferenceElement, contextMenuNodes, referenceElement} = props\n\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => React.ReactNode\n  >(\n    ({handleAction}) => (\n      <div ref={setReferenceElement}>\n        <PaneContextMenuButton\n          nodes={contextMenuNodes}\n          key=\"context-menu\"\n          actionsNodes={\n            states.length > 0\n              ? states.map((actionState, actionIndex) => (\n                  <ActionMenuListItem\n                    key={actionState.label}\n                    actionState={actionState}\n                    disabled={Boolean(actionState.disabled)}\n                    index={actionIndex}\n                    onAction={handleAction}\n                  />\n                ))\n              : undefined\n          }\n        />\n      </div>\n    ),\n    [contextMenuNodes, setReferenceElement, states],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={states} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n})\n","import {Button, type ButtonProps} from '../../../ui-components'\n\ninterface SpacerButtonProps {\n  size?: ButtonProps['size']\n}\n\n/**\n * This renders a visually hidden <Button> component that is still contributes\n * to document layout.\n *\n * It's used to simplify padding in Sanity UI components that contain buttons which\n * may not always be rendered.\n *\n * TODO: let's find a more elegant solve to this layout shift problem\n *\n * @internal\n */\nexport function SpacerButton({size}: SpacerButtonProps) {\n  return (\n    <Button\n      aria-hidden\n      disabled\n      size={size}\n      style={{\n        pointerEvents: 'none',\n        visibility: 'hidden',\n        width: 0,\n      }}\n      text=\"-\"\n    />\n  )\n}\n","import {Badge, type BadgeTone, Inline} from '@sanity/ui'\nimport {memo, useCallback, useDeferredValue} from 'react'\nimport {type DocumentBadgeDescription} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {RenderBadgeCollectionState} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface DocumentBadgesInnerProps {\n  states: DocumentBadgeDescription[]\n}\n\nconst BADGE_TONES: Record<string, BadgeTone | undefined> = {\n  primary: 'primary',\n  success: 'positive',\n  warning: 'caution',\n  danger: 'critical',\n}\n\nconst DocumentBadgesInner = memo(function DocumentBadgesInner({states}: DocumentBadgesInnerProps) {\n  if (states.length === 0) {\n    return null\n  }\n  return (\n    <Inline space={1}>\n      {states.map((badge, index) => (\n        <Tooltip\n          content={badge.title}\n          disabled={!badge.title}\n          key={`${badge.label}-${index}`}\n          placement=\"top\"\n          portal\n        >\n          <Badge\n            fontSize={1}\n            mode=\"outline\"\n            paddingX={2}\n            paddingY={1}\n            radius={4}\n            tone={badge.color ? BADGE_TONES[badge.color] : undefined}\n            style={{whiteSpace: 'nowrap'}}\n          >\n            {badge.label}\n          </Badge>\n        </Tooltip>\n      ))}\n    </Inline>\n  )\n})\n\nconst DocumentBadgesDeferred = memo(function DocumentBadgesDeferred(\n  props: DocumentBadgesInnerProps,\n) {\n  /**\n   * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n   * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n   */\n  const states = useDeferredValue(props.states)\n  return <DocumentBadgesInner states={states} />\n})\n\nexport function DocumentBadges() {\n  const {badges, editState} = useDocumentPane()\n\n  const renderDocumentBadges = useCallback<\n    (props: {states: DocumentBadgeDescription[]}) => React.ReactNode\n  >(({states}) => <DocumentBadgesDeferred states={states} />, [])\n\n  if (!editState || !badges) return null\n\n  return (\n    <RenderBadgeCollectionState badges={badges} badgeProps={editState}>\n      {renderDocumentBadges}\n    </RenderBadgeCollectionState>\n  )\n}\n","import {motion} from 'framer-motion'\nimport {type ComponentProps} from 'react'\nimport {keyframes, styled} from 'styled-components'\n\nconst StyledMotionPath = styled(motion.path)`\n  transform-origin: center;\n`\n\ntype MotionCircleProps = Omit<ComponentProps<typeof motion.circle>, 'd'>\ntype MotionPathProps = Omit<ComponentProps<typeof motion.path>, 'd' | 'ref'>\n\nconst Circle = (props: MotionCircleProps) => (\n  <motion.circle fill=\"none\" r=\"8\" cx=\"12.5\" cy=\"12.5\" strokeWidth=\"1.2\" {...props} />\n)\nconst Arrows = (props: MotionPathProps) => (\n  <StyledMotionPath\n    fill=\"none\"\n    d=\"M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811\"\n    {...props}\n  />\n)\nconst Checkmark = (props: MotionPathProps) => (\n  <motion.path d=\"M9.5 12.1316L11.7414 14.5L16 10\" {...props} />\n)\n\nconst rotateAnimation = keyframes`\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`\nconst RotateGroup = styled.g`\n  transform-origin: center;\n\n  &[data-rotate] {\n    animation: ${rotateAnimation} 1s ease-in-out infinite;\n  }\n`\n\nconst root = {\n  syncing: {\n    scale: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    scale: [1, 0.8, 1.2, 0.9, 1.1, 0.95, 1.05, 0.99, 1],\n    transition: {\n      duration: 0.5,\n      delay: 0.2,\n    },\n  },\n  changes: {transition: {duration: 0}},\n}\n\nconst circle = {\n  syncing: {\n    strokeDasharray: '0, 0, 23, 3, 23, 3',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    strokeDasharray: '0, 0, 23, 0, 23, 0',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    strokeDasharray: '0, 60, 23, 0, 23, 0',\n    strokeDashoffset: 0,\n    opacity: 0,\n    transition: {\n      duration: 0.5,\n    },\n  },\n}\n\nconst arrows = {\n  syncing: {\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    opacity: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    opacity: 0,\n  },\n}\n\nconst checkmark = {\n  syncing: {\n    pathLength: 0,\n    transition: {duration: 0},\n  },\n  saved: {\n    pathLength: 1,\n    transition: {\n      delay: 0.4,\n      duration: 0.3,\n    },\n  },\n  changes: {\n    pathLength: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n}\n\ninterface AnimatedStatusIconProps {\n  status?: 'changes' | 'saved' | 'syncing'\n}\n\nexport function AnimatedStatusIcon(props: AnimatedStatusIconProps) {\n  const {status} = props\n\n  if (!status) {\n    return null\n  }\n\n  return (\n    <svg\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 25 25\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.2\"\n      data-sanity-icon=\"animated-status-icon\"\n    >\n      <motion.g variants={root} initial={status} animate={status}>\n        <RotateGroup data-rotate={status === 'changes' ? undefined : ''}>\n          <Arrows variants={arrows} initial={status} animate={status} />\n          <Circle variants={circle} initial={status} animate={status} />\n        </RotateGroup>\n        <Checkmark variants={checkmark} initial={status} animate={status} />\n      </motion.g>\n    </svg>\n  )\n}\n","import {type ButtonTone, Flex, Text} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {AnimatedStatusIcon} from './AnimatedStatusIcon'\n\ntype StatusType = 'saved' | 'syncing'\ninterface ReviewChangesButtonProps {\n  status?: StatusType\n}\n\nconst STATUS_DICTIONARY: Record<StatusType, {i18nKey: string; tone: ButtonTone}> = {\n  saved: {\n    i18nKey: 'status-bar.document-status-pulse.status.saved.text',\n    tone: 'positive',\n  },\n  syncing: {\n    i18nKey: 'status-bar.document-status-pulse.status.syncing.text',\n    tone: 'default',\n  },\n}\n\nexport const DocumentStatusPulse = (props: ReviewChangesButtonProps) => {\n  const {status} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (status !== 'saved' && status !== 'syncing') {\n    return null\n  }\n\n  const currentStatus = STATUS_DICTIONARY[status]\n\n  return (\n    <Flex align=\"center\" gap={2} data-testid=\"pane-footer-document-status-pulse\">\n      <TextWithTone size={1} tone={currentStatus.tone}>\n        <AnimatedStatusIcon status={status} />\n      </TextWithTone>\n\n      <Text muted size={1}>\n        {t(currentStatus.i18nKey)}\n      </Text>\n    </Flex>\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {useEffect, useLayoutEffect, useState} from 'react'\nimport {DocumentStatus, DocumentStatusIndicator, useSyncState} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {DocumentStatusPulse} from './DocumentStatusPulse'\n\nconst SYNCING_TIMEOUT = 1000\nconst SAVED_TIMEOUT = 3000\n\ninterface DocumentStatusLineProps {\n  singleLine?: boolean\n}\n\nexport function DocumentStatusLine({singleLine}: DocumentStatusLineProps) {\n  const {documentId, documentType, editState, value} = useDocumentPane()\n\n  const [status, setStatus] = useState<'saved' | 'syncing' | null>(null)\n\n  const syncState = useSyncState(documentId, documentType)\n\n  const lastUpdated = value?._updatedAt\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    // Schedule an update to set the status to 'saved' when status changed to 'syncing.\n    // We use `syncState.isSyncing` here to avoid the status being set to 'saved' when the document is syncing.\n    if (status === 'syncing' && !syncState.isSyncing) {\n      const timerId = setTimeout(() => setStatus('saved'), SYNCING_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n    // Schedule an update to clear the status when status changed to 'saved'\n    if (status === 'saved') {\n      const timerId = setTimeout(() => setStatus(null), SAVED_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n  }, [status, lastUpdated, syncState.isSyncing])\n\n  // Clear the status when documentId changes to make sure we don't show the wrong status when opening a new document\n  useLayoutEffect(() => {\n    setStatus(null)\n  }, [documentId])\n\n  // Set status to 'syncing' when lastUpdated changes and we go from not syncing to syncing\n  useLayoutEffect(() => {\n    if (syncState.isSyncing) {\n      setStatus('syncing')\n    }\n  }, [syncState.isSyncing, lastUpdated])\n\n  if (status) {\n    return <DocumentStatusPulse status={status || undefined} />\n  }\n\n  return (\n    <Tooltip\n      content={\n        <DocumentStatus absoluteDate draft={editState?.draft} published={editState?.published} />\n      }\n      placement=\"top\"\n    >\n      <Flex align=\"center\" gap={3}>\n        <DocumentStatusIndicator draft={editState?.draft} published={editState?.published} />\n        <DocumentStatus\n          draft={editState?.draft}\n          published={editState?.published}\n          singleLine={singleLine}\n        />\n      </Flex>\n    </Tooltip>\n  )\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {format} from 'date-fns'\nimport {createElement} from 'react'\nimport {Translate, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport const StatusText = styled(Text)`\n  color: var(--card-muted-fg-color);\n\n  em {\n    color: var(--card-fg-color);\n    font-weight: 500;\n    font-style: normal;\n  }\n`\n\nexport function RevisionStatusLine(): JSX.Element {\n  const {displayed} = useDocumentPane()\n  const {t} = useTranslation()\n  const date = displayed?._updatedAt || displayed?._createdAt\n\n  const message = {\n    name: 'revision',\n    icon: RestoreIcon,\n    text: date ? (\n      <Translate\n        t={t}\n        i18nKey=\"document-status.revision-from\"\n        values={{\n          date: format(new Date(date), `MMM d, yyyy '@' pp`),\n        }}\n      />\n    ) : null,\n    tone: 'caution',\n  }\n\n  return (\n    <>\n      <Flex flex={1} gap={3} padding={2}>\n        <Box flex=\"none\">\n          <Text size={1}>{createElement(message.icon)}</Text>\n        </Box>\n        <Box flex={1}>\n          <StatusText size={1} textOverflow=\"ellipsis\">\n            {message.text}\n          </StatusText>\n        </Box>\n      </Flex>\n    </>\n  )\n}\n","import {useLayoutEffect} from 'react'\nimport {resizeObserver} from 'sanity'\n\nexport function useResizeObserver({\n  element,\n  onResize,\n}: {\n  element?: HTMLDivElement | null\n  onResize: (event: ResizeObserverEntry) => void\n}): void {\n  useLayoutEffect(() => {\n    if (element) {\n      resizeObserver.observe(element, onResize)\n    }\n\n    return () => {\n      if (element) {\n        resizeObserver.unobserve(element)\n      }\n    }\n  }, [element, onResize])\n}\n","import {Card, Flex} from '@sanity/ui'\nimport {type Ref, useCallback, useState} from 'react'\nimport {\n  type CreateLinkMetadata,\n  isSanityCreateLinked,\n  useSanityCreateConfig,\n  useTimelineSelector,\n} from 'sanity'\n\nimport {SpacerButton} from '../../../components/spacerButton'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {useDocumentTitle} from '../useDocumentTitle'\nimport {DocumentBadges} from './DocumentBadges'\nimport {DocumentStatusBarActions, HistoryStatusBarActions} from './DocumentStatusBarActions'\nimport {DocumentStatusLine} from './DocumentStatusLine'\nimport {RevisionStatusLine} from './RevisionStatusLine'\nimport {useResizeObserver} from './useResizeObserver'\n\nexport interface DocumentStatusBarProps {\n  actionsBoxRef?: Ref<HTMLDivElement>\n  createLinkMetadata?: CreateLinkMetadata\n}\n\nconst CONTAINER_BREAKPOINT = 480 // px\n\nexport function DocumentStatusBar(props: DocumentStatusBarProps) {\n  const {actionsBoxRef, createLinkMetadata} = props\n  const {editState, timelineStore, onChange: onDocumentChange} = useDocumentPane()\n  const {title} = useDocumentTitle()\n\n  const CreateLinkedActions = useSanityCreateConfig().components?.documentLinkedActions\n\n  // Subscribe to external timeline state changes\n  const showingRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n\n  const [collapsed, setCollapsed] = useState<boolean | null>(null)\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n\n  const handleResize = useCallback((event: ResizeObserverEntry) => {\n    setCollapsed(event.contentRect.width < CONTAINER_BREAKPOINT)\n  }, [])\n\n  useResizeObserver({element: rootElement, onResize: handleResize})\n\n  const shouldRender = editState?.ready && typeof collapsed === 'boolean'\n\n  let actions: JSX.Element | null = null\n  if (createLinkMetadata && isSanityCreateLinked(createLinkMetadata) && CreateLinkedActions) {\n    actions = (\n      <CreateLinkedActions\n        metadata={createLinkMetadata}\n        panelPortalElementId={DOCUMENT_PANEL_PORTAL_ELEMENT}\n        onDocumentChange={onDocumentChange}\n        documentTitle={title}\n      />\n    )\n  } else if (showingRevision) {\n    actions = <HistoryStatusBarActions />\n  } else {\n    actions = <DocumentStatusBarActions />\n  }\n\n  return (\n    <Card tone={showingRevision ? 'caution' : undefined}>\n      <Flex direction=\"column\" ref={setRootElement} sizing=\"border\">\n        {shouldRender && (\n          <Flex\n            align=\"stretch\"\n            gap={1}\n            justify=\"space-between\"\n            paddingY={2}\n            paddingLeft={showingRevision ? 3 : 4}\n            paddingRight={showingRevision ? 2 : 3}\n          >\n            <Flex align=\"center\" flex={1} gap={collapsed ? 2 : 3} wrap=\"wrap\" paddingRight={3}>\n              <Flex align=\"center\">\n                {showingRevision ? (\n                  <RevisionStatusLine />\n                ) : (\n                  <DocumentStatusLine singleLine={!collapsed} />\n                )}\n                <SpacerButton size=\"large\" />\n              </Flex>\n              <DocumentBadges />\n            </Flex>\n\n            <Flex\n              align=\"flex-start\"\n              justify=\"flex-end\"\n              ref={actionsBoxRef}\n              style={{flexShrink: 0, marginLeft: 'auto'}}\n            >\n              <SpacerButton size=\"large\" />\n              {actions}\n            </Flex>\n          </Flex>\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {isHotkey} from 'is-hotkey-esm'\nimport {\n  createElement,\n  type ElementType,\n  type HTMLProps,\n  memo,\n  type Ref,\n  useCallback,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, type DocumentActionProps, LegacyLayerProvider} from 'sanity'\n\nimport {RenderActionCollectionState} from '../../../components'\nimport {ActionStateDialog} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport interface KeyboardShortcutResponderProps {\n  actionsBoxElement: HTMLElement | null\n  activeIndex: number\n  as?: ElementType\n  currentMinWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  onActionStart: (index: number) => void\n  rootRef: Ref<HTMLDivElement>\n  states: DocumentActionDescription[]\n}\n\nconst KeyboardShortcutResponder = memo(function KeyboardShortcutResponder(\n  props: KeyboardShortcutResponderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height'>,\n) {\n  const {\n    actionsBoxElement,\n    activeIndex,\n    as = 'div',\n    children,\n    id,\n    onActionStart,\n    onKeyDown,\n    rootRef,\n    states,\n    ...rest\n  } = props\n\n  const activeAction = states[activeIndex]\n\n  const handleKeyDown = useCallback(\n    (event: any) => {\n      const matchingStates = states.filter(\n        (state) => state.shortcut && isHotkey(state.shortcut, event),\n      )\n\n      const matchingState = matchingStates[0]\n\n      if (matchingStates.length > 1) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Keyboard shortcut conflict: More than one document action matches the shortcut \"${matchingState.shortcut}\"`,\n        )\n      }\n\n      if (matchingState && !matchingState.disabled && matchingState.onHandle) {\n        event.preventDefault()\n        matchingState.onHandle()\n        onActionStart(states.indexOf(matchingState))\n        return\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event)\n      }\n    },\n    [onActionStart, onKeyDown, states],\n  )\n\n  return createElement(\n    as,\n    {\n      id,\n      onKeyDown: handleKeyDown,\n      tabIndex: -1,\n      ...rest,\n      ref: rootRef,\n    },\n    [\n      children,\n      activeAction && activeAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={activeAction.dialog} referenceElement={actionsBoxElement} />\n        </LegacyLayerProvider>\n      ),\n    ],\n  )\n})\n\nexport interface DocumentActionShortcutsProps {\n  actionsBoxElement: HTMLElement | null\n  as?: ElementType\n  currentMinWidth?: number\n  debug?: boolean\n  flex: number\n  id: string\n  minWidth: number\n  rootRef: Ref<HTMLDivElement>\n}\n\nexport const DocumentActionShortcuts = memo(\n  (props: DocumentActionShortcutsProps & Omit<HTMLProps<HTMLDivElement>, 'as'>) => {\n    const {actionsBoxElement, as = 'div', children, ...rest} = props\n    const {actions, editState} = useDocumentPane()\n    const [activeIndex, setActiveIndex] = useState(-1)\n\n    const onActionStart = useCallback((idx: number) => {\n      setActiveIndex(idx)\n    }, [])\n\n    const actionProps: DocumentActionProps | null = useMemo(\n      () =>\n        editState && {\n          ...editState,\n\n          // @todo: what to call here?\n          onComplete: () => undefined,\n\n          // @todo: get revision string\n          revision: undefined,\n        },\n      [editState],\n    )\n\n    const renderDocumentActionShortcuts = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <KeyboardShortcutResponder\n          {...rest}\n          activeIndex={activeIndex}\n          actionsBoxElement={actionsBoxElement}\n          as={as}\n          onActionStart={onActionStart}\n          states={states}\n        >\n          {children}\n        </KeyboardShortcutResponder>\n      ),\n      [actionsBoxElement, activeIndex, as, children, onActionStart, rest],\n    )\n\n    if (!actionProps || !actions) return null\n\n    return (\n      <RenderActionCollectionState actionProps={actionProps} actions={actions}>\n        {renderDocumentActionShortcuts}\n      </RenderActionCollectionState>\n    )\n  },\n)\n\nDocumentActionShortcuts.displayName = 'Memo(DocumentActionShortcuts)'\n","import {EarthAmericasIcon, JsonIcon, LinkIcon} from '@sanity/icons'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, type TFunction} from 'sanity'\n\nimport {type PaneMenuItem, type StructureToolFeatures} from '../../types'\nimport {INSPECT_ACTION_PREFIX} from './constants'\n\ninterface GetMenuItemsParams {\n  currentInspector?: DocumentInspector\n  features: StructureToolFeatures\n  hasValue: boolean\n  inspectors: DocumentInspector[]\n  previewUrl?: string | null\n  inspectorMenuItems: DocumentInspectorMenuItem[]\n  t: TFunction\n}\n\nfunction getInspectorItems({\n  currentInspector,\n  hasValue,\n  inspectors,\n  inspectorMenuItems,\n}: GetMenuItemsParams): PaneMenuItem[] {\n  return inspectors\n    .map((inspector, index) => {\n      const menuItem = inspectorMenuItems[index]\n\n      if (!menuItem || menuItem.hidden) return null\n\n      return {\n        action: `${INSPECT_ACTION_PREFIX}${inspector.name}`,\n        group: menuItem.showAsAction ? undefined : 'inspectors',\n        icon: menuItem.icon,\n        isDisabled: !hasValue,\n        selected: currentInspector?.name === inspector.name,\n        shortcut: menuItem.hotkeys?.join('+'),\n        showAsAction: menuItem.showAsAction,\n        title: menuItem.title,\n        tone: menuItem.tone,\n      }\n    })\n    .filter(Boolean) as PaneMenuItem[]\n}\n\nfunction getInspectItem({hasValue, t}: GetMenuItemsParams): PaneMenuItem {\n  return {\n    action: 'inspect',\n    group: 'inspectors',\n    title: t('document-inspector.menu-item.title'),\n    icon: JsonIcon,\n    isDisabled: !hasValue,\n    shortcut: 'Ctrl+Alt+I',\n  }\n}\n\nexport function getProductionPreviewItem({previewUrl, t}: GetMenuItemsParams): PaneMenuItem | null {\n  if (!previewUrl) return null\n\n  return {\n    action: 'production-preview',\n    group: 'links',\n    title: t('production-preview.menu-item.title'),\n    icon: EarthAmericasIcon,\n    shortcut: 'Ctrl+Alt+O',\n  }\n}\n\nexport function getMenuItems(params: GetMenuItemsParams): PaneMenuItem[] {\n  const inspectorItems = getInspectorItems(params)\n  const items = [\n    // Get production preview item\n    getProductionPreviewItem(params),\n  ].filter(Boolean) as PaneMenuItem[]\n\n  return [\n    // Always present document menu item to copy current url to clipboard\n    {\n      action: 'copy-document-url',\n      showAsAction: true,\n      title: params.t('action.copy-document-url.label'),\n      icon: LinkIcon,\n    },\n    ...inspectorItems,\n\n    // TODO: convert to inspector or document view?\n    getInspectItem(params),\n\n    ...items,\n  ]\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {useEffect, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {BehaviorSubject, from, of} from 'rxjs'\nimport {catchError, debounceTime, distinctUntilChanged, switchMap} from 'rxjs/operators'\nimport {isRecord, useSource} from 'sanity'\n\nconst isSanityDocument = (value: unknown): value is SanityDocument =>\n  isRecord(value) && typeof value._id === 'string' && typeof value._type === 'string'\n\nexport function usePreviewUrl(value: Partial<SanityDocument> | undefined): string | undefined {\n  const {resolveProductionUrl} = useSource().document\n  const subject = useMemo(\n    () => new BehaviorSubject<Partial<SanityDocument> | undefined>(undefined),\n    [],\n  )\n\n  useEffect(() => {\n    subject.next(value)\n  }, [subject, value])\n\n  const resolvedUrlObservable = useMemo(() => {\n    return subject.asObservable().pipe(\n      // this so that the preview URL isn't fetched on every keystroke\n      distinctUntilChanged(),\n      debounceTime(500),\n      switchMap((document) =>\n        isSanityDocument(document) ? from(resolveProductionUrl({document})) : of(undefined),\n      ),\n      distinctUntilChanged(),\n      catchError((err) => {\n        const message =\n          isRecord(err) && typeof err.message === 'string' ? err.message : 'Unknown error'\n        throw new Error(`An error was thrown while trying to get your preview url: ${message}`)\n      }),\n    )\n  }, [resolveProductionUrl, subject])\n\n  return useObservable(resolvedUrlObservable)\n}\n","import {Card, Code, Stack, Text} from '@sanity/ui'\nimport {isDev, Translate, useTranslation} from 'sanity'\n\nimport {ErrorPane} from '../../error'\n\ninterface DocumentLayoutErrorProps {\n  currentMinWidth?: number\n  documentType?: string\n  minWidth?: number\n  paneKey: string\n  value?: Record<string, unknown>\n}\n\nexport function DocumentLayoutError(props: DocumentLayoutErrorProps) {\n  const {documentType, value, currentMinWidth, paneKey, minWidth} = props\n  const {t} = useTranslation()\n\n  return (\n    <ErrorPane\n      currentMinWidth={currentMinWidth}\n      flex={2.5}\n      minWidth={minWidth}\n      paneKey={paneKey}\n      title={\n        <Translate\n          t={t}\n          i18nKey=\"panes.document-pane.document-unknown-type.title\"\n          values={{documentType}}\n        />\n      }\n      tone=\"caution\"\n    >\n      <Stack space={4}>\n        {documentType && (\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-unknown-type.text\"\n              values={{documentType}}\n            />\n          </Text>\n        )}\n\n        {!documentType && (\n          <Text as=\"p\">{t('panes.document-pane.document-unknown-type.without-schema.text')}</Text>\n        )}\n\n        {isDev && value && (\n          /* eslint-disable i18next/no-literal-string */\n          <>\n            <Text as=\"p\">Here is the JSON representation of the document:</Text>\n\n            <Card padding={3} overflow=\"auto\" radius={2} shadow={1} tone=\"inherit\">\n              <Code language=\"json\" size={[1, 1, 2]}>\n                {JSON.stringify(value, null, 2)}\n              </Code>\n            </Card>\n          </>\n          /* eslint-enable i18next/no-literal-string */\n        )}\n      </Stack>\n    </ErrorPane>\n  )\n}\n","import {\n  DialogProvider,\n  type DialogProviderProps,\n  Flex,\n  PortalProvider,\n  useElementRect,\n} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {type ReactNode, useCallback, useMemo, useState} from 'react'\nimport {useTranslation} from 'react-i18next'\nimport {\n  ChangeConnectorRoot,\n  type DocumentFieldActionNode,\n  type DocumentInspectorMenuItem,\n  FieldActionsProvider,\n  FieldActionsResolver,\n  GetFormValueProvider,\n  getSanityCreateLinkMetadata,\n  isSanityCreateLinked,\n  useGlobalCopyPasteElementHandler,\n  useSanityCreateConfig,\n  useZIndex,\n} from 'sanity'\nimport {type Path} from 'sanity-diff-patch'\nimport {styled} from 'styled-components'\n\nimport {TooltipDelayGroupProvider} from '../../../../ui-components'\nimport {Pane, PaneFooter, usePane, usePaneLayout, usePaneRouter} from '../../../components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {\n  DOCUMENT_INSPECTOR_MIN_WIDTH,\n  DOCUMENT_PANEL_INITIAL_MIN_WIDTH,\n  DOCUMENT_PANEL_MIN_WIDTH,\n} from '../constants'\nimport {DocumentInspectorMenuItemsResolver} from '../DocumentInspectorMenuItemsResolver'\nimport {DocumentOperationResults} from '../DocumentOperationResults'\nimport {DocumentPanel} from '../documentPanel'\nimport {Banner} from '../documentPanel/banners/Banner'\nimport {DocumentPanelHeader} from '../documentPanel/header'\nimport {DocumentActionShortcuts} from '../keyboardShortcuts'\nimport {getMenuItems} from '../menuItems'\nimport {DocumentStatusBar} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {usePreviewUrl} from '../usePreviewUrl'\nimport {DocumentLayoutError} from './DocumentLayoutError'\n\nconst EMPTY_ARRAY: [] = []\n\nconst DIALOG_PROVIDER_POSITION: DialogProviderProps['position'] = [\n  // We use the `position: fixed` for dialogs on narrower screens (first two media breakpoints).\n  'fixed',\n  'fixed',\n  // And we use the `position: absolute` strategy (within panes) on wide screens.\n  'absolute',\n]\n\nconst StyledChangeConnectorRoot = styled(ChangeConnectorRoot)`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-height: 0;\n  min-width: 0;\n`\n\nexport function DocumentLayout() {\n  const {\n    changesOpen,\n    documentId,\n    documentType,\n    fieldActions,\n    focusPath,\n    inspectOpen,\n    inspector,\n    inspectors,\n    onFocus,\n    onHistoryOpen,\n    onMenuAction,\n    onPathOpen,\n    paneKey,\n    schemaType,\n    value,\n    isInitialValueLoading,\n  } = useDocumentPane()\n  const {params: paneParams} = usePaneRouter()\n  const {features} = useStructureTool()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  const zOffsets = useZIndex()\n  const previewUrl = usePreviewUrl(value)\n\n  const createLinkMetadata = getSanityCreateLinkMetadata(value)\n  const {\n    documentLinkedBannerContent: CreateLinkedBannerContent,\n    startInCreateBanner: StartInCreateBanner,\n  } = useSanityCreateConfig().components ?? {}\n\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const [footerElement, setFooterElement] = useState<HTMLDivElement | null>(null)\n  const [headerElement, setHeaderElement] = useState<HTMLDivElement | null>(null)\n\n  const [actionsBoxElement, setActionsBoxElement] = useState<HTMLDivElement | null>(null)\n  const [documentPanelPortalElement, setDocumentPanelPortalElement] = useState<HTMLElement | null>(\n    null,\n  )\n\n  useGlobalCopyPasteElementHandler({\n    element: rootElement,\n    focusPath,\n    value,\n  })\n\n  const [inspectorMenuItems, setInspectorMenuItems] = useState<DocumentInspectorMenuItem[]>([])\n  const [rootFieldActionNodes, setRootFieldActionNodes] = useState<DocumentFieldActionNode[]>([])\n\n  const footerRect = useElementRect(footerElement)\n  const headerRect = useElementRect(headerElement)\n  const footerHeight = footerRect?.height\n  const headerHeight = headerRect?.height\n  const currentMinWidth =\n    DOCUMENT_PANEL_INITIAL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n  const minWidth = DOCUMENT_PANEL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n\n  const currentInspector = useMemo(\n    () => inspectors?.find((i) => i.name === inspector?.name),\n    [inspectors, inspector?.name],\n  )\n\n  const hasValue = Boolean(value)\n\n  const menuItems = useMemo(\n    () =>\n      getMenuItems({\n        currentInspector,\n        features,\n        hasValue,\n        inspectorMenuItems,\n        inspectors,\n        previewUrl,\n        t,\n      }),\n    [currentInspector, features, hasValue, inspectorMenuItems, inspectors, previewUrl, t],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      for (const item of menuItems) {\n        if (item.shortcut) {\n          if (isHotkey(item.shortcut, event)) {\n            event.preventDefault()\n            event.stopPropagation()\n            onMenuAction(item)\n            return\n          }\n        }\n      }\n    },\n    [onMenuAction, menuItems],\n  )\n\n  const onConnectorSetFocus = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onPathOpen, onFocus],\n  )\n\n  if (!schemaType) {\n    return (\n      <DocumentLayoutError\n        currentMinWidth={currentMinWidth}\n        documentType={documentType}\n        minWidth={minWidth}\n        paneKey={paneKey}\n        value={value}\n      />\n    )\n  }\n\n  return (\n    <GetFormValueProvider value={value}>\n      {inspectors.length > 0 && (\n        <DocumentInspectorMenuItemsResolver\n          documentId={documentId}\n          documentType={documentType}\n          inspectors={inspectors}\n          onMenuItems={setInspectorMenuItems}\n        />\n      )}\n\n      {fieldActions.length > 0 && schemaType && (\n        <FieldActionsResolver\n          actions={fieldActions}\n          documentId={documentId}\n          documentType={documentType}\n          onActions={setRootFieldActionNodes}\n          path={EMPTY_ARRAY}\n          schemaType={schemaType}\n        />\n      )}\n\n      <FieldActionsProvider actions={rootFieldActionNodes} path={EMPTY_ARRAY}>\n        <DocumentActionShortcuts\n          actionsBoxElement={actionsBoxElement}\n          as={Pane}\n          currentMinWidth={currentMinWidth}\n          data-testid=\"document-pane\"\n          flex={2.5}\n          id={paneKey}\n          minWidth={minWidth}\n          onKeyUp={handleKeyUp}\n          rootRef={setRootElement}\n        >\n          <DocumentPanelHeader ref={setHeaderElement} menuItems={menuItems} />\n\n          {createLinkMetadata &&\n            isSanityCreateLinked(createLinkMetadata) &&\n            CreateLinkedBannerContent && (\n              <ShowWhenPaneOpen>\n                <Banner\n                  tone=\"transparent\"\n                  data-test-id=\"sanity-create-read-only-banner\"\n                  content={<CreateLinkedBannerContent metadata={createLinkMetadata} />}\n                />\n              </ShowWhenPaneOpen>\n            )}\n\n          <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.paneDialog}>\n            <Flex direction=\"column\" flex={1} height={layoutCollapsed ? undefined : 'fill'}>\n              <StyledChangeConnectorRoot\n                data-testid=\"change-connector-root\"\n                isReviewChangesOpen={changesOpen && paneParams?.changesInspectorTab === 'review'}\n                onOpenReviewChanges={onHistoryOpen}\n                onSetFocus={onConnectorSetFocus}\n              >\n                <DocumentPanel\n                  footerHeight={footerHeight || null}\n                  headerHeight={headerHeight || null}\n                  isInspectOpen={inspectOpen}\n                  rootElement={rootElement}\n                  setDocumentPanelPortalElement={setDocumentPanelPortalElement}\n                />\n              </StyledChangeConnectorRoot>\n            </Flex>\n          </DialogProvider>\n\n          {/* These providers are added because we want the dialogs in `DocumentStatusBar` to be scoped to the document pane. */}\n          {/* The portal element comes from `DocumentPanel`. */}\n          <PortalProvider\n            __unstable_elements={{[DOCUMENT_PANEL_PORTAL_ELEMENT]: documentPanelPortalElement}}\n          >\n            <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.portal}>\n              {StartInCreateBanner && (\n                <ShowWhenPaneOpen>\n                  <StartInCreateBanner\n                    document={value}\n                    documentId={documentId}\n                    documentType={schemaType}\n                    isInitialValueLoading={!!isInitialValueLoading}\n                    panelPortalElementId={DOCUMENT_PANEL_PORTAL_ELEMENT}\n                  />\n                </ShowWhenPaneOpen>\n              )}\n              <PaneFooter ref={setFooterElement}>\n                <TooltipDelayGroupProvider>\n                  <DocumentStatusBar\n                    actionsBoxRef={setActionsBoxElement}\n                    createLinkMetadata={createLinkMetadata}\n                  />\n                </TooltipDelayGroupProvider>\n              </PaneFooter>\n            </DialogProvider>\n          </PortalProvider>\n          <DocumentOperationResults />\n        </DocumentActionShortcuts>\n      </FieldActionsProvider>\n    </GetFormValueProvider>\n  )\n}\n\n/**\n * Prevents whatever is inside of it from rendering when the pane is collapsed.\n * Needed locally as DocumentLayout does lives outside PaneContext, but is provided _somewhere_ within it.\n */\nfunction ShowWhenPaneOpen(props: {children: ReactNode}) {\n  const {collapsed} = usePane()\n  return collapsed ? null : props.children\n}\n","import {type ComponentType} from 'react'\nimport {type DocumentLayoutProps, type PluginOptions, useMiddlewareComponents} from 'sanity'\n\nimport {DocumentLayout} from './DocumentLayout'\n\nfunction pick(plugin: PluginOptions) {\n  return plugin.document?.components?.unstable_layout as ComponentType<\n    Omit<DocumentLayoutProps, 'renderDefault'>\n  >\n}\n\n/**\n * A hook that returns the document layout composed\n * by the Components API (`document.components.layout`).\n */\nexport function useDocumentLayoutComponent(): ComponentType<\n  Omit<DocumentLayoutProps, 'renderDefault'>\n> {\n  return useMiddlewareComponents({\n    pick,\n    defaultComponent: DocumentLayout,\n  })\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/**\n * @internal\n */\nexport const DocumentURLCopied = defineEvent({\n  name: 'DocumentURLCopied',\n  version: 1,\n  description: 'User copied document URL to clipboard',\n})\n\n/**\n * When a draft is successfully created\n * @internal\n */\nexport const CreatedDraft = defineEvent({\n  name: 'New Draft Created',\n  version: 1,\n  description: 'User created a new draft',\n})\n","import {type Template} from 'sanity'\n\ninterface InitialValueOptions {\n  documentType: string\n  panePayload?: unknown\n  templateName?: string\n  templateParams?: Record<string, unknown>\n  urlTemplate?: string\n}\n\n/**\n * @internal\n */\nexport function getInitialValueTemplateOpts(\n  templates: Template[],\n  opts: InitialValueOptions,\n): {templateName: string; templateParams: Record<string, unknown>} {\n  const payload = opts.panePayload || {}\n  const structureNodeTemplate = opts.templateName\n\n  if (opts.urlTemplate && structureNodeTemplate && structureNodeTemplate !== opts.urlTemplate) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Conflicting templates: URL says \"${opts.urlTemplate}\", structure node says \"${structureNodeTemplate}\". Using \"${structureNodeTemplate}\".`,\n    )\n  }\n\n  const template = structureNodeTemplate || opts.urlTemplate\n  const typeTemplates = templates.filter((t) => t.schemaType === opts.documentType)\n\n  const templateParams = {\n    ...opts.templateParams,\n    ...(typeof payload === 'object' ? payload || {} : {}),\n  }\n\n  let templateName = template\n\n  // If we have not specified a specific template, and we only have a single\n  // template available for a schema type, use it\n  if (!template && typeTemplates.length === 1) {\n    templateName = typeTemplates[0].id\n  }\n\n  return {templateName: templateName!, templateParams}\n}\n","/* eslint-disable camelcase */\nimport {isActionEnabled} from '@sanity/schema/_internal'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SanityDocumentLike,\n} from '@sanity/types'\nimport {useToast} from '@sanity/ui'\nimport {fromString as pathFromString, pathFor, resolveKeyedPath} from '@sanity/util/paths'\nimport {omit, throttle} from 'lodash'\nimport {memo, useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport deepEquals from 'react-fast-compare'\nimport {\n  type DocumentFieldAction,\n  type DocumentInspector,\n  type DocumentPresence,\n  EMPTY_ARRAY,\n  getDraftId,\n  getExpandOperations,\n  getPublishedId,\n  isSanityCreateLinkedDocument,\n  type OnPathFocusPayload,\n  type PatchEvent,\n  setAtPath,\n  type StateTree,\n  toMutationPatches,\n  useConnectionState,\n  useCopyPaste,\n  useDocumentOperation,\n  useDocumentValuePermissions,\n  useEditState,\n  useFormState,\n  useInitialValue,\n  usePresenceStore,\n  useSchema,\n  useSource,\n  useTemplates,\n  useTimelineSelector,\n  useTimelineStore,\n  useTranslation,\n  useUnique,\n  useValidationStatus,\n} from 'sanity'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {CreatedDraft, DocumentURLCopied} from './__telemetry__'\nimport {\n  DEFAULT_MENU_ITEM_GROUPS,\n  EMPTY_PARAMS,\n  HISTORY_INSPECTOR_NAME,\n  INSPECT_ACTION_PREFIX,\n} from './constants'\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\nimport {getInitialValueTemplateOpts} from './getInitialValueTemplateOpts'\nimport {type DocumentPaneProviderProps} from './types'\nimport {usePreviewUrl} from './usePreviewUrl'\n\n/**\n * @internal\n */\n// eslint-disable-next-line complexity, max-statements\nexport const DocumentPaneProvider = memo((props: DocumentPaneProviderProps) => {\n  const {children, index, pane, paneKey, onFocusPath} = props\n  const schema = useSchema()\n  const templates = useTemplates()\n  const {setDocumentMeta} = useCopyPaste()\n  const {\n    __internal_tasks,\n    document: {\n      actions: documentActions,\n      badges: documentBadges,\n      unstable_fieldActions: fieldActionsResolver,\n      unstable_languageFilter: languageFilterResolver,\n      inspectors: inspectorsResolver,\n    },\n  } = useSource()\n  const presenceStore = usePresenceStore()\n  const paneRouter = usePaneRouter()\n  const setPaneParams = paneRouter.setParams\n  const {features} = useStructureTool()\n  const {push: pushToast} = useToast()\n  const {\n    options,\n    menuItemGroups = DEFAULT_MENU_ITEM_GROUPS,\n    title = null,\n    views: viewsProp = [],\n  } = pane\n  const paneOptions = useUnique(options)\n  const documentIdRaw = paneOptions.id\n  const documentId = getPublishedId(documentIdRaw)\n  const documentType = options.type\n  const params = useUnique(paneRouter.params) || EMPTY_PARAMS\n  const panePayload = useUnique(paneRouter.payload)\n  const {templateName, templateParams} = useMemo(\n    () =>\n      getInitialValueTemplateOpts(templates, {\n        documentType,\n        templateName: paneOptions.template,\n        templateParams: paneOptions.templateParameters,\n        panePayload,\n        urlTemplate: params.template,\n      }),\n    [documentType, paneOptions, params, panePayload, templates],\n  )\n  const initialValueRaw = useInitialValue({\n    documentId,\n    documentType,\n    templateName,\n    templateParams,\n  })\n  const initialValue = useUnique(initialValueRaw)\n  const isInitialValueLoading = initialValue.loading\n\n  const {patch} = useDocumentOperation(documentId, documentType)\n  const editState = useEditState(documentId, documentType)\n  const {validation: validationRaw} = useValidationStatus(documentId, documentType)\n  const connectionState = useConnectionState(documentId, documentType)\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n  const value: SanityDocumentLike = editState?.draft || editState?.published || initialValue.value\n  const [isDeleting, setIsDeleting] = useState(false)\n\n  // Resolve document actions\n  const actions = useMemo(\n    () => documentActions({schemaType: documentType, documentId}),\n    [documentActions, documentId, documentType],\n  )\n\n  // Resolve document badges\n  const badges = useMemo(\n    () => documentBadges({schemaType: documentType, documentId}),\n    [documentBadges, documentId, documentType],\n  )\n\n  // Resolve document language filter\n  const languageFilter = useMemo(\n    () => languageFilterResolver({schemaType: documentType, documentId}),\n    [documentId, documentType, languageFilterResolver],\n  )\n\n  const validation = useUnique(validationRaw)\n  const views = useUnique(viewsProp)\n\n  const [focusPath, setFocusPath] = useState<Path>(() =>\n    params.path ? pathFromString(params.path) : EMPTY_ARRAY,\n  )\n  const focusPathRef = useRef<Path>([])\n  const activeViewId = params.view || (views[0] && views[0].id) || null\n  const [timelineMode, setTimelineMode] = useState<'since' | 'rev' | 'closed'>('closed')\n\n  const [timelineError, setTimelineError] = useState<Error | null>(null)\n\n  /**\n   * Create an intermediate store which handles document Timeline + TimelineController\n   * creation, and also fetches pre-requsite document snapshots. Compatible with `useSyncExternalStore`\n   * and made available to child components via DocumentPaneContext.\n   */\n  const timelineStore = useTimelineStore({\n    documentId,\n    documentType,\n    onError: setTimelineError,\n    rev: params.rev,\n    since: params.since,\n  })\n\n  // Subscribe to external timeline state changes\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const revTime = useTimelineSelector(timelineStore, (state) => state.revTime)\n  const sinceAttributes = useTimelineSelector(timelineStore, (state) => state.sinceAttributes)\n  const timelineDisplayed = useTimelineSelector(timelineStore, (state) => state.timelineDisplayed)\n  const timelineReady = useTimelineSelector(timelineStore, (state) => state.timelineReady)\n  const isPristine = useTimelineSelector(timelineStore, (state) => state.isPristine)\n\n  /**\n   * Determine if the current document is deleted.\n   *\n   * When the timeline is available – we check for the absence of an editable document pair\n   * (both draft + published versions) as well as a non 'pristine' timeline (i.e. a timeline that consists\n   * of at least one chunk).\n   *\n   * In the _very rare_ case where the timeline cannot be loaded – we skip this check and always assume\n   * the document is NOT deleted. Since we can't accurately determine document deleted status without history,\n   * skipping this check means that in these cases, users will at least be able to create new documents\n   * without them being incorrectly marked as deleted.\n   */\n  const isDeleted = useMemo(() => {\n    if (!timelineReady) {\n      return false\n    }\n    return Boolean(!editState?.draft && !editState?.published) && !isPristine\n  }, [editState?.draft, editState?.published, isPristine, timelineReady])\n\n  // TODO: this may cause a lot of churn. May be a good idea to prevent these\n  // requests unless the menu is open somehow\n  const previewUrl = usePreviewUrl(value)\n\n  const [presence, setPresence] = useState<DocumentPresence[]>([])\n  useEffect(() => {\n    const subscription = presenceStore.documentPresence(documentId).subscribe((nextPresence) => {\n      setPresence(nextPresence)\n    })\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [documentId, presenceStore])\n\n  const inspectors: DocumentInspector[] = useMemo(\n    () => inspectorsResolver({documentId, documentType}),\n    [documentId, documentType, inspectorsResolver],\n  )\n\n  const [inspectorName, setInspectorName] = useState<string | null>(() => params.inspect || null)\n\n  // Handle inspector name changes from URL\n  const inspectParamRef = useRef<string | undefined>(params.inspect)\n  useEffect(() => {\n    if (inspectParamRef.current !== params.inspect) {\n      inspectParamRef.current = params.inspect\n      setInspectorName(params.inspect || null)\n    }\n  }, [params.inspect])\n\n  const currentInspector = inspectors?.find((i) => i.name === inspectorName)\n  const resolvedChangesInspector = inspectors.find((i) => i.name === HISTORY_INSPECTOR_NAME)\n\n  const changesOpen = currentInspector?.name === HISTORY_INSPECTOR_NAME\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const inspectOpen = params.inspect === 'on'\n  const compareValue: Partial<SanityDocument> | null = changesOpen\n    ? sinceAttributes\n    : editState?.published || null\n\n  const fieldActions: DocumentFieldAction[] = useMemo(\n    () => (schemaType ? fieldActionsResolver({documentId, documentType, schemaType}) : []),\n    [documentId, documentType, fieldActionsResolver, schemaType],\n  )\n\n  /**\n   * Note that in addition to connection and edit state, we also wait for a valid document timeline\n   * range to be loaded. This means if we're loading an older revision, the full transaction range must\n   * be loaded in full prior to the document being displayed.\n   *\n   * Previously, visiting studio URLs with timeline params would display the 'current' document and then\n   * 'snap' in the older revision, which was disorienting and could happen mid-edit.\n   *\n   * In the event that the timeline cannot be loaded due to TimelineController errors or blocked requests,\n   * we skip this readiness check to ensure that users aren't locked out of editing. Trying to select\n   * a timeline revision in this instance will display an error localized to the popover itself.\n   */\n  const ready =\n    connectionState === 'connected' &&\n    editState.ready &&\n    (!params.rev || timelineReady || !!timelineError)\n\n  const displayed: Partial<SanityDocument> | undefined = useMemo(\n    () => (onOlderRevision ? timelineDisplayed || {_id: value._id, _type: value._type} : value),\n    [onOlderRevision, timelineDisplayed, value],\n  )\n\n  const setTimelineRange = useCallback(\n    (newSince: string, newRev: string | null) => {\n      setPaneParams({\n        ...params,\n        since: newSince,\n        rev: newRev || undefined,\n      })\n    },\n    [params, setPaneParams],\n  )\n\n  const handleBlur = useCallback(\n    (blurredPath: Path) => {\n      if (disableBlurRef.current) {\n        return\n      }\n\n      setFocusPath(EMPTY_ARRAY)\n\n      if (focusPathRef.current !== EMPTY_ARRAY) {\n        focusPathRef.current = EMPTY_ARRAY\n        onFocusPath?.(EMPTY_ARRAY)\n      }\n\n      // note: we're deliberately not syncing presence here since it would make the user avatar disappear when a\n      // user clicks outside a field without focusing another one\n    },\n    [onFocusPath, setFocusPath],\n  )\n\n  const patchRef = useRef<(event: PatchEvent) => void>(() => {\n    throw new Error('Nope')\n  })\n\n  patchRef.current = (event: PatchEvent) => {\n    // when creating a new draft\n    if (!editState.draft && !editState.published) {\n      telemetry.log(CreatedDraft)\n    }\n    patch.execute(toMutationPatches(event.patches), initialValue.value)\n  }\n\n  const handleChange = useCallback((event: PatchEvent) => patchRef.current(event), [])\n\n  const closeInspector = useCallback(\n    (closeInspectorName?: string) => {\n      // inspector?: DocumentInspector\n      const inspector = closeInspectorName && inspectors.find((i) => i.name === closeInspectorName)\n\n      if (closeInspectorName && !inspector) {\n        console.warn(`No inspector named \"${closeInspectorName}\"`)\n        return\n      }\n\n      if (!currentInspector) {\n        return\n      }\n\n      if (inspector) {\n        const result = inspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n\n        return\n      }\n\n      if (currentInspector) {\n        const result = currentInspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n      }\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const openInspector = useCallback(\n    (nextInspectorName: string, paneParams?: Record<string, string>) => {\n      const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n      if (!nextInspector) {\n        console.warn(`No inspector named \"${nextInspectorName}\"`)\n        return\n      }\n\n      // if the inspector is already open, only update params\n      if (currentInspector?.name === nextInspector.name) {\n        setPaneParams({...params, ...paneParams, inspect: nextInspector.name})\n        return\n      }\n\n      let currentParams = params\n\n      if (currentInspector) {\n        const closeResult = nextInspector.onClose?.({params: currentParams}) ?? {\n          params: currentParams,\n        }\n\n        currentParams = closeResult.params\n      }\n\n      const result = nextInspector.onOpen?.({params: currentParams}) ?? {params: currentParams}\n\n      setInspectorName(nextInspector.name)\n      inspectParamRef.current = nextInspector.name\n\n      setPaneParams({...result.params, ...paneParams, inspect: nextInspector.name})\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const handleHistoryClose = useCallback(() => {\n    if (resolvedChangesInspector) {\n      closeInspector(resolvedChangesInspector.name)\n    }\n  }, [closeInspector, resolvedChangesInspector])\n\n  const handleHistoryOpen = useCallback(() => {\n    if (!features.reviewChanges) {\n      return\n    }\n\n    if (resolvedChangesInspector) {\n      openInspector(resolvedChangesInspector.name, {changesInspectorTab: 'review'})\n    }\n  }, [features.reviewChanges, openInspector, resolvedChangesInspector])\n\n  const handlePaneClose = useCallback(() => paneRouter.closeCurrent(), [paneRouter])\n\n  const handlePaneSplit = useCallback(() => paneRouter.duplicateCurrent(), [paneRouter])\n\n  const toggleLegacyInspect = useCallback(\n    (toggle = !inspectOpen) => {\n      if (toggle) {\n        setPaneParams({...params, inspect: 'on'})\n      } else {\n        setPaneParams(omit(params, 'inspect'))\n      }\n    },\n    [inspectOpen, params, setPaneParams],\n  )\n\n  const telemetry = useTelemetry()\n\n  const handleMenuAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (item.action === 'production-preview' && previewUrl) {\n        window.open(previewUrl)\n        return true\n      }\n\n      if (item.action === 'copy-document-url' && navigator) {\n        telemetry.log(DocumentURLCopied)\n        // Chose to copy the user's current URL instead of\n        // the document's edit intent link because\n        // of bugs when resolving a document that has\n        // multiple access paths within Structure\n        navigator.clipboard.writeText(window.location.toString())\n        pushToast({\n          id: 'copy-document-url',\n          status: 'info',\n          title: t('panes.document-operation-results.operation-success_copy-url'),\n        })\n        return true\n      }\n\n      if (item.action === 'inspect') {\n        toggleLegacyInspect(true)\n        return true\n      }\n\n      if (item.action === 'reviewChanges') {\n        handleHistoryOpen()\n        return true\n      }\n\n      if (typeof item.action === 'string' && item.action.startsWith(INSPECT_ACTION_PREFIX)) {\n        const nextInspectorName = item.action.slice(INSPECT_ACTION_PREFIX.length)\n        const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n        if (nextInspector) {\n          if (nextInspector.name === inspectorName) {\n            closeInspector(nextInspector.name)\n          } else {\n            openInspector(nextInspector.name)\n          }\n          return true\n        }\n      }\n\n      return false\n    },\n    [\n      t,\n      closeInspector,\n      handleHistoryOpen,\n      inspectorName,\n      inspectors,\n      openInspector,\n      previewUrl,\n      toggleLegacyInspect,\n      pushToast,\n      telemetry,\n    ],\n  )\n\n  const handleLegacyInspectClose = useCallback(\n    () => toggleLegacyInspect(false),\n    [toggleLegacyInspect],\n  )\n\n  const [openPath, onSetOpenPath] = useState<Path>([])\n  const [fieldGroupState, onSetFieldGroupState] = useState<StateTree<string>>()\n  const [collapsedPaths, onSetCollapsedPath] = useState<StateTree<boolean>>()\n  const [collapsedFieldSets, onSetCollapsedFieldSets] = useState<StateTree<boolean>>()\n\n  const handleOnSetCollapsedPath = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedPath((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleOnSetCollapsedFieldSet = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedFieldSets((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleSetActiveFieldGroup = useCallback(\n    (path: Path, groupName: string) =>\n      onSetFieldGroupState((prevState) => setAtPath(prevState, path, groupName)),\n    [],\n  )\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n  const liveEdit = Boolean(schemaType?.liveEdit)\n  const docId = value._id ? value._id : 'dummy-id'\n  const docPermissionsInput = useMemo(() => {\n    return {\n      ...value,\n      _id: liveEdit ? getPublishedId(docId) : getDraftId(docId),\n    }\n  }, [liveEdit, value, docId])\n\n  const [permissions, isPermissionsLoading] = useDocumentValuePermissions({\n    document: docPermissionsInput,\n    permission: requiredPermission,\n  })\n\n  const isCreateLinked = isSanityCreateLinkedDocument(value)\n  const isNonExistent = !value?._id\n\n  const readOnly = useMemo(() => {\n    const hasNoPermission = !isPermissionsLoading && !permissions?.granted\n    const updateActionDisabled = !isActionEnabled(schemaType!, 'update')\n    const createActionDisabled = isNonExistent && !isActionEnabled(schemaType!, 'create')\n    const reconnecting = connectionState === 'reconnecting'\n    const isLocked = editState.transactionSyncLock?.enabled\n    // in cases where the document has drafts but the schema is live edit,\n    // there is a risk of data loss, so we disable editing in this case\n    const isLiveEditAndDraft = Boolean(liveEdit && editState.draft)\n\n    return (\n      !ready ||\n      revTime !== null ||\n      hasNoPermission ||\n      updateActionDisabled ||\n      createActionDisabled ||\n      reconnecting ||\n      isLocked ||\n      isDeleting ||\n      isDeleted ||\n      isLiveEditAndDraft ||\n      isCreateLinked\n    )\n  }, [\n    isPermissionsLoading,\n    permissions?.granted,\n    schemaType,\n    isNonExistent,\n    connectionState,\n    editState.transactionSyncLock?.enabled,\n    editState.draft,\n    liveEdit,\n    ready,\n    revTime,\n    isDeleting,\n    isDeleted,\n    isCreateLinked,\n  ])\n\n  const formState = useFormState({\n    schemaType: schemaType!,\n    documentValue: displayed,\n    readOnly,\n    comparisonValue: compareValue,\n    focusPath,\n    openPath,\n    collapsedPaths,\n    presence,\n    validation,\n    collapsedFieldSets,\n    fieldGroupState,\n    changesOpen,\n  })\n\n  useEffect(() => {\n    setDocumentMeta({\n      documentId,\n      documentType,\n      schemaType: schemaType!,\n      onChange: handleChange,\n    })\n  }, [documentId, documentType, schemaType, handleChange, setDocumentMeta])\n\n  const formStateRef = useRef(formState)\n  formStateRef.current = formState\n\n  const setOpenPath = useCallback(\n    (path: Path) => {\n      const ops = getExpandOperations(formStateRef.current!, path)\n      ops.forEach((op) => {\n        if (op.type === 'expandPath') {\n          onSetCollapsedPath((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'expandFieldSet') {\n          onSetCollapsedFieldSets((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'setSelectedGroup') {\n          onSetFieldGroupState((prevState) => setAtPath(prevState, op.path, op.groupName))\n        }\n      })\n      onSetOpenPath(path)\n    },\n    [formStateRef],\n  )\n\n  const updatePresence = useCallback(\n    (nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      presenceStore.setLocation([\n        {\n          type: 'document',\n          documentId,\n          path: nextFocusPath,\n          lastActiveAt: new Date().toISOString(),\n          selection: payload?.selection,\n        },\n      ])\n    },\n    [documentId, presenceStore],\n  )\n\n  const updatePresenceThrottled = useMemo(\n    () => throttle(updatePresence, 1000, {leading: true, trailing: true}),\n    [updatePresence],\n  )\n\n  const handleFocus = useCallback(\n    (_nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      const nextFocusPath = pathFor(_nextFocusPath)\n      if (nextFocusPath !== focusPathRef.current) {\n        setFocusPath(pathFor(nextFocusPath))\n        setOpenPath(pathFor(nextFocusPath.slice(0, -1)))\n        focusPathRef.current = nextFocusPath\n        onFocusPath?.(nextFocusPath)\n      }\n      updatePresenceThrottled(nextFocusPath, payload)\n    },\n    [onFocusPath, setOpenPath, updatePresenceThrottled],\n  )\n\n  const documentPane: DocumentPaneContextValue = useMemo(\n    () => ({\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      inspector: currentInspector || null,\n      inspectors,\n      __internal_tasks,\n      onBlur: handleBlur,\n      onChange: handleChange,\n      onFocus: handleFocus,\n      onPathOpen: setOpenPath,\n      onHistoryClose: handleHistoryClose,\n      onHistoryOpen: handleHistoryOpen,\n      onInspectClose: handleLegacyInspectClose,\n      onMenuAction: handleMenuAction,\n      onPaneClose: handlePaneClose,\n      onPaneSplit: handlePaneSplit,\n      onSetActiveFieldGroup: handleSetActiveFieldGroup,\n      onSetCollapsedPath: handleOnSetCollapsedPath,\n      onSetCollapsedFieldSet: handleOnSetCollapsedFieldSet,\n      openInspector,\n      openPath,\n      index,\n      inspectOpen,\n      validation,\n      menuItemGroups: menuItemGroups || [],\n      paneKey,\n      previewUrl,\n      ready,\n      schemaType: schemaType!,\n      isPermissionsLoading,\n      isInitialValueLoading,\n      permissions,\n      setTimelineMode,\n      setTimelineRange,\n      setIsDeleting,\n      isDeleting,\n      isDeleted,\n      timelineError,\n      timelineMode,\n      timelineStore,\n      title,\n      value,\n      views,\n      formState,\n      unstable_languageFilter: languageFilter,\n    }),\n    [\n      __internal_tasks,\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      currentInspector,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      formState,\n      handleBlur,\n      handleChange,\n      handleFocus,\n      handleHistoryClose,\n      handleHistoryOpen,\n      handleLegacyInspectClose,\n      handleMenuAction,\n      handleOnSetCollapsedFieldSet,\n      handleOnSetCollapsedPath,\n      handlePaneClose,\n      handlePaneSplit,\n      handleSetActiveFieldGroup,\n      index,\n      inspectOpen,\n      inspectors,\n      isDeleted,\n      isDeleting,\n      isPermissionsLoading,\n      isInitialValueLoading,\n      languageFilter,\n      menuItemGroups,\n      openInspector,\n      openPath,\n      paneKey,\n      permissions,\n      previewUrl,\n      ready,\n      schemaType,\n      setOpenPath,\n      setTimelineRange,\n      timelineError,\n      timelineMode,\n      timelineStore,\n      title,\n      validation,\n      value,\n      views,\n    ],\n  )\n\n  useEffect(() => {\n    let timeout: ReturnType<typeof setTimeout>\n    if (connectionState === 'reconnecting') {\n      timeout = setTimeout(() => {\n        pushToast({\n          id: 'sanity/structure/reconnecting',\n          status: 'warning',\n          title: t('panes.document-pane-provider.reconnecting.title'),\n        })\n      }, 2000) // 2 seconds, we can iterate on the value\n    }\n    return () => {\n      if (timeout) clearTimeout(timeout)\n    }\n  }, [connectionState, pushToast, t])\n\n  const disableBlurRef = useRef(false)\n\n  // Reset `focusPath` when `documentId` or `params.path` changes\n  useEffect(() => {\n    if (ready && params.path) {\n      const {path, ...restParams} = params\n      const pathFromUrl = resolveKeyedPath(formStateRef.current?.value, pathFromString(path))\n\n      disableBlurRef.current = true\n\n      // Reset focus path when url params path changes\n      if (!deepEquals(focusPathRef.current, pathFromUrl)) {\n        setFocusPath(pathFromUrl)\n        setOpenPath(pathFromUrl)\n        focusPathRef.current = pathFromUrl\n        onFocusPath?.(pathFromUrl)\n      }\n\n      const timeout = setTimeout(() => {\n        disableBlurRef.current = false\n      }, 0)\n\n      // remove the `path`-param from url after we have consumed it as the initial focus path\n      paneRouter.setParams(restParams)\n\n      return () => clearTimeout(timeout)\n    }\n\n    return undefined\n  }, [params, documentId, onFocusPath, setOpenPath, ready, paneRouter])\n\n  return (\n    <DocumentPaneContext.Provider value={documentPane}>{children}</DocumentPaneContext.Provider>\n  )\n})\n\nDocumentPaneProvider.displayName = 'Memo(DocumentPaneProvider)'\n","import {type Path} from '@sanity/types'\nimport {Stack, Text} from '@sanity/ui'\nimport {fromString as pathFromString} from '@sanity/util/paths'\nimport {memo, useMemo} from 'react'\nimport {\n  CopyPasteProvider,\n  ReferenceInputOptionsProvider,\n  SourceProvider,\n  Translate,\n  useDocumentType,\n  useSource,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type DocumentPaneNode} from '../../types'\nimport {ErrorPane} from '../error'\nimport {LoadingPane} from '../loading'\nimport {CommentsWrapper} from './comments'\nimport {useDocumentLayoutComponent} from './document-layout'\nimport {DocumentPaneProvider} from './DocumentPaneProvider'\nimport {type DocumentPaneProviderProps} from './types'\n\ntype DocumentPaneOptions = DocumentPaneNode['options']\n\n/**\n * @internal\n */\nexport const DocumentPane = memo(function DocumentPane(props: DocumentPaneProviderProps) {\n  const {name: parentSourceName} = useSource()\n\n  return (\n    <SourceProvider name={props.pane.source || parentSourceName}>\n      <CopyPasteProvider>\n        <DocumentPaneInner {...props} />\n      </CopyPasteProvider>\n    </SourceProvider>\n  )\n})\n\nfunction DocumentPaneInner(props: DocumentPaneProviderProps) {\n  const {pane, paneKey} = props\n  const {resolveNewDocumentOptions} = useSource().document\n  const paneRouter = usePaneRouter()\n  const options = usePaneOptions(pane.options, paneRouter.params)\n  const {documentType, isLoaded: isDocumentLoaded} = useDocumentType(options.id, options.type)\n\n  const DocumentLayout = useDocumentLayoutComponent()\n\n  // The templates that should be creatable from inside this document pane.\n  // For example, from the \"Create new\" menu in reference inputs.\n  const templateItems = useMemo(() => {\n    return resolveNewDocumentOptions({\n      type: 'document',\n      documentId: options.id,\n      schemaType: options.type,\n    })\n  }, [options.id, options.type, resolveNewDocumentOptions])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n  const isLoaded = isDocumentLoaded && !isTemplatePermissionsLoading\n\n  const providerProps = useMemo(() => {\n    return isLoaded && documentType && options.type !== documentType\n      ? mergeDocumentType(props, options, documentType)\n      : props\n  }, [props, documentType, isLoaded, options])\n\n  const {ReferenceChildLink, handleEditReference, groupIndex, routerPanesState} = paneRouter\n  const childParams = routerPanesState[groupIndex + 1]?.[0].params || {}\n  const routerPanesStateLength = routerPanesState.length\n  const {parentRefPath} = childParams\n\n  const activePath: {path: Path; state: 'selected' | 'pressed' | 'none'} = useMemo(() => {\n    return parentRefPath\n      ? {\n          path: pathFromString(parentRefPath),\n          state:\n            // eslint-disable-next-line no-nested-ternary\n            groupIndex >= routerPanesStateLength - 1\n              ? 'none'\n              : groupIndex >= routerPanesStateLength - 2\n                ? 'selected'\n                : 'pressed',\n        }\n      : {path: [], state: 'none'}\n  }, [parentRefPath, groupIndex, routerPanesStateLength])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (options.type === '*' && !isLoaded) {\n    return (\n      <LoadingPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.loading')}\n      />\n    )\n  }\n\n  if (!documentType) {\n    return (\n      <ErrorPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.title')}\n      >\n        <Stack space={4}>\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-not-found.text\"\n              values={{id: options.id}}\n              components={{Code: ({children}) => <code>{children}</code>}}\n            />\n          </Text>\n        </Stack>\n      </ErrorPane>\n    )\n  }\n\n  return (\n    <DocumentPaneProvider\n      // this needs to be here to avoid formState from being re-used across (incompatible) document types\n      // see https://github.com/sanity-io/sanity/discussions/3794 for a description of the problem\n      key={`${documentType}-${options.id}`}\n      {...providerProps}\n    >\n      {/* NOTE: this is a temporary location for this provider until we */}\n      {/* stabilize the reference input options formally in the form builder */}\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <ReferenceInputOptionsProvider\n        EditReferenceLinkComponent={ReferenceChildLink}\n        onEditReference={handleEditReference}\n        initialValueTemplateItems={templatePermissions}\n        activePath={activePath}\n      >\n        <CommentsWrapper documentId={options.id} documentType={options.type}>\n          <DocumentLayout documentId={options.id} documentType={options.type} />\n        </CommentsWrapper>\n      </ReferenceInputOptionsProvider>\n    </DocumentPaneProvider>\n  )\n}\n\nfunction usePaneOptions(\n  options: DocumentPaneOptions,\n  params: Record<string, string | undefined> = {},\n): DocumentPaneOptions {\n  const templates = useTemplates()\n\n  return useMemo(() => {\n    // The document type is provided, so return\n    if (options.type && options.type !== '*') {\n      return options\n    }\n\n    // Attempt to derive document type from the template configuration\n    const templateName = options.template || params.template\n    const template = templateName ? templates.find((t) => t.id === templateName) : undefined\n    const documentType = template?.schemaType\n\n    // No document type was found in a template\n    if (!documentType) {\n      return options\n    }\n\n    // The template provided the document type, so modify the pane’s `options` property\n    return {...options, type: documentType}\n  }, [options, params.template, templates])\n}\n\nfunction mergeDocumentType(\n  props: DocumentPaneProviderProps,\n  options: DocumentPaneOptions,\n  documentType: string,\n): DocumentPaneProviderProps {\n  return {\n    ...props,\n    pane: {\n      ...props.pane,\n      options: {...options, type: documentType},\n    },\n  }\n}\n","import {type SortOrder} from './types'\n\nexport const PARTIAL_PAGE_LIMIT = 100\nexport const FULL_LIST_LIMIT = 2000\nexport const DEFAULT_ORDERING: SortOrder = {by: [{field: '_updatedAt', direction: 'desc'}]}\nexport const EMPTY_RECORD: Record<string, unknown> = {}\n\nexport const ENABLE_LRU_MEMO = true\n","import {type SanityDocument} from '@sanity/types'\nimport {Box, Container, Flex, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  CommandList,\n  type CommandListRenderItemCallback,\n  ErrorActions,\n  type GeneralPreviewLayoutKey,\n  getPublishedId,\n  LoadingBlock,\n  SanityDefaultPreview,\n  Translate,\n  useSchema,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay, PaneContent, PaneItem, usePane, usePaneLayout} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {FULL_LIST_LIMIT} from './constants'\nimport {type DocumentListPaneItem, type LoadingVariant} from './types'\n\nconst RootBox = styled(Box)<{$opacity?: number}>`\n  position: relative;\n  opacity: ${(props) => props.$opacity || 1};\n  transition: opacity 0.4s;\n`\n\nconst CommandListBox = styled(Box)`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n`\n\ninterface DocumentListPaneContentProps {\n  childItemId?: string\n  error: {message: string} | null\n  filterIsSimpleTypeConstraint: boolean\n  hasMaxItems?: boolean\n  hasSearchQuery: boolean\n  isActive?: boolean\n  isLazyLoading: boolean\n  isLoading: boolean\n  items: DocumentListPaneItem[]\n  layout?: GeneralPreviewLayoutKey\n  loadingVariant?: LoadingVariant\n  onEndReached: () => void\n  onRetry?: () => void\n  paneTitle: string\n  searchInputElement: HTMLInputElement | null\n  showIcons: boolean\n}\n\nconst SKELETON_ITEMS = [...Array(30).keys()]\n\nfunction LoadingView(props: {layout?: GeneralPreviewLayoutKey}) {\n  const {layout} = props\n\n  return (\n    <Stack paddingX={3} paddingY={2} paddingTop={0} space={1}>\n      {SKELETON_ITEMS.map((num) => (\n        <SanityDefaultPreview isPlaceholder layout={layout} key={num} />\n      ))}\n    </Stack>\n  )\n}\n\nexport function DocumentListPaneContent(props: DocumentListPaneContentProps) {\n  const {\n    childItemId,\n    error,\n    filterIsSimpleTypeConstraint,\n    hasMaxItems,\n    hasSearchQuery,\n    isActive,\n    isLazyLoading,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    onEndReached,\n    onRetry,\n    paneTitle,\n    searchInputElement,\n    showIcons,\n  } = props\n\n  const schema = useSchema()\n\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed, index} = usePane()\n  const [shouldRender, setShouldRender] = useState(!collapsed)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleEndReached = useCallback(() => {\n    if (shouldRender) {\n      onEndReached()\n    }\n  }, [onEndReached, shouldRender])\n\n  useEffect(() => {\n    if (collapsed) return undefined\n\n    const timer = setTimeout(() => {\n      setShouldRender(true)\n    }, 0)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [collapsed, items])\n\n  const renderItem = useCallback<CommandListRenderItemCallback<SanityDocument>>(\n    (item, {activeIndex}) => {\n      const publishedId = getPublishedId(item._id)\n      const isSelected = childItemId === publishedId\n      const pressed = !isActive && isSelected\n      const selected = isActive && isSelected\n      const isLastItem = activeIndex === items.length - 1\n      const showSpinner = isLastItem && isLazyLoading\n      const showMaxItemsMessage = isLastItem && hasMaxItems\n\n      return (\n        <>\n          <PaneItem\n            icon={showIcons === false ? false : undefined}\n            id={publishedId}\n            layout={layout}\n            marginBottom={1}\n            pressed={pressed}\n            schemaType={schema.get(item._type)}\n            selected={selected}\n            value={item}\n          />\n\n          {showSpinner && <LoadingBlock />}\n\n          {showMaxItemsMessage && (\n            <Box marginY={1} paddingX={3} paddingY={4}>\n              <Text align=\"center\" muted size={1}>\n                {t('panes.document-list-pane.max-items.text', {limit: FULL_LIST_LIMIT})}\n              </Text>\n            </Box>\n          )}\n        </>\n      )\n    },\n    [childItemId, isActive, items.length, layout, schema, showIcons, hasMaxItems, isLazyLoading, t],\n  )\n\n  const noDocumentsContent = useMemo(() => {\n    if (hasSearchQuery) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Box paddingX={4} paddingY={5}>\n              <Text align=\"center\" muted>\n                {t('panes.document-list-pane.no-documents.text')}\n              </Text>\n            </Box>\n          </Container>\n        </Flex>\n      )\n    }\n\n    return (\n      <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n        <Container width={1}>\n          <Box paddingX={4} paddingY={5}>\n            <Text align=\"center\" muted>\n              {filterIsSimpleTypeConstraint\n                ? t('panes.document-list-pane.no-documents-of-type.text')\n                : t('panes.document-list-pane.no-matching-documents.text')}\n            </Text>\n          </Box>\n        </Container>\n      </Flex>\n    )\n  }, [filterIsSimpleTypeConstraint, hasSearchQuery, t])\n\n  const mainContent = useMemo(() => {\n    if (!shouldRender) {\n      return null\n    }\n\n    if (error) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Stack paddingX={4} paddingY={5} space={4}>\n              <Heading as=\"h3\">{t('panes.document-list-pane.error.title')}</Heading>\n              <Text as=\"p\">\n                <Translate\n                  t={t}\n                  i18nKey=\"panes.document-list-pane.error.text\"\n                  values={{error: error.message}}\n                  components={{Code: ({children}) => <code>{children}</code>}}\n                />\n              </Text>\n              <ErrorActions error={error} eventId={null} onRetry={onRetry} />\n            </Stack>\n          </Container>\n        </Flex>\n      )\n    }\n\n    if (!isLoading && items.length === 0) {\n      return noDocumentsContent\n    }\n\n    if (loadingVariant === 'initial' && isLoading) {\n      return (\n        <Delay ms={300}>\n          <LoadingView layout={layout} />\n        </Delay>\n      )\n    }\n\n    if (loadingVariant === 'spinner' && isLoading) {\n      return null\n    }\n\n    // prevents bug when panes won't render if first rendered while collapsed\n    const key = `${index}-${collapsed}`\n\n    return (\n      <RootBox overflow=\"hidden\" height=\"fill\" $opacity={loadingVariant === 'subtle' ? 0.8 : 1}>\n        <CommandListBox>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={paneTitle}\n            canReceiveFocus\n            inputElement={searchInputElement}\n            itemHeight={51}\n            items={items}\n            key={key}\n            onEndReached={handleEndReached}\n            onlyShowSelectionWhenActive\n            overscan={10}\n            paddingBottom={1}\n            paddingX={3}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </CommandListBox>\n      </RootBox>\n    )\n    // Explicitly don't include `noDocumentsContent` in the deps array, as it's\n    // causing a visual bug where the \"No documents\" message is shown for a split second\n    // when clearing a search query with no results\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    collapsed,\n    error,\n    handleEndReached,\n    index,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    // noDocumentsContent,\n    onRetry,\n    renderItem,\n    searchInputElement,\n    shouldRender,\n  ])\n\n  return (\n    <PaneContent\n      data-testid=\"document-list-pane\"\n      overflow={layoutCollapsed || loadingVariant === 'initial' ? 'hidden' : 'auto'}\n    >\n      {mainContent}\n    </PaneContent>\n  )\n}\n","import {\n  isIndexSegment,\n  isKeySegment,\n  isReferenceSchemaType,\n  type ObjectField,\n  type ObjectFieldType,\n  type ObjectSchemaType,\n  type SanityDocumentLike,\n  type SchemaType,\n} from '@sanity/types'\nimport * as PathUtils from '@sanity/util/paths'\nimport {type ExprNode, parse} from 'groq-js'\nimport {collate, getPublishedId} from 'sanity'\n\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\nexport function getDocumentKey(value: DocumentListPaneItem, index: number): string {\n  return value._id ? getPublishedId(value._id) : `item-${index}`\n}\n\nexport function removePublishedWithDrafts(documents: SanityDocumentLike[]): DocumentListPaneItem[] {\n  return collate(documents).map((entry) => {\n    const doc = entry.draft || entry.published\n    return {\n      ...doc,\n      hasPublished: !!entry.published,\n      hasDraft: !!entry.draft,\n    }\n  }) as any\n}\n\nexport function applyOrderingFunctions(order: SortOrder, schemaType: ObjectSchemaType): SortOrder {\n  const orderBy = order.by.map((by) => {\n    // Skip those that already have a mapper\n    if (by.mapWith) {\n      return by\n    }\n\n    const fieldType = tryResolveSchemaTypeForPath(schemaType, by.field)\n    if (!fieldType) {\n      return by\n    }\n\n    // Note: order matters here, since the jsonType of a date field is `string`,\n    // but we want to apply `datetime()`, not `lower()`\n    if (fieldExtendsType(fieldType, 'datetime')) {\n      return {...by, mapWith: 'dateTime'}\n    }\n\n    if (fieldType.jsonType === 'string') {\n      return {...by, mapWith: 'lower'}\n    }\n\n    return by\n  })\n\n  return orderBy.every((item, index) => item === order.by[index]) ? order : {...order, by: orderBy}\n}\n\nfunction tryResolveSchemaTypeForPath(baseType: SchemaType, path: string): SchemaType | undefined {\n  const pathSegments = PathUtils.fromString(path)\n\n  let current: SchemaType | undefined = baseType\n  for (const segment of pathSegments) {\n    if (!current) {\n      return undefined\n    }\n\n    if (typeof segment === 'string') {\n      current = getFieldTypeByName(current, segment)\n      continue\n    }\n\n    const isArrayAccessor = isKeySegment(segment) || isIndexSegment(segment)\n    if (!isArrayAccessor || current.jsonType !== 'array') {\n      return undefined\n    }\n\n    const [memberType, otherType] = current.of || []\n    if (otherType || !memberType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    if (!isReferenceSchemaType(memberType)) {\n      current = memberType\n      continue\n    }\n\n    const [refType, otherRefType] = memberType.to || []\n    if (otherRefType || !refType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    current = refType\n  }\n\n  return current\n}\n\nfunction getFieldTypeByName(type: SchemaType, fieldName: string): SchemaType | undefined {\n  if (!('fields' in type)) {\n    return undefined\n  }\n\n  const fieldType = type.fields.find((field) => field.name === fieldName)\n  return fieldType ? fieldType.type : undefined\n}\n\nexport function fieldExtendsType(field: ObjectField | ObjectFieldType, ofType: string): boolean {\n  let current: SchemaType | undefined = field.type\n  while (current) {\n    if (current.name === ofType) {\n      return true\n    }\n\n    if (!current.type && current.jsonType === ofType) {\n      return true\n    }\n\n    current = current.type\n  }\n\n  return false\n}\n\n/**\n * Recursively extract static `_type`s from GROQ filter expressions. If the\n * types can't be statically determined then it will return `null`.\n */\n// eslint-disable-next-line complexity\nfunction findTypes(node: ExprNode): Set<string> | null {\n  switch (node.type) {\n    case 'OpCall': {\n      const {left, right} = node\n\n      switch (node.op) {\n        // e.g. `a == b`\n        case '==': {\n          // e.g. `_type == 'value'`\n          if (left.type === 'AccessAttribute' && left.name === '_type' && !left.base) {\n            if (right.type !== 'Value' || typeof right.value !== 'string') return null\n            return new Set([right.value])\n          }\n\n          // e.g. `'value' == _type`\n          if (right.type === 'AccessAttribute' && right.name === '_type' && !right.base) {\n            if (left.type !== 'Value' || typeof left.value !== 'string') return null\n            return new Set([left.value])\n          }\n\n          // otherwise, we can't determine the types statically\n          return null\n        }\n\n        // e.g. `a in b`\n        case 'in': {\n          // if `_type` is not on the left hand side of `in` then it can't be determined\n          if (left.type !== 'AccessAttribute' || left.name !== '_type' || left.base) return null\n          // if the right hand side is not an array then the types can't be determined\n          if (right.type !== 'Array') return null\n\n          const types = new Set<string>()\n          // iterate through all the types\n          for (const element of right.elements) {\n            // if we find a splat, then early return, we can't determine the types\n            if (element.isSplat) return null\n            // if the array element is not just a simple value, then early return\n            if (element.value.type !== 'Value') return null\n            // if the array element value is not a string, then early return\n            if (typeof element.value.value !== 'string') return null\n            // otherwise add the element value to the set of types\n            types.add(element.value.value)\n          }\n\n          // if there were any elements in the types set, return it\n          if (types.size) return types\n          // otherwise, the set of types cannot be determined\n          return null\n        }\n\n        default: {\n          return null\n        }\n      }\n    }\n\n    // groups can just be unwrapped, the AST preserves the order\n    case 'Group': {\n      return findTypes(node.base)\n    }\n\n    // e.g. `_type == 'a' || _type == 'b'`\n    // with Or nodes, if we can't determine the types for either the left or\n    // right hand side then we can't determine the types for any\n    // e.g. `_type == 'a' || isActive`\n    // — can't determine types because `isActive` could be true on another types\n    case 'Or': {\n      const left = findTypes(node.left)\n      if (!left) return null\n\n      const right = findTypes(node.right)\n      if (!right) return null\n\n      return new Set([...left, ...right])\n    }\n\n    // e.g. `_type == 'a' && isActive`\n    // with And nodes, we can determine the types as long as we can determine\n    // the types for one side. We can't determine the types if both are `null`.\n    case 'And': {\n      const left = findTypes(node.left)\n      const right = findTypes(node.right)\n\n      if (!left && !right) return null\n      return new Set([...(left || []), ...(right || [])])\n    }\n\n    default: {\n      return null\n    }\n  }\n}\n\nexport function findStaticTypesInFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] | null {\n  try {\n    const types = findTypes(parse(filter, {params}))\n    if (!types) return null\n\n    return Array.from(types).sort()\n  } catch {\n    // if we couldn't parse the filter, just return `null`\n    return null\n  }\n}\n","import {type SchemaType, type SortOrderingItem} from '@sanity/types'\n\nconst IMPLICIT_SCHEMA_TYPE_FIELDS = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']\n\n// Takes a path array and a schema type and builds a GROQ join every time it enters a reference field\nfunction joinReferences(schemaType: SchemaType, path: string[], strict: boolean = false): string {\n  const [head, ...tail] = path\n\n  if (!('fields' in schemaType)) {\n    return ''\n  }\n\n  const schemaField = schemaType.fields.find((field) => field.name === head)\n  if (!schemaField) {\n    if (!IMPLICIT_SCHEMA_TYPE_FIELDS.includes(head)) {\n      const errorMessage = `The current ordering config targeted the nonexistent field \"${head}\" on schema type \"${schemaType.name}\". It should be one of ${schemaType.fields.map((field) => field.name).join(', ')}`\n      if (strict) {\n        throw new Error(errorMessage)\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage)\n      }\n    }\n    return ''\n  }\n\n  if ('to' in schemaField.type && schemaField.type.name === 'reference') {\n    const refTypes = schemaField.type.to\n    return `${head}->{${refTypes.map((refType) => joinReferences(refType, tail)).join(',')}}`\n  }\n\n  const tailFields = tail.length > 0 && joinReferences(schemaField.type, tail)\n  const tailWrapper = tailFields ? `{${tailFields}}` : ''\n  return tail.length > 0 ? `${head}${tailWrapper}` : head\n}\n\nexport function getExtendedProjection(\n  schemaType: SchemaType,\n  orderBy: SortOrderingItem[],\n  strict: boolean = false,\n): string {\n  return orderBy\n    .map((ordering) => joinReferences(schemaType, ordering.field.split('.'), strict))\n    .join(', ')\n}\n","import {type SanityClient} from '@sanity/client'\nimport {\n  asyncScheduler,\n  defer,\n  map,\n  merge,\n  mergeMap,\n  type Observable,\n  of,\n  partition,\n  share,\n  take,\n  throttleTime,\n  throwError,\n  timer,\n} from 'rxjs'\nimport {exhaustMapWithTrailing} from 'rxjs-exhaustmap-with-trailing'\nimport {\n  createSearch,\n  createSWR,\n  getSearchableTypes,\n  type SanityDocumentLike,\n  type Schema,\n  type SearchStrategy,\n} from 'sanity'\n\nimport {getExtendedProjection} from '../../structureBuilder/util/getExtendedProjection'\nimport {type SortOrder} from './types'\n\ninterface ListenQueryOptions {\n  client: SanityClient\n  filter: string\n  limit: number\n  params: Record<string, unknown>\n  schema: Schema\n  searchQuery: string\n  sort: SortOrder\n  staticTypeNames?: string[] | null\n  maxFieldDepth?: number\n  searchStrategy?: SearchStrategy\n}\n\nexport interface SearchQueryResult {\n  fromCache: boolean\n  documents: SanityDocumentLike[]\n}\n\nconst swr = createSWR<SanityDocumentLike[]>({maxSize: 100})\n\nexport function listenSearchQuery(options: ListenQueryOptions): Observable<SearchQueryResult> {\n  const {\n    client,\n    schema,\n    sort,\n    limit,\n    params,\n    filter,\n    searchQuery,\n    staticTypeNames,\n    maxFieldDepth,\n    searchStrategy,\n  } = options\n  const sortBy = sort.by\n  const extendedProjection = sort?.extendedProjection\n\n  // Listen for changes with the given filter and params, and whenever a change occurs, we want to\n  // re-fetch the documents that match the search query (see below).\n  // We use a separate listener since the search query is too large to use in a listen query.\n  const events$ = defer(() => {\n    return client.listen(`*[${filter}]`, params, {\n      events: ['welcome', 'mutation', 'reconnect'],\n      includeResult: false,\n      visibility: 'query',\n    })\n  }).pipe(\n    mergeMap((ev, i) => {\n      const isFirst = i === 0\n      if (isFirst && ev.type !== 'welcome') {\n        // If the first event is not welcome, it is most likely a reconnect and\n        // if it's not a reconnect something is very wrong and we should throw.\n        return throwError(\n          () =>\n            new Error(\n              ev.type === 'reconnect'\n                ? 'Could not establish EventSource connection'\n                : `Received unexpected type of first event \"${ev.type}\"`,\n            ),\n        )\n      }\n      return of(ev)\n    }),\n    share(),\n  )\n\n  const [welcome$, mutationAndReconnect$] = partition(events$, (ev) => ev.type === 'welcome')\n\n  const swrKey = JSON.stringify({filter, limit, params, searchQuery, sort, staticTypeNames})\n\n  return merge(\n    welcome$.pipe(take(1)),\n    mutationAndReconnect$.pipe(throttleTime(1000, asyncScheduler, {leading: true, trailing: true})),\n  ).pipe(\n    exhaustMapWithTrailing((event) => {\n      // Get the types names to use for searching.\n      // If we have a static list of types, we can skip fetching the types and use the static list.\n      const typeNames$ = staticTypeNames\n        ? of(staticTypeNames)\n        : client.observable.fetch(`array::unique(*[${filter}][]._type)`, params)\n\n      // Use the type names to create a search query and fetch the documents that match the query.\n      return typeNames$.pipe(\n        mergeMap((typeNames: string[]) => {\n          const types = getSearchableTypes(schema, staticTypeNames || []).filter((type) => {\n            if (typeNames.includes(type.name)) {\n              // make a call to getExtendedProjection in strict mode to verify that all fields are\n              // known. This method will throw an exception if there are any unknown fields specified\n              // in the sort by list\n              getExtendedProjection(type, sort.by, true)\n              return true\n            }\n            return false\n          })\n\n          const search = createSearch(types, client, {\n            filter,\n            params,\n            strategy: searchStrategy,\n            maxDepth: maxFieldDepth,\n          })\n\n          const doFetch = () => {\n            const searchTerms = {\n              query: searchQuery || '',\n              types,\n            }\n\n            const searchOptions = {\n              __unstable_extendedProjection: extendedProjection,\n              comments: [`findability-source: ${searchQuery ? 'list-query' : 'list'}`],\n              limit,\n              skipSortByScore: true,\n              sort: sortBy,\n            }\n\n            return search(searchTerms, searchOptions).pipe(\n              map((result) =>\n                // eslint-disable-next-line max-nested-callbacks\n                result.hits.map(({hit}) => hit),\n              ),\n            )\n          }\n\n          if (event.type === 'mutation' && event.visibility !== 'query') {\n            // Even though the listener request specifies visibility=query, the events are not guaranteed to be delivered with visibility=query\n            // If the event we are responding to arrives with visibility != query, we add a little delay to allow for the updated document to be available for queries\n            // See https://www.sanity.io/docs/listening#visibility-c4786e55c3ff\n            return timer(1200).pipe(mergeMap(doFetch))\n          }\n          return doFetch()\n        }),\n      )\n    }),\n    swr(swrKey),\n    map(({fromCache, value}) => ({fromCache, documents: value})),\n  )\n}\n","import {observableCallback} from 'observable-callback'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, fromEvent, merge, of} from 'rxjs'\nimport {\n  catchError,\n  filter,\n  map,\n  mergeMap,\n  scan,\n  share,\n  shareReplay,\n  take,\n  takeUntil,\n  withLatestFrom,\n} from 'rxjs/operators'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  useClient,\n  useSchema,\n  useSearchMaxFieldDepth,\n  useWorkspace,\n} from 'sanity'\n\nimport {DEFAULT_ORDERING, FULL_LIST_LIMIT, PARTIAL_PAGE_LIMIT} from './constants'\nimport {findStaticTypesInFilter, removePublishedWithDrafts} from './helpers'\nimport {listenSearchQuery} from './listenSearchQuery'\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\ninterface UseDocumentListOpts {\n  apiVersion?: string\n  filter: string\n  params: Record<string, unknown>\n  searchQuery: string | null\n  sortOrder?: SortOrder\n}\n\ninterface DocumentListState {\n  error: {message: string} | null\n  isLoadingFullList: boolean\n  isLoading: boolean\n  fromCache?: boolean\n  items: DocumentListPaneItem[]\n}\n\nconst INITIAL_QUERY_STATE: DocumentListState = {\n  error: null,\n  isLoading: true,\n  isLoadingFullList: false,\n  fromCache: false,\n  items: [],\n}\n\ninterface UseDocumentListHookValue extends DocumentListState {\n  onRetry: () => void\n  onLoadFullList: () => void\n}\n\n/**\n * @internal\n */\nexport function useDocumentList(opts: UseDocumentListOpts): UseDocumentListHookValue {\n  const {filter: searchFilter, params: paramsProp, sortOrder, searchQuery, apiVersion} = opts\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const {strategy: searchStrategy} = useWorkspace().search\n  const schema = useSchema()\n  const maxFieldDepth = useSearchMaxFieldDepth()\n\n  // Get the type name from the filter, if it is a simple type filter.\n  const typeNameFromFilter = useMemo(\n    () => findStaticTypesInFilter(searchFilter, paramsProp),\n    [searchFilter, paramsProp],\n  )\n\n  const [onRetry$, onRetry] = useMemo(() => observableCallback(), [])\n  const [onFetchFullList$, onLoadFullList] = useMemo(() => observableCallback(), [])\n\n  const queryResults$ = useMemo(() => {\n    const listenSearchQueryArgs = {\n      client,\n      filter: searchFilter,\n      limit: PARTIAL_PAGE_LIMIT,\n      params: paramsProp,\n      schema,\n      searchQuery: searchQuery || '',\n      sort: sortOrder || DEFAULT_ORDERING,\n      staticTypeNames: typeNameFromFilter,\n      maxFieldDepth,\n      searchStrategy,\n    }\n\n    const partialList$ = listenSearchQuery(listenSearchQueryArgs).pipe(\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n\n    // we want to fetch the full list if the last result of the partial list is at the limit\n    const fullList$ = onFetchFullList$.pipe(\n      withLatestFrom(partialList$),\n      filter(([, result]) => result?.documents.length === PARTIAL_PAGE_LIMIT),\n      // we want to set up the full list listener only once\n      take(1),\n      mergeMap(() =>\n        concat(\n          of({type: 'loadFullList' as const}),\n          listenSearchQuery({...listenSearchQueryArgs, limit: FULL_LIST_LIMIT}).pipe(\n            map((result) => ({type: 'result' as const, result})),\n          ),\n        ),\n      ),\n      share(),\n    )\n\n    // The combined search results from both partial page and full list\n    return merge(\n      partialList$.pipe(\n        map((result) => ({\n          type: 'result' as const,\n          result,\n        })),\n        // when the full list listener kicks off, we want to stop the partial list listener\n        takeUntil(fullList$),\n      ),\n      fullList$,\n    ).pipe(\n      catchError((err: unknown, caught$) => {\n        return concat(\n          of({type: 'error' as const, error: safeError(err)}),\n          merge(fromEvent(window, 'online'), onRetry$).pipe(\n            take(1),\n            mergeMap(() => caught$),\n          ),\n        )\n      }),\n      scan((prev, event) => {\n        if (event.type === 'error') {\n          return {\n            ...prev,\n            error: event.error,\n          }\n        }\n        if (event.type === 'result') {\n          return {\n            ...prev,\n            error: null,\n            fromCache: event.result.fromCache,\n            isLoading: false,\n            items: removePublishedWithDrafts(event.result.documents),\n            isLoadingFullList: false,\n          }\n        }\n        if (event.type === 'loadFullList') {\n          return {\n            ...prev,\n            error: null,\n            isLoadingFullList: true,\n          }\n        }\n        throw new Error('Unexpected')\n      }, INITIAL_QUERY_STATE),\n    )\n  }, [\n    client,\n    searchFilter,\n    paramsProp,\n    schema,\n    searchQuery,\n    sortOrder,\n    typeNameFromFilter,\n    maxFieldDepth,\n    searchStrategy,\n    onFetchFullList$,\n    onRetry$,\n  ])\n\n  const {error, items, isLoading, fromCache, isLoadingFullList} = useObservable(\n    queryResults$,\n    INITIAL_QUERY_STATE,\n  )\n\n  return {\n    error,\n    onRetry,\n    isLoading,\n    items,\n    fromCache,\n    onLoadFullList,\n    isLoadingFullList,\n  }\n}\n\n// todo: candidate for re-use\nconst nonErrorThrownWarning = `[WARNING: This was thrown as a non-error. Only Error instances should be thrown]`\nfunction safeError(thrown: unknown): Error {\n  if (thrown instanceof Error) {\n    return thrown\n  }\n  if (typeof thrown === 'object' && thrown !== null) {\n    if ('message' in thrown && typeof thrown.message === 'string') {\n      return new Error(`${thrown.message} ${nonErrorThrownWarning}`)\n    }\n    return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n  }\n  return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n}\n","import {SearchIcon, SpinnerIcon} from '@sanity/icons'\nimport {Box, TextInput} from '@sanity/ui'\nimport {memo, useCallback, useEffect, useMemo, useState} from 'react'\nimport {useObservableEvent} from 'react-rx'\nimport {debounce, map, type Observable, of, tap, timer} from 'rxjs'\nimport {\n  type GeneralPreviewLayoutKey,\n  useI18nText,\n  useSchema,\n  useTranslation,\n  useUnique,\n} from 'sanity'\nimport {keyframes, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {EMPTY_RECORD, FULL_LIST_LIMIT} from './constants'\nimport {DocumentListPaneContent} from './DocumentListPaneContent'\nimport {applyOrderingFunctions, findStaticTypesInFilter} from './helpers'\nimport {useShallowUnique} from './PaneContainer'\nimport {type LoadingVariant, type SortOrder} from './types'\nimport {useDocumentList} from './useDocumentList'\n\n/**\n * @internal\n */\nexport type DocumentListPaneProps = BaseStructureToolPaneProps<'documentList'> & {\n  sortOrder?: SortOrder\n  layout?: Exclude<GeneralPreviewLayoutKey, 'sheetList'>\n}\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 0.1;\n  }\n  100% {\n    opacity: 0.4;\n  }\n`\n\nconst AnimatedSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 500ms linear infinite;\n`\n\nconst SubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 1500ms linear infinite;\n  opacity: 0.4;\n`\n\nconst DelayedSubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation:\n    ${rotate} 1500ms linear infinite,\n    ${fadeIn} 1000ms linear;\n  opacity: 0.4;\n`\n\n/**\n * @internal\n */\n\nexport const DocumentListPane = memo(function DocumentListPane(props: DocumentListPaneProps) {\n  const {childItemId, isActive, pane, paneKey, sortOrder: sortOrderRaw, layout} = props\n  const schema = useSchema()\n\n  const {displayOptions, options} = pane\n  const {apiVersion, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const showIcons = displayOptions?.showIcons !== false\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {title} = useI18nText(pane)\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const [searchInputValue, setSearchInputValue] = useState<string>('')\n  const [searchInputElement, setSearchInputElement] = useState<HTMLInputElement | null>(null)\n\n  const sortWithOrderingFn =\n    typeName && sortOrderRaw\n      ? applyOrderingFunctions(sortOrderRaw, schema.get(typeName) as any)\n      : sortOrderRaw\n\n  const sortOrder = useUnique(sortWithOrderingFn)\n\n  const {error, isLoadingFullList, isLoading, items, fromCache, onLoadFullList, onRetry} =\n    useDocumentList({\n      apiVersion,\n      filter,\n      params,\n      searchQuery: searchQuery?.trim(),\n      sortOrder,\n    })\n\n  const handleQueryChange = useObservableEvent(\n    (event$: Observable<React.ChangeEvent<HTMLInputElement>>) => {\n      return event$.pipe(\n        map((event) => event.target.value),\n        tap(setSearchInputValue),\n        debounce((value) => (value === '' ? of('') : timer(300))),\n        tap(setSearchQuery),\n      )\n    },\n  )\n\n  const handleClearSearch = useCallback(() => {\n    setSearchQuery('')\n    setSearchInputValue('')\n  }, [])\n\n  const handleSearchKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Escape') {\n        handleClearSearch()\n      }\n    },\n    [handleClearSearch],\n  )\n\n  const [enableSearchSpinner, setEnableSearchSpinner] = useState<string | void>()\n\n  useEffect(() => {\n    if (!enableSearchSpinner && !isLoading) {\n      setEnableSearchSpinner(paneKey)\n    }\n  }, [enableSearchSpinner, isLoading, paneKey])\n\n  useEffect(() => {\n    // Clear search field and disable search spinner\n    // when switching between panes (i.e. when paneKey changes).\n    handleClearSearch()\n    setEnableSearchSpinner()\n  }, [paneKey, handleClearSearch])\n\n  const loadingVariant: LoadingVariant = useMemo(() => {\n    if (isLoading && enableSearchSpinner === paneKey) {\n      return 'spinner'\n    }\n    if (fromCache) {\n      return 'subtle'\n    }\n\n    return 'initial'\n  }, [enableSearchSpinner, fromCache, isLoading, paneKey])\n\n  const textInputIcon = useMemo(() => {\n    if (loadingVariant === 'spinner') {\n      return AnimatedSpinnerIcon\n    }\n    if (searchInputValue && loadingVariant === 'subtle') {\n      return SubtleSpinnerIcon\n    }\n    return SearchIcon\n  }, [loadingVariant, searchInputValue])\n\n  return (\n    <>\n      <Box paddingX={3} paddingBottom={3}>\n        <TextInput\n          aria-label={t('panes.document-list-pane.search-input.aria-label')}\n          autoComplete=\"off\"\n          border={false}\n          clearButton={Boolean(searchQuery)}\n          disabled={Boolean(error)}\n          fontSize={[2, 2, 1]}\n          icon={textInputIcon}\n          iconRight={\n            loadingVariant === 'subtle' && !searchInputValue ? DelayedSubtleSpinnerIcon : null\n          }\n          onChange={handleQueryChange}\n          onClear={handleClearSearch}\n          onKeyDown={handleSearchKeyDown}\n          padding={2}\n          placeholder={t('panes.document-list-pane.search-input.placeholder')}\n          radius={2}\n          ref={setSearchInputElement}\n          spellCheck={false}\n          value={searchInputValue}\n        />\n      </Box>\n      <DocumentListPaneContent\n        childItemId={childItemId}\n        error={error}\n        filterIsSimpleTypeConstraint={!!typeName}\n        hasMaxItems={items.length === FULL_LIST_LIMIT}\n        hasSearchQuery={Boolean(searchQuery)}\n        isActive={isActive}\n        isLazyLoading={isLoadingFullList}\n        isLoading={isLoading}\n        items={items}\n        key={paneKey}\n        layout={layout}\n        loadingVariant={loadingVariant}\n        onEndReached={onLoadFullList}\n        onRetry={onRetry}\n        paneTitle={title}\n        searchInputElement={searchInputElement}\n        showIcons={showIcons}\n      />\n    </>\n  )\n})\n","import {ArrowLeftIcon} from '@sanity/icons'\nimport {memo, type ReactNode, useMemo} from 'react'\nimport {type GeneralPreviewLayoutKey, type InitialValueTemplateItem} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../ui-components'\nimport {\n  BackLink,\n  PaneHeader as StructurePaneHeader,\n  PaneHeaderActions,\n  usePane,\n} from '../../components'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {type SortOrder} from './types'\n\ninterface PaneHeaderProps {\n  contentAfter?: ReactNode\n  index: number\n  initialValueTemplates?: InitialValueTemplateItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  menuItems?: PaneMenuItem[]\n  setLayout: (layout: GeneralPreviewLayoutKey) => void\n  setSortOrder: (sortOrder: SortOrder) => void\n  title: string\n}\n\nexport const PaneHeader = memo(\n  ({\n    contentAfter,\n    index,\n    initialValueTemplates = [],\n    menuItemGroups = [],\n    menuItems = [],\n    setLayout,\n    setSortOrder,\n    title,\n  }: PaneHeaderProps) => {\n    const {features} = useStructureTool()\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    const actionHandlers = useMemo((): Record<string, StructureToolPaneActionHandler> => {\n      return {\n        setLayout: ({layout: value}: {layout: GeneralPreviewLayoutKey}) => {\n          setLayout(value)\n        },\n        setSortOrder: (sort: SortOrder) => {\n          setSortOrder(sort)\n        },\n      }\n    }, [setLayout, setSortOrder])\n\n    return (\n      <TooltipDelayGroupProvider>\n        <StructurePaneHeader\n          actions={\n            <PaneHeaderActions\n              initialValueTemplateItems={initialValueTemplates}\n              actionHandlers={actionHandlers}\n              menuItemGroups={menuItemGroups}\n              menuItems={menuItems}\n            />\n          }\n          backButton={\n            features.backButton &&\n            index > 0 && (\n              <Button\n                as={BackLink}\n                data-as=\"a\"\n                icon={ArrowLeftIcon}\n                mode=\"bleed\"\n                tooltipProps={{content: 'Back'}}\n              />\n            )\n          }\n          contentAfter={contentAfter}\n          tabIndex={tabIndex}\n          title={title}\n        />\n      </TooltipDelayGroupProvider>\n    )\n  },\n)\n\nPaneHeader.displayName = 'Memo(PaneHeader)'\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {type SanityDocument} from '@sanity/client'\nimport {Checkbox} from '@sanity/ui'\nimport {type CellContext} from '@tanstack/react-table'\nimport {type MouseEvent, useCallback} from 'react'\n\nexport function DocumentSheetListSelect(props: CellContext<SanityDocument, unknown>) {\n  const {row, table} = props\n\n  const {selectedAnchor, setSelectedAnchor} = table.options.meta || {}\n\n  const handleOnClick = useCallback(\n    (e: MouseEvent<HTMLInputElement>) => {\n      if (e.shiftKey && selectedAnchor !== null && selectedAnchor !== undefined) {\n        const shiftClickIndex = row.index\n        const lowerIndex = shiftClickIndex < selectedAnchor ? shiftClickIndex : selectedAnchor\n        const upperIndex = shiftClickIndex < selectedAnchor ? selectedAnchor : shiftClickIndex\n\n        const additionalSelectedRows = table\n          .getRowModel()\n          .flatRows.slice(lowerIndex, upperIndex + 1)\n          .map(({id}) => id)\n\n        const currentSelectedRows = table.getSelectedRowModel().rows.map(({id}) => id)\n        table.setRowSelection(() =>\n          [...additionalSelectedRows, ...currentSelectedRows].reduce(\n            (nextSelectedRows, rowId) => ({...nextSelectedRows, [rowId]: true}),\n            {},\n          ),\n        )\n      } else if (setSelectedAnchor) {\n        const isRowCurrentlySelected = row.getIsSelected()\n        if (isRowCurrentlySelected) {\n          // about to unselect so invalidate current anchor\n          setSelectedAnchor(null)\n        } else {\n          // override anchor with new selection index\n          setSelectedAnchor(row.index)\n        }\n\n        row.toggleSelected()\n      }\n    },\n    [selectedAnchor, row, setSelectedAnchor, table],\n  )\n\n  return (\n    <Checkbox\n      style={{paddingLeft: 4}}\n      checked={props.row.getIsSelected()}\n      disabled={!props.row.getCanSelect()}\n      // onChange doesn't have shiftKey in event, but want to control this checkbox\n      // need to define noop onChange to suppress the warning\n      // eslint-disable-next-line react/jsx-no-bind\n      onChange={() => null}\n      onClick={handleOnClick}\n    />\n  )\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {type Table} from '@tanstack/react-table'\nimport {type ReactNode, useCallback, useContext, useEffect, useMemo, useState} from 'react'\nimport {DocumentSheetListContext} from 'sanity/_singletons'\n\ninterface DocumentSheetListProviderProps {\n  children?: ReactNode\n  table: Table<SanityDocument>\n}\n\ntype SelectedCellDetails = {\n  colId: string\n  rowIndex: number\n  state: 'focused' | 'selected'\n} | null\n\n/** @internal */\nexport interface DocumentSheetListContextValue {\n  focusAnchorCell: () => void\n  resetFocusSelection: () => void\n  setSelectedAnchorCell: (colId: string, rowIndex: number) => void\n  getStateByCellId: (\n    colId: string,\n    rowIndex: number,\n  ) => 'focused' | 'selectedAnchor' | 'selectedRange' | null\n  submitFocusedCell: () => void\n}\n\n/** @internal */\nexport const useDocumentSheetListContext = (): DocumentSheetListContextValue => {\n  const context = useContext(DocumentSheetListContext)\n\n  if (context === undefined) {\n    throw new Error('useDocumentSheetListContext must be used within an DocumentSheetListProvider')\n  }\n  return context\n}\n\n/** @internal */\nexport function DocumentSheetListProvider({\n  children,\n  table,\n}: DocumentSheetListProviderProps): ReactNode {\n  const [selectedAnchorCellDetails, setSelectedAnchorCellDetails] =\n    useState<SelectedCellDetails>(null)\n  const [selectedRangeCellIndexes, setSelectedRangeCellIndexes] = useState<number[]>([])\n\n  const clearAndSetFocusSelection = useCallback(\n    (nextAnchorDetails: SelectedCellDetails = null) => {\n      if (\n        selectedAnchorCellDetails?.state === 'focused' &&\n        document.activeElement instanceof HTMLElement\n      ) {\n        document.activeElement.blur()\n      }\n\n      setSelectedAnchorCellDetails(nextAnchorDetails)\n      setSelectedRangeCellIndexes([])\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const resetFocusSelection = useCallback(\n    () => clearAndSetFocusSelection(),\n    [clearAndSetFocusSelection],\n  )\n\n  const changeSelectionColumn = useCallback(\n    (direction: 'left' | 'right') => {\n      if (!selectedAnchorCellDetails) return\n\n      const visibleColumns = table.getVisibleLeafColumns()\n      const columnIndexAfterMove =\n        visibleColumns.findIndex((col) => col.id === selectedAnchorCellDetails.colId) +\n        (direction === 'left' ? -1 : 1)\n\n      if (columnIndexAfterMove < 0 || columnIndexAfterMove >= visibleColumns.length) return\n\n      clearAndSetFocusSelection({\n        colId: visibleColumns[columnIndexAfterMove].id,\n        rowIndex: selectedAnchorCellDetails.rowIndex,\n        state: 'selected',\n      })\n    },\n    [clearAndSetFocusSelection, selectedAnchorCellDetails, table],\n  )\n\n  const changeSelectionRange = useCallback(\n    (direction: 'up' | 'down') => {\n      if (!selectedAnchorCellDetails) return\n\n      setSelectedRangeCellIndexes((previousSelection) => {\n        const {rowIndex: anchorIndex} = selectedAnchorCellDetails\n        const getNextIndex = (startingIndex: number) =>\n          startingIndex + (direction === 'down' ? 1 : -1)\n        // if no cells are selected, select the cell in the direction\n        if (!previousSelection.length) {\n          const firstSelectedIndex = getNextIndex(anchorIndex)\n          if (firstSelectedIndex < 0) return []\n          return [firstSelectedIndex]\n        }\n        const lastIndexSelected = previousSelection[previousSelection.length - 1]\n        const nextIndex = getNextIndex(lastIndexSelected)\n\n        // if the cell in the direction is out of bounds, return the previous selection\n        if (nextIndex < 0) return previousSelection\n\n        // if the cell in the direction is the same as the focused cell, deselect all cells\n        if (nextIndex === anchorIndex) return []\n\n        // if the cell in the direction is already selected, deselect the last selected cell\n        if (previousSelection.includes(nextIndex)) {\n          return previousSelection.slice(0, -1)\n        }\n\n        return [...previousSelection, nextIndex]\n      })\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const setSelectedAnchorCell = useCallback(\n    (colId: string, rowIndex: number) => {\n      clearAndSetFocusSelection({colId, rowIndex, state: 'selected'})\n    },\n    [clearAndSetFocusSelection],\n  )\n\n  const handleEscapePress = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n    if (selectedRangeCellIndexes.length) {\n      // only clear selected range if it exists\n      setSelectedRangeCellIndexes([])\n    } else {\n      const nextAnchorCellDetails: SelectedCellDetails =\n        selectedAnchorCellDetails.state === 'selected'\n          ? null\n          : {\n              ...selectedAnchorCellDetails,\n              state: 'selected',\n            }\n      clearAndSetFocusSelection(nextAnchorCellDetails)\n    }\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails, selectedRangeCellIndexes.length])\n\n  const handleUpDownKey = useCallback(\n    (isShiftKey: boolean, key: string) => {\n      if (!selectedAnchorCellDetails) return\n\n      const direction = key === 'ArrowDown' ? 'down' : 'up'\n      const offset = direction === 'down' ? 1 : -1\n\n      if (isShiftKey) {\n        changeSelectionRange(direction)\n      } else {\n        const newSelectedCellRowIndex = selectedAnchorCellDetails.rowIndex + offset\n        if (newSelectedCellRowIndex < 0) return\n\n        setSelectedAnchorCell(selectedAnchorCellDetails.colId, newSelectedCellRowIndex)\n      }\n    },\n    [changeSelectionRange, selectedAnchorCellDetails, setSelectedAnchorCell],\n  )\n\n  const handleAnchorKeydown = useCallback(\n    (event: KeyboardEvent) => {\n      if (!selectedAnchorCellDetails) return\n\n      const {key, shiftKey} = event\n\n      switch (key) {\n        case 'Shift':\n          break // shift allow should do nothing\n\n        case 'Escape':\n          handleEscapePress()\n          break\n\n        case 'ArrowDown':\n        case 'ArrowUp':\n          event.preventDefault()\n          handleUpDownKey(shiftKey, key)\n          break\n\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          // when cell is focused, arrows should have default behavior\n          // only prevent default when cell is selected\n          if (selectedAnchorCellDetails.state === 'selected') {\n            event.preventDefault()\n            changeSelectionColumn(key === 'ArrowLeft' ? 'left' : 'right')\n          }\n          break\n\n        default:\n          break\n      }\n    },\n    [selectedAnchorCellDetails, handleEscapePress, handleUpDownKey, changeSelectionColumn],\n  )\n\n  const handleAnchorClick = useCallback(\n    (event: MouseEvent) => {\n      if (!selectedAnchorCellDetails) return\n      const isClickInAnchorCell = document\n        .getElementById(\n          `cell-${selectedAnchorCellDetails.colId}-${selectedAnchorCellDetails.rowIndex}`,\n        )\n        ?.contains(event.target as Node)\n\n      if (!isClickInAnchorCell) resetFocusSelection()\n    },\n    [resetFocusSelection, selectedAnchorCellDetails],\n  )\n\n  useEffect(() => {\n    if (selectedAnchorCellDetails) {\n      document.addEventListener('keydown', handleAnchorKeydown)\n      document.addEventListener('click', handleAnchorClick)\n    }\n\n    return () => {\n      if (selectedAnchorCellDetails) {\n        document.removeEventListener('keydown', handleAnchorKeydown)\n        document.removeEventListener('click', handleAnchorClick)\n      }\n    }\n  }, [handleAnchorClick, handleAnchorKeydown, selectedAnchorCellDetails])\n\n  const focusAnchorCell = useCallback(\n    () =>\n      setSelectedAnchorCellDetails((anchorCellDetails) => {\n        if (!anchorCellDetails) return null\n\n        return {...anchorCellDetails, state: 'focused'}\n      }),\n    [],\n  )\n\n  const getStateByCellId = useCallback(\n    (colId: string, rowIndex: number) => {\n      if (selectedAnchorCellDetails?.colId !== colId) return null\n\n      if (selectedAnchorCellDetails.rowIndex === rowIndex)\n        return selectedAnchorCellDetails.state === 'focused' ? 'focused' : 'selectedAnchor'\n\n      if (selectedRangeCellIndexes.includes(rowIndex)) return 'selectedRange'\n\n      return null\n    },\n    [selectedAnchorCellDetails, selectedRangeCellIndexes],\n  )\n\n  const submitFocusedCell = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n\n    clearAndSetFocusSelection({\n      colId: selectedAnchorCellDetails.colId,\n      rowIndex: selectedAnchorCellDetails.rowIndex + 1,\n      state: 'selected',\n    })\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails])\n\n  const value = useMemo<DocumentSheetListContextValue>(\n    () => ({\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    }),\n    [\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    ],\n  )\n\n  return (\n    <DocumentSheetListContext.Provider value={value}>{children}</DocumentSheetListContext.Provider>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\nimport {type ObjectFieldType} from '@sanity/types'\nimport {Select, TextInput} from '@sanity/ui'\nimport {type Cell, type CellContext, flexRender} from '@tanstack/react-table'\nimport {type MouseEventHandler, useCallback, useEffect, useRef, useState} from 'react'\nimport {type SanityDocument} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentSheetListContext} from './DocumentSheetListProvider'\n\nconst DataCell = styled.td<{width: number}>`\n  display: flex;\n  overflow: hidden;\n  box-sizing: border-box;\n  width: ${({width}) => width}px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-bg-color);\n`\n\nconst PinnedDataCell = styled(DataCell)`\n  position: sticky;\n  z-index: 2;\n`\n\ninterface SheetListCellInnerProps extends CellContext<SanityDocument, unknown> {\n  fieldType: ObjectFieldType\n}\n\ntype CellInputElement = HTMLInputElement | HTMLSelectElement\ntype InputRef = CellInputElement | null\n\n/** @internal */\nexport function SheetListCellInner(props: SheetListCellInnerProps) {\n  const {getValue, column, row, fieldType} = props\n  const cellId = `cell-${column.id}-${row.index}`\n  const [renderValue, setRenderValue] = useState<string>(getValue() as string)\n  const [isDirty, setIsDirty] = useState(false)\n  const inputRef = useRef<InputRef>(null)\n  const {\n    focusAnchorCell,\n    resetFocusSelection,\n    setSelectedAnchorCell,\n    getStateByCellId,\n    submitFocusedCell,\n  } = useDocumentSheetListContext()\n  const cellState = getStateByCellId(column.id, row.index)\n\n  const handleOnFocus = useCallback(() => {\n    // reselect in cases where focus achieved without initial mousedown\n    setSelectedAnchorCell(column.id, row.index)\n    focusAnchorCell()\n  }, [column.id, focusAnchorCell, row.index, setSelectedAnchorCell])\n  const {patchDocument} = props.table.options.meta || {}\n\n  const handleProgrammaticFocus = () => {\n    inputRef.current?.focus()\n    if (inputRef.current instanceof HTMLInputElement) {\n      inputRef.current.select()\n    }\n  }\n\n  const handleOnMouseDown: MouseEventHandler<CellInputElement> = (event) => {\n    if (event.detail === 2) {\n      handleProgrammaticFocus()\n    } else {\n      event.preventDefault()\n      setSelectedAnchorCell(column.id, row.index)\n    }\n  }\n\n  const handleOnEnterDown = useCallback(\n    (event: KeyboardEvent) => {\n      const {key} = event\n      if (key === 'Enter') {\n        if (cellState === 'selectedAnchor') handleProgrammaticFocus()\n        if (cellState === 'focused') submitFocusedCell()\n      }\n    },\n    [cellState, submitFocusedCell],\n  )\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsDirty(true)\n    setRenderValue(event.target.value)\n  }\n\n  const handleOnBlur = () => {\n    if (isDirty) {\n      patchDocument?.(row.id, column.id, renderValue)\n      setIsDirty(false)\n    }\n    resetFocusSelection()\n  }\n\n  const handlePaste = useCallback(\n    (event: ClipboardEvent) => {\n      const clipboardData = event.clipboardData?.getData('Text')\n\n      if (typeof clipboardData === 'string' || typeof clipboardData === 'number') {\n        setRenderValue(clipboardData)\n        // patch immediately when pasting\n        patchDocument?.(row.id, column.id, clipboardData)\n      }\n    },\n    [column.id, patchDocument, row.id],\n  )\n\n  const handleCopy = useCallback(() => {\n    navigator.clipboard.writeText(renderValue.toString())\n  }, [renderValue])\n\n  useEffect(() => {\n    if (cellState === 'selectedAnchor' || cellState === 'focused')\n      // only listen for enter key when cell is focused or anchor\n      document.addEventListener('keydown', handleOnEnterDown)\n    if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n      // if cell is selected, paste events should be handled\n      document.addEventListener('paste', handlePaste)\n\n    if (cellState === 'selectedAnchor')\n      // only allow copying when cell is selected anchor\n      document.addEventListener('copy', handleCopy)\n\n    return () => {\n      if (cellState === 'selectedAnchor' || cellState === 'focused')\n        document.removeEventListener('keydown', handleOnEnterDown)\n      if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n        document.removeEventListener('paste', handlePaste)\n      if (cellState === 'selectedAnchor') document.removeEventListener('copy', handleCopy)\n    }\n  }, [\n    cellId,\n    cellState,\n    column.id,\n    getStateByCellId,\n    handleCopy,\n    handleOnEnterDown,\n    handlePaste,\n    row.index,\n  ])\n\n  const getBorderStyle = () => {\n    if (cellState === 'focused') return '2px solid blue'\n    if (cellState === 'selectedRange') return '1px solid green'\n    if (cellState === 'selectedAnchor') return '1px solid blue'\n\n    return '1px solid transparent'\n  }\n\n  const inputProps = {\n    'onFocus': handleOnFocus,\n    'onBlur': handleOnBlur,\n    'onMouseDown': handleOnMouseDown,\n    'aria-selected': !!cellState,\n    'data-testid': cellId,\n    'id': cellId,\n    'ref': (ref: InputRef) => (inputRef.current = ref),\n  }\n\n  if (fieldType.name === 'boolean') {\n    return (\n      <Select\n        {...inputProps}\n        onChange={() => null}\n        radius={0}\n        style={{\n          boxShadow: 'none',\n          border: getBorderStyle(),\n          padding: 0,\n        }}\n        value={JSON.stringify(renderValue)}\n      >\n        <option value=\"True\">True</option>\n        <option value=\"False\">False</option>\n      </Select>\n    )\n  }\n\n  return (\n    <TextInput\n      {...inputProps}\n      size={0}\n      radius={0}\n      border={false}\n      style={{\n        border: getBorderStyle(),\n        padding: '22px 16px',\n      }}\n      value={\n        typeof renderValue === 'string' || typeof renderValue === 'number'\n          ? renderValue\n          : JSON.stringify(renderValue)\n      }\n      onChange={handleOnChange}\n    />\n  )\n}\n\n/** @internal */\nexport function SheetListCell(cell: Cell<SanityDocument, unknown>) {\n  const isPinned = cell.column.getIsPinned()\n  const Cell = isPinned ? PinnedDataCell : DataCell\n  const borderWidth = isPinned && cell.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <Cell\n      key={cell.row.original._id + cell.id}\n      style={{\n        left: cell.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      width={cell.column.getSize()}\n    >\n      {flexRender(cell.column.columnDef.cell, cell.getContext?.())}\n    </Cell>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isObjectSchemaType, type ObjectSchemaType} from '@sanity/types'\nimport {Box, Checkbox, Flex, Text} from '@sanity/ui'\nimport {\n  type AccessorKeyColumnDef,\n  createColumnHelper,\n  type GroupColumnDef,\n  type VisibilityState,\n} from '@tanstack/react-table'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPreviewStore,\n  DocumentStatusIndicator,\n  getPreviewStateObservable,\n  type SanityDocument,\n  type SchemaType,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {DocumentSheetListSelect} from './DocumentSheetListSelect'\nimport {SheetListCellInner} from './SheetListCell'\n\nexport const VISIBLE_COLUMN_LIMIT = 5\n\nconst PreviewCell = (props: {\n  documentPreviewStore: DocumentPreviewStore\n  schemaType: SchemaType\n  row: {\n    original: SanityDocument\n  }\n}) => {\n  const {documentPreviewStore, row, schemaType} = props\n  const title = 'Document title'\n  const previewStateObservable = useMemo(\n    () => getPreviewStateObservable(documentPreviewStore, schemaType, row.original._id, title),\n    [documentPreviewStore, row.original._id, schemaType],\n  )\n  const {draft, published, isLoading} = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n  })\n  if (isLoading) {\n    return (\n      <Text size={1} muted>\n        Loading...\n      </Text>\n    )\n  }\n  const displayValue = (draft?.title ?? published?.title ?? 'Untitled') as string\n  return (\n    <Flex align=\"center\" gap={3}>\n      <DocumentStatusIndicator draft={draft} published={published} />\n      <Text size={1}>{displayValue}</Text>\n    </Flex>\n  )\n}\n\nconst columnHelper = createColumnHelper<SanityDocument>()\nconst SUPPORTED_FIELDS = ['string', 'number', 'boolean']\n\ntype Columns = (\n  | AccessorKeyColumnDef<SanityDocument, unknown>\n  | GroupColumnDef<SanityDocument, unknown>\n)[]\n\nconst getColsFromSchemaType = (schemaType: ObjectSchemaType, parentalField?: string): Columns => {\n  return schemaType.fields.reduce<Columns>((tableColumns: Columns, field) => {\n    const {type, name} = field\n    if (SUPPORTED_FIELDS.includes(type.name)) {\n      const nextCol = columnHelper.accessor(\n        // accessor must use dot notation for internal tanstack method of reading cell data\n        parentalField ? `${parentalField}.${field.name}` : field.name,\n        {\n          id: parentalField ? `${parentalField}_${field.name}` : field.name,\n          header: field.type.title,\n          enableHiding: true,\n          cell: (info) => <SheetListCellInner {...info} fieldType={type} />,\n        },\n      )\n\n      return [...tableColumns, nextCol]\n    }\n\n    // if first layer nested object\n    if (type.name === 'object' && isObjectSchemaType(type) && !parentalField) {\n      return [\n        ...tableColumns,\n        columnHelper.group({header: name, columns: getColsFromSchemaType(type, field.name)}),\n      ]\n    }\n\n    return tableColumns\n  }, [])\n}\n\n// Type guard function to check if a column is of type GroupColumnDef\nfunction isAccessorKeyColumnDef(\n  column: Columns[number],\n): column is AccessorKeyColumnDef<SanityDocument, unknown> {\n  return 'accessorKey' in column\n}\nfunction isGroupColumnDef(\n  column: AccessorKeyColumnDef<SanityDocument, unknown> | GroupColumnDef<SanityDocument, unknown>,\n): column is GroupColumnDef<SanityDocument, unknown> {\n  return 'columns' in column\n}\n\nconst flatColumns = (cols: Columns): AccessorKeyColumnDef<SanityDocument, unknown>[] => {\n  return cols.flatMap((col) => {\n    if (isAccessorKeyColumnDef(col)) {\n      return col\n    }\n    if (isGroupColumnDef(col)) {\n      return col.columns ? flatColumns(col.columns) : []\n    }\n    return []\n  })\n}\n\nexport function useDocumentSheetColumns(documentSchemaType?: ObjectSchemaType) {\n  const documentPreviewStore = useDocumentPreviewStore()\n\n  const columns: Columns = useMemo(() => {\n    if (!documentSchemaType) {\n      return []\n    }\n    return [\n      columnHelper.display({\n        id: 'selected',\n        enableHiding: false,\n        header: (info) => (\n          <Box>\n            <Checkbox\n              style={{paddingLeft: 4}}\n              indeterminate={info.table.getIsSomeRowsSelected()}\n              onChange={info.table.getToggleAllPageRowsSelectedHandler()}\n            />\n            {/* eslint-disable-next-line i18next/no-literal-string */}\n            {info.table.getSelectedRowModel().rows.length} selected\n          </Box>\n        ),\n        cell: DocumentSheetListSelect,\n      }),\n      columnHelper.accessor('Preview', {\n        enableHiding: false,\n        id: 'Preview',\n        cell: (info) => {\n          return (\n            <PreviewCell\n              {...info}\n              documentPreviewStore={documentPreviewStore}\n              schemaType={documentSchemaType}\n            />\n          )\n        },\n      }),\n      ...getColsFromSchemaType(documentSchemaType),\n    ]\n  }, [documentPreviewStore, documentSchemaType])\n\n  const [initialColumnsVisibility]: [VisibilityState, number] = useMemo(\n    () =>\n      flatColumns(columns).reduce<[VisibilityState, number]>(\n        ([accCols, countAllowedVisible], column) => {\n          if (!column.id) throw new Error('Column must have an id')\n          const visibilityKey = column.id\n\n          // this column is always visible\n          if (!column.enableHiding) {\n            return [{...accCols, [visibilityKey]: true}, countAllowedVisible]\n          }\n\n          // have already reached column visibility limit, hide column by default\n          if (countAllowedVisible === VISIBLE_COLUMN_LIMIT) {\n            return [{...accCols, [visibilityKey]: false}, countAllowedVisible]\n          }\n\n          return [{...accCols, [visibilityKey]: true}, countAllowedVisible + 1]\n        },\n        [{}, 0],\n      ),\n    [columns],\n  )\n\n  return {columns, initialColumnsVisibility}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {Box, Checkbox, Flex, Menu, Stack, Text} from '@sanity/ui'\nimport {type Column, type Table} from '@tanstack/react-table'\nimport {useCallback} from 'react'\nimport {type SanityDocument, useTranslation} from 'sanity'\n\nimport {Button, MenuButton} from '../../../../ui-components'\nimport {VISIBLE_COLUMN_LIMIT} from './useDocumentSheetColumns'\n\ntype ColumnsControlProps = {\n  table: Table<SanityDocument>\n}\n\nexport function ColumnsControl({table}: ColumnsControlProps) {\n  const {t} = useTranslation()\n  const isVisibleLimitReached =\n    table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length >= VISIBLE_COLUMN_LIMIT\n\n  const setInitialColumns = useCallback(() => {\n    table.resetColumnVisibility()\n  }, [table])\n\n  const handleColumnOnChange = (column: Column<SanityDocument, unknown>) => () => {\n    column.toggleVisibility()\n  }\n\n  const getColumnVisibilityDisabled = (column: Column<SanityDocument, unknown>) => {\n    const isColumnVisible = column.getIsVisible()\n    const isSingleColumnVisible =\n      table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length === 1\n\n    return (isVisibleLimitReached && !isColumnVisible) || (isSingleColumnVisible && isColumnVisible)\n  }\n\n  return (\n    <MenuButton\n      button={<Button mode=\"bleed\" text={t('sheet-list.edit-columns')} />}\n      id=\"columns-control\"\n      menu={\n        <Menu padding={3} paddingTop={4} style={{width: 240}}>\n          <Flex direction=\"column\" height=\"fill\" gap={3}>\n            <Text weight=\"semibold\" size={1}>\n              {t('sheet-list.select-fields')}\n            </Text>\n            <Flex style={{flex: '1 1 auto', maxHeight: 320, overflowY: 'scroll'}}>\n              <Stack>\n                {table\n                  .getAllLeafColumns()\n                  .filter((column) => column.getCanHide())\n                  .map((column) => (\n                    <Flex key={column.id} marginY={2} align=\"center\">\n                      <Checkbox\n                        readOnly={getColumnVisibilityDisabled(column)}\n                        checked={column.getIsVisible()}\n                        onChange={handleColumnOnChange(column)}\n                        id={`col-visibility-${column.id}`}\n                        style={{display: 'block'}}\n                      />\n                      <Box flex={1} paddingLeft={3}>\n                        <Text size={1}>\n                          <label htmlFor={`col-visibility-${column.id}`}>\n                            {column.columnDef.header?.toString()}\n                          </label>\n                        </Text>\n                      </Box>\n                    </Flex>\n                  ))}\n              </Stack>\n            </Flex>\n            <Button\n              width=\"fill\"\n              mode=\"ghost\"\n              text={t('sheet-list.reset-columns')}\n              onClick={setInitialColumns}\n            />\n          </Flex>\n        </Menu>\n      }\n      placement=\"bottom\"\n      popover={{portal: true}}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {Filters, SearchHeader, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nconst SearchContainer = styled(Flex)`\n  flex-shrink: 0;\n`\n\nexport function DocumentSheetListFilter() {\n  const {\n    state: {filtersVisible},\n  } = useSearchState()\n\n  return (\n    <SearchContainer>\n      <SearchHeader />\n      {filtersVisible && <Filters showTypeFilter={false} />}\n    </SearchContainer>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {CloseIcon, EllipsisHorizontalIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Menu, Text} from '@sanity/ui'\nimport {flexRender, type Header as HeaderType, type HeaderGroup} from '@tanstack/react-table'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, MenuButton, MenuItem, Tooltip} from '../../../../ui-components'\n\nconst Header = styled.th<{width: number}>`\n  margin: 16px;\n  z-index: 1;\n  padding: 22px 0px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-badge-default-bg-color);\n  box-sizing: border-box;\n  text-align: left;\n  width: ${({width}) => width}px;\n  max-width: ${({width}) => width}px;\n`\n\nconst PinnedHeader = styled(Header)`\n  position: sticky;\n  z-index: 2;\n`\n\nconst HoverMenu = styled.div`\n  visibility: hidden;\n\n  ${Header}:hover & {\n    visibility: visible;\n  }\n`\n\ntype DocumentSheetListHeaderProps = {\n  header: HeaderType<SanityDocument, unknown>\n  headerGroup: HeaderGroup<SanityDocument>\n}\n\nexport function DocumentSheetListHeader(props: DocumentSheetListHeaderProps) {\n  const {header, headerGroup} = props\n  const {t} = useTranslation()\n\n  const isPinned = header.column.getIsPinned()\n\n  const headerTitle =\n    headerGroup.depth > 0 && !header.column.parent ? null : (\n      <Text size={1} weight=\"semibold\" textOverflow=\"ellipsis\">\n        {flexRender(header.column.columnDef.header, header.getContext())}\n      </Text>\n    )\n\n  const HeaderTag = isPinned ? PinnedHeader : Header\n\n  const canShowHeaderMenu =\n    header.column.getCanHide() &&\n    (headerGroup.depth === 0 ? !header.column.columns.length : header.column.parent)\n\n  const borderWidth = isPinned && header.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <HeaderTag\n      style={{\n        left: header.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      key={header.id}\n      data-testid={`header-${header.id}`}\n      width={header.getSize()}\n    >\n      <Flex justify=\"space-between\" marginX={2} align=\"baseline\">\n        <Tooltip delay={500} content={headerTitle}>\n          <Box style={{boxSizing: 'border-box'}} marginLeft={3} marginRight={3}>\n            {headerTitle}\n          </Box>\n        </Tooltip>\n        {canShowHeaderMenu && (\n          <HoverMenu>\n            <MenuButton\n              button={\n                <Button\n                  tooltipProps={{content: 'Open field menu'}}\n                  mode=\"bleed\"\n                  icon={EllipsisHorizontalIcon}\n                  data-testid=\"field-menu-button\"\n                />\n              }\n              id=\"field menu\"\n              popover={{placement: 'bottom-end'}}\n              menu={\n                <Menu>\n                  <MenuItem\n                    text={t('sheet-list.hide-field')}\n                    icon={CloseIcon}\n                    onClick={() => header.column.toggleVisibility()}\n                  />\n                </Menu>\n              }\n            />\n          </HoverMenu>\n        )}\n      </Flex>\n    </HeaderTag>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\n/* eslint-disable @sanity/i18n/no-attribute-string-literals */\n/* eslint-disable react/jsx-no-bind */\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  DoubleChevronLeftIcon,\n  DoubleChevronRightIcon,\n} from '@sanity/icons'\nimport {Flex, Text} from '@sanity/ui'\nimport {type Table} from '@tanstack/react-table'\nimport {type SanityDocument} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../ui-components'\n\nexport function DocumentSheetListPaginator({table}: {table: Table<SanityDocument>}) {\n  return (\n    <TooltipDelayGroupProvider>\n      <Flex gap={3} align={'center'}>\n        <Button\n          onClick={() => table.setPageIndex(0)}\n          disabled={!table.getCanPreviousPage()}\n          icon={DoubleChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to first page',\n          }}\n        />\n        <Button\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n          icon={ChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to previous page',\n          }}\n        />\n        <Text style={{whiteSpace: 'nowrap'}}>\n          {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n        </Text>\n\n        <Button\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n          icon={ChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to next page',\n          }}\n        />\n        <Button\n          onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n          disabled={!table.getCanNextPage()}\n          icon={DoubleChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to last page',\n          }}\n        />\n        <select\n          value={table.getState().pagination.pageSize}\n          onChange={(e) => {\n            table.setPageSize(Number(e.target.value))\n          }}\n        >\n          {[25, 50, 100].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              {pageSize}\n            </option>\n          ))}\n        </select>\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n}\n","import {type ListenEvent, type ListenOptions} from '@sanity/client'\nimport {useCallback, useEffect, useMemo, useReducer, useState} from 'react'\nimport {catchError, of} from 'rxjs'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, getDraftId, type SanityDocument, useClient} from 'sanity'\n\ninterface DocumentDeletedAction {\n  id: string\n  type: 'DOCUMENT_DELETED'\n}\n\ninterface DocumentUpdatedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_UPDATED'\n}\n\ninterface DocumentsSetAction {\n  documents: SanityDocument[]\n  type: 'DOCUMENTS_SET'\n}\n\ninterface DocumentReceivedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_RECEIVED'\n}\n\nexport type DocumentsReducerAction =\n  | DocumentDeletedAction\n  | DocumentUpdatedAction\n  | DocumentsSetAction\n  | DocumentReceivedAction\n\nexport interface DocumentsReducerState {\n  documents: Record<string, SanityDocument>\n}\n\nfunction createDocumentsSet(documents: SanityDocument[]) {\n  const documentsById = documents.reduce((acc, doc) => ({...acc, [doc._id]: doc}), {})\n  return documentsById\n}\n\nfunction documentsReducer(\n  state: DocumentsReducerState,\n  action: DocumentsReducerAction,\n): DocumentsReducerState {\n  switch (action.type) {\n    case 'DOCUMENTS_SET': {\n      // Create an object with the documents id as key\n      const documents = createDocumentsSet(action.documents)\n\n      return {\n        ...state,\n        documents: documents,\n      }\n    }\n\n    case 'DOCUMENT_RECEIVED': {\n      const nextDocumentResult = action.payload as SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [nextDocumentResult._id]: nextDocumentResult,\n        },\n      }\n    }\n\n    case 'DOCUMENT_DELETED': {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {[action.id]: _, ...restDocuments} = state.documents\n\n      return {\n        ...state,\n        documents: restDocuments,\n      }\n    }\n\n    case 'DOCUMENT_UPDATED': {\n      const updatedDocument = action.payload\n      const id = updatedDocument._id as string\n      const document = state.documents[id]\n\n      const nextDocument = {\n        // Add existing document data\n        ...document,\n        // Add incoming document data\n        ...updatedDocument,\n      } satisfies SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [id]: nextDocument,\n        },\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst LISTEN_OPTIONS: ListenOptions = {\n  events: ['welcome', 'mutation', 'reconnect'],\n  includeResult: true,\n  visibility: 'query',\n}\n\n/**\n * TODO:\n * [] Lazy load more documents, reduce initial fetch.\n * [] Add support for sorting and filtering.\n * []  Make a projection of the query according to the schema. e.g. get only the primitive fields and the _id to reduce the data payload.\n */\nexport function useDocumentSheetListStore({\n  filter,\n  params,\n  apiVersion,\n}: {\n  filter: string\n  params?: Record<string, unknown>\n  apiVersion?: string\n}) {\n  const QUERY = `*[${filter}][0...2000]`\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const [state, dispatch] = useReducer(documentsReducer, {\n    documents: {},\n  })\n  const [isLoading, setIsLoading] = useState<boolean>(client !== null)\n  const [error, setError] = useState<Error | null>(null)\n\n  const initialFetch = useCallback(async () => {\n    if (!client) {\n      setIsLoading(false)\n      return\n    }\n    try {\n      const res = await client.fetch(QUERY, params)\n      dispatch({type: 'DOCUMENTS_SET', documents: res})\n      setIsLoading(false)\n    } catch (err) {\n      setError(err)\n    }\n  }, [client, params, QUERY])\n\n  const handleListenerEvent = useCallback(\n    async (event: ListenEvent<Record<string, SanityDocument>>) => {\n      // Fetch all documents on initial connection\n      if (event.type === 'welcome') {\n        setIsLoading(true)\n        await initialFetch()\n        setIsLoading(false)\n      }\n\n      // The reconnect event means that we are trying to reconnect to the realtime listener.\n      // In this case we set loading to true to indicate that we're trying to\n      // reconnect. Once a connection has been established, the welcome event\n      // will be received and we'll fetch all documents again (above).\n      if (event.type === 'reconnect') {\n        setIsLoading(true)\n      }\n\n      // Handle mutations (create, update, delete) from the realtime listener\n      // and update the documents store accordingly\n      if (event.type === 'mutation') {\n        if (event.transition === 'appear') {\n          const nextDocument = event.result as SanityDocument | undefined\n\n          if (nextDocument) {\n            dispatch({\n              type: 'DOCUMENT_RECEIVED',\n              payload: nextDocument,\n            })\n          }\n        }\n\n        if (event.transition === 'disappear') {\n          dispatch({type: 'DOCUMENT_DELETED', id: event.documentId})\n        }\n\n        if (event.transition === 'update') {\n          const updatedDocument = event.result as SanityDocument | undefined\n\n          if (updatedDocument) {\n            dispatch({\n              type: 'DOCUMENT_UPDATED',\n              payload: updatedDocument,\n            })\n          }\n        }\n      }\n    },\n    [initialFetch],\n  )\n\n  const listener$ = useMemo(() => {\n    if (!client) return of()\n\n    const events$ = client.observable.listen(QUERY, params, LISTEN_OPTIONS).pipe(\n      catchError((err) => {\n        setError(err)\n        return of(err)\n      }),\n    )\n\n    return events$\n  }, [client, params, QUERY])\n\n  useEffect(() => {\n    const sub = listener$.subscribe(handleListenerEvent)\n\n    return () => {\n      sub?.unsubscribe()\n    }\n  }, [handleListenerEvent, listener$])\n\n  // Contemplate that we could have drafts and live documents here, merge them.\n  const dataAsArray = useMemo(() => {\n    // Joins the drafts and the live documents\n    const uniques = Object.keys(state.documents).reduce(\n      (acc: {[key: string]: SanityDocument}, key) => {\n        const document = state.documents[key]\n        const isDraft = document._id === getDraftId(document._id)\n        const id = isDraft ? document._id : getDraftId(document._id)\n        // If we already have the document, and this document is not the draft one, it means\n        // the draft hast already been added to the list, so we skip it.\n        if (acc[id] && !isDraft) {\n          return acc\n        }\n        acc[id] = document\n        return acc\n      },\n      {},\n    )\n    return Object.values(uniques)\n  }, [state.documents])\n\n  return {\n    data: dataAsArray,\n    isLoading,\n    error,\n  }\n}\n","import {useMemo} from 'react'\nimport {getPublishedId, useSearchState} from 'sanity'\n\nimport {useDocumentSheetListStore} from './useDocumentSheetListStore'\n\ninterface DocumentSheetListOptions {\n  /** The schemaType.name  */\n  typeName: string\n}\n\nexport function useDocumentSheetList({typeName}: DocumentSheetListOptions) {\n  const {state} = useSearchState()\n\n  const items = useMemo(() => {\n    const map = new Map()\n    state.result.hits.forEach((h) => map.set(getPublishedId(h.hit._id), h.hit))\n    return map\n  }, [state.result.hits])\n\n  // The store is listening to all the documents that match with the _type filter.\n  const {data, isLoading} = useDocumentSheetListStore({\n    filter: `_type == \"${typeName}\"`,\n  })\n\n  // Only return the documents that match with the serverSide filter items.\n  const documents = useMemo(() => {\n    return data.filter((doc) => items.has(getPublishedId(doc._id)))\n  }, [data, items])\n\n  return {data: documents, isLoading}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isDocumentSchemaType, type ObjectSchemaType, type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  type Row,\n  useReactTable,\n} from '@tanstack/react-table'\nimport {useCallback, useEffect, useState} from 'react'\nimport {SearchProvider, useSchema, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {type BaseStructureToolPaneProps} from '../../types'\nimport {ColumnsControl} from './ColumnsControl'\nimport {DocumentSheetListFilter} from './DocumentSheetListFilter'\nimport {DocumentSheetListHeader} from './DocumentSheetListHeader'\nimport {DocumentSheetListPaginator} from './DocumentSheetListPaginator'\nimport {DocumentSheetListProvider} from './DocumentSheetListProvider'\nimport {SheetListCell} from './SheetListCell'\nimport {useDocumentSheetColumns} from './useDocumentSheetColumns'\nimport {useDocumentSheetList} from './useDocumentSheetList'\n\ntype DocumentSheetListPaneProps = BaseStructureToolPaneProps<'documentList'>\n\nconst PaneContainer = styled(Flex)`\n  height: 100%;\n`\nconst TableContainer = styled.div`\n  overflow: auto; //our scrollable table container\n  position: relative; //needed for sticky header\n`\nconst Table = styled.table`\n  border-collapse: separate;\n  border-spacing: 0;\n  font-family: arial, sans-serif;\n  white-space: nowrap;\n  width: 100%;\n  border: 1px solid lightgray;\n\n  thead {\n    display: grid;\n    position: sticky;\n    top: 0;\n    z-index: 10;\n  }\n  tr {\n    padding: 0;\n  }\n  tr:last-child {\n    border-bottom: none;\n  }\n`\n\nfunction DocumentSheetListPaneInner({\n  documentSchemaType,\n}: DocumentSheetListPaneProps & {documentSchemaType: ObjectSchemaType}) {\n  const {dispatch, state} = useSearchState()\n  const {columns, initialColumnsVisibility} = useDocumentSheetColumns(documentSchemaType)\n  const {data} = useDocumentSheetList({\n    typeName: documentSchemaType.name,\n  })\n  const [selectedAnchor, setSelectedAnchor] = useState<number | null>(null)\n\n  const totalRows = state.result.hits.length\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    // Avoids resetting the page index when the data changes, e.g. a mutation is received\n    autoResetPageIndex: false,\n    initialState: {\n      columnPinning: {left: ['selected', 'Preview']},\n      pagination: {pageSize: 25},\n      columnVisibility: initialColumnsVisibility,\n    },\n    getRowId: (row) => row._id,\n    meta: {\n      selectedAnchor,\n      setSelectedAnchor,\n      patchDocument: (documentId, fieldId, value) => null,\n    },\n  })\n\n  const {rows} = table.getRowModel()\n\n  useEffect(() => {\n    dispatch({type: 'TERMS_TYPE_ADD', schemaType: documentSchemaType})\n    return () => {\n      dispatch({type: 'TERMS_TYPE_REMOVE', schemaType: documentSchemaType})\n    }\n  }, [documentSchemaType, dispatch])\n\n  const renderRow = useCallback((row: Row<SanityDocument>) => {\n    return (\n      <Box\n        as=\"tr\"\n        key={row.original._id + row.id}\n        paddingY={2}\n        style={{display: 'flex', width: '100%'}}\n      >\n        {row.getVisibleCells().map((cell) => (\n          <SheetListCell {...cell} key={row.original._id + cell.id} />\n        ))}\n      </Box>\n    )\n  }, [])\n\n  const rowsCount = `Total: ${totalRows} rows, showing ${rows.length} rows`\n  return (\n    <PaneContainer direction=\"column\" paddingX={3} data-testid=\"document-sheet-list-pane\">\n      <Flex direction=\"row\" align=\"center\" paddingY={3} paddingX={1} justify=\"space-between\">\n        <Flex direction=\"row\" align=\"center\">\n          <DocumentSheetListFilter />\n          <Text size={0} muted>\n            {rowsCount}\n          </Text>\n        </Flex>\n        <ColumnsControl table={table} />\n      </Flex>\n      <TableContainer>\n        <DocumentSheetListProvider table={table}>\n          <Table>\n            <thead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <Box as=\"tr\" key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <DocumentSheetListHeader\n                      key={header.id}\n                      header={header}\n                      headerGroup={headerGroup}\n                    />\n                  ))}\n                </Box>\n              ))}\n            </thead>\n            <tbody>{table.getRowModel().rows.map(renderRow)}</tbody>\n          </Table>\n        </DocumentSheetListProvider>\n      </TableContainer>\n      <Flex justify={'flex-end'} padding={3} gap={4} paddingY={5}>\n        <DocumentSheetListPaginator table={table} />\n      </Flex>\n    </PaneContainer>\n  )\n}\n\nexport function DocumentSheetListPane(props: DocumentSheetListPaneProps) {\n  const schema = useSchema()\n  const typeName = props.pane.schemaTypeName\n\n  const schemaType = schema.get(typeName)\n  if (!schemaType || !isDocumentSchemaType(schemaType)) {\n    throw new Error(`Schema type \"${typeName}\" not found or not a document schema`)\n  }\n  return (\n    <SearchProvider>\n      <DocumentSheetListPaneInner {...props} documentSchemaType={schemaType} />\n    </SearchProvider>\n  )\n}\n","import {Card, Code} from '@sanity/ui'\nimport {isEqual} from 'lodash'\nimport {memo, useMemo, useRef} from 'react'\nimport {\n  EMPTY_ARRAY,\n  type GeneralDocumentListLayoutKey,\n  SourceProvider,\n  useI18nText,\n  useSource,\n} from 'sanity'\nimport shallowEquals from 'shallow-equals'\n\nimport {Pane} from '../../components/pane'\nimport {_DEBUG} from '../../constants'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureToolSetting} from '../../useStructureToolSetting'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {DEFAULT_ORDERING, EMPTY_RECORD} from './constants'\nimport {DocumentListPane} from './DocumentListPane'\nimport {findStaticTypesInFilter} from './helpers'\nimport {PaneHeader} from './PaneHeader'\nimport {DocumentSheetListPane} from './sheetList/DocumentSheetListPane'\nimport {type SortOrder} from './types'\n\nconst addSelectedStateToMenuItems = (options: {\n  menuItems?: PaneMenuItem[]\n  sortOrderRaw?: SortOrder\n  layout?: GeneralDocumentListLayoutKey\n}) => {\n  const {menuItems, sortOrderRaw, layout} = options\n\n  return menuItems?.map((item) => {\n    if (item.params?.layout) {\n      return {\n        ...item,\n        selected: layout === item.params?.layout,\n      }\n    }\n\n    if (item?.params?.by) {\n      return {\n        ...item,\n        selected: isEqual(sortOrderRaw?.by, item?.params?.by || EMPTY_ARRAY),\n      }\n    }\n\n    return {...item, selected: false}\n  })\n}\n\nexport function useShallowUnique<ValueType>(value: ValueType): ValueType {\n  const valueRef = useRef<ValueType>(value)\n  if (!shallowEquals(valueRef.current, value)) {\n    valueRef.current = value\n  }\n  return valueRef.current\n}\n\n/**\n * @internal\n */\nexport const PaneContainer = memo(function PaneContainer(\n  props: BaseStructureToolPaneProps<'documentList'>,\n) {\n  const {index, isSelected, pane, paneKey} = props\n  const {name: parentSourceName} = useSource()\n\n  const {\n    defaultLayout = 'default',\n    initialValueTemplates = EMPTY_ARRAY,\n    menuItemGroups,\n    menuItems,\n    options,\n  } = pane\n  const {defaultOrdering = EMPTY_ARRAY, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const sourceName = pane.source\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const [layout, setLayout] = useStructureToolSetting<GeneralDocumentListLayoutKey>(\n    'layout',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultLayout,\n  )\n\n  const {title} = useI18nText(pane)\n\n  // Ensure that we use the defaultOrdering value from structure builder if any as the default\n  const defaultSortOrder = useMemo(() => {\n    return defaultOrdering?.length > 0 ? {by: defaultOrdering} : DEFAULT_ORDERING\n  }, [defaultOrdering])\n\n  const [sortOrderRaw, setSortOrder] = useStructureToolSetting<SortOrder>(\n    'sort-order',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultSortOrder,\n  )\n\n  const menuItemsWithSelectedState = useMemo(\n    () =>\n      addSelectedStateToMenuItems({\n        menuItems,\n        sortOrderRaw,\n        layout,\n      }),\n    [layout, menuItems, sortOrderRaw],\n  )\n\n  const isSheetListLayout = layout === 'sheetList'\n  const paneLayout = isSheetListLayout ? (\n    <DocumentSheetListPane {...props} key={props.pane.id} />\n  ) : (\n    <DocumentListPane {...props} sortOrder={sortOrderRaw} layout={layout} />\n  )\n\n  return (\n    <SourceProvider name={sourceName || parentSourceName}>\n      <Pane\n        data-ui=\"DocumentListPane\"\n        id={paneKey}\n        minWidth={320}\n        {...(isSheetListLayout ? {} : {currentMaxWidth: 350, maxWidth: 640})}\n        selected={isSelected}\n      >\n        {_DEBUG && (\n          <Card padding={4} tone=\"transparent\">\n            <Code>{pane.source || '(none)'}</Code>\n          </Card>\n        )}\n\n        <PaneHeader\n          index={index}\n          initialValueTemplates={initialValueTemplates}\n          menuItemGroups={menuItemGroups}\n          menuItems={menuItemsWithSelectedState}\n          setLayout={setLayout}\n          setSortOrder={setSortOrder}\n          title={title}\n        />\n        {paneLayout}\n      </Pane>\n    </SourceProvider>\n  )\n})\n","import {type SerializePath} from './StructureNodes'\n\n/** @internal */\nexport class SerializeError extends Error {\n  public readonly path: SerializePath\n  public helpId?: HELP_URL\n\n  constructor(\n    message: string,\n    parentPath: SerializePath,\n    pathSegment: string | number | undefined,\n    hint?: string,\n  ) {\n    super(message)\n    this.name = 'SerializeError'\n    const segment = typeof pathSegment === 'undefined' ? '<unknown>' : `${pathSegment}`\n    this.path = (parentPath || []).concat(hint ? `${segment} (${hint})` : segment)\n  }\n\n  withHelpUrl(id: HELP_URL): SerializeError {\n    this.helpId = id\n    return this\n  }\n}\n\n/** @internal */\nexport enum HELP_URL {\n  ID_REQUIRED = 'structure-node-id-required',\n  TITLE_REQUIRED = 'structure-title-required',\n  FILTER_REQUIRED = 'structure-filter-required',\n  INVALID_LIST_ITEM = 'structure-invalid-list-item',\n  COMPONENT_REQUIRED = 'structure-view-component-required',\n  DOCUMENT_ID_REQUIRED = 'structure-document-id-required',\n  DOCUMENT_TYPE_REQUIRED = 'structure-document-type-required',\n  SCHEMA_TYPE_REQUIRED = 'structure-schema-type-required',\n  SCHEMA_TYPE_NOT_FOUND = 'structure-schema-type-not-found',\n  LIST_ITEMS_MUST_BE_ARRAY = 'structure-list-items-must-be-array',\n  QUERY_PROVIDED_FOR_FILTER = 'structure-query-provided-for-filter',\n  ACTION_OR_INTENT_REQUIRED = 'structure-action-or-intent-required',\n  LIST_ITEM_IDS_MUST_BE_UNIQUE = 'structure-list-item-ids-must-be-unique',\n  ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE = 'structure-action-and-intent-mutually-exclusive',\n  API_VERSION_REQUIRED_FOR_CUSTOM_FILTER = 'structure-api-version-required-for-custom-filter',\n}\n","import {type SortOrdering} from '@sanity/types'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport const ORDER_BY_UPDATED_AT: SortOrdering = {\n  title: 'Last edited',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.last-edited',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastEditedDesc',\n  by: [{field: '_updatedAt', direction: 'desc'}],\n}\n\nexport const ORDER_BY_CREATED_AT: SortOrdering = {\n  title: 'Created',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.created',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastCreatedDesc',\n  by: [{field: '_createdAt', direction: 'desc'}],\n}\n\nexport const DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT\n\nexport const DEFAULT_ORDERING_OPTIONS: SortOrdering[] = [\n  ORDER_BY_UPDATED_AT, // _updatedAt\n  ORDER_BY_CREATED_AT, // _createdAt\n]\n","import {SortIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrdering, type SortOrderingItem} from '@sanity/types'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type Intent} from './Intent'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {DEFAULT_ORDERING_OPTIONS} from './Sort'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getExtendedProjection} from './util/getExtendedProjection'\n\n/** @internal */\nexport function maybeSerializeMenuItem(\n  item: MenuItem | MenuItemBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItem {\n  return item instanceof MenuItemBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Menu item action type\n * @public */\nexport type MenuItemActionType =\n  | string\n  | ((params: Record<string, string> | undefined, scope?: any) => void)\n\n/**\n * Menu items parameters\n *\n * @public */\nexport type MenuItemParamsType = Record<string, string | unknown | undefined>\n\n/**\n * Interface for menu items\n *\n * @public */\nexport interface MenuItem {\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /**\n   * Menu Item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here as a fallback if no i18n key is\n   * provided and compatibility with older plugins\n   */\n  title: string\n  /** Menu Item action */\n  action?: MenuItemActionType\n  /** Menu Item intent */\n  intent?: Intent\n  /** Menu Item group */\n  group?: string\n  // TODO: align these with TemplateItem['icon']\n  /** Menu Item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** Menu Item parameters. See {@link MenuItemParamsType} */\n  params?: MenuItemParamsType\n  /** Determine if it will show the MenuItem as action */\n  showAsAction?: boolean\n}\n\n/**\n * Partial menu items\n * @public\n */\nexport type PartialMenuItem = Partial<MenuItem>\n\n/**\n * Class for building menu items.\n *\n * @public */\nexport class MenuItemBuilder implements Serializable<MenuItem> {\n  /** menu item option object. See {@link PartialMenuItem} */\n  protected spec: PartialMenuItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItem,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set menu item action\n   * @param action - menu item action. See {@link MenuItemActionType}\n   * @returns menu item builder based on action provided. See {@link MenuItemBuilder}\n   */\n  action(action: MenuItemActionType): MenuItemBuilder {\n    return this.clone({action})\n  }\n\n  /**\n   * Get menu item action\n   * @returns menu item builder action. See {@link PartialMenuItem}\n   */\n  getAction(): PartialMenuItem['action'] {\n    return this.spec.action\n  }\n\n  /**\n   * Set menu item intent\n   * @param intent - menu item intent. See {@link Intent}\n   * @returns menu item builder based on intent provided. See {@link MenuItemBuilder}\n   */\n  intent(intent: Intent): MenuItemBuilder {\n    return this.clone({intent})\n  }\n\n  /**\n   * Get menu item intent\n   * @returns menu item intent. See {@link PartialMenuItem}\n   */\n  getIntent(): PartialMenuItem['intent'] {\n    return this.spec.intent\n  }\n\n  /**\n   * Set menu item title\n   * @param title - menu item title\n   * @returns menu item builder based on title provided. See {@link MenuItemBuilder}\n   */\n  title(title: string): MenuItemBuilder {\n    return this.clone({title})\n  }\n\n  /**\n   * Get menu item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here for compatibility.\n   * @returns menu item title\n   */\n  getTitle(): string | undefined {\n    return this.spec.title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item builder based on i18n config provided. See {@link MenuItemBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set menu item group\n   * @param group - menu item group\n   * @returns menu item builder based on group provided. See {@link MenuItemBuilder}\n   */\n  group(group: string): MenuItemBuilder {\n    return this.clone({group})\n  }\n\n  /**\n   * Get menu item group\n   * @returns menu item group. See {@link PartialMenuItem}\n   */\n  getGroup(): PartialMenuItem['group'] {\n    return this.spec.group\n  }\n\n  /**\n   * Set menu item icon\n   * @param icon - menu item icon\n   * @returns menu item builder based on icon provided. See {@link MenuItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): MenuItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Get menu item icon\n   * @returns menu item icon. See {@link PartialMenuItem}\n   */\n  getIcon(): PartialMenuItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set menu item parameters\n   * @param params - menu item parameters. See {@link MenuItemParamsType}\n   * @returns menu item builder based on parameters provided. See {@link MenuItemBuilder}\n   */\n  params(params: MenuItemParamsType): MenuItemBuilder {\n    return this.clone({params})\n  }\n\n  /**\n   * Get meny item parameters\n   * @returns menu item parameters. See {@link PartialMenuItem}\n   */\n  getParams(): PartialMenuItem['params'] {\n    return this.spec.params\n  }\n\n  /**\n   * Set menu item to show as action\n   * @param showAsAction - determine if menu item should show as action\n   * @returns menu item builder based on if it should show as action. See {@link MenuItemBuilder}\n   */\n  showAsAction(showAsAction = true): MenuItemBuilder {\n    return this.clone({showAsAction: Boolean(showAsAction)})\n  }\n\n  /**\n   * Check if menu item should show as action\n   * @returns true if menu item should show as action, false if not. See {@link PartialMenuItem}\n   */\n  getShowAsAction(): PartialMenuItem['showAsAction'] {\n    return this.spec.showAsAction\n  }\n\n  /** Serialize menu item builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns menu item node based on path provided in options. See {@link MenuItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItem {\n    const {title, action, intent} = this.spec\n    if (!title) {\n      const hint = typeof action === 'string' ? `action: \"${action}\"` : undefined\n      throw new SerializeError(\n        '`title` is required for menu item',\n        options.path,\n        options.index,\n        hint,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    if (!action && !intent) {\n      throw new SerializeError(\n        `\\`action\\` or \\`intent\\` required for menu item with title ${this.spec.title}`,\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_OR_INTENT_REQUIRED)\n    }\n\n    if (intent && action) {\n      throw new SerializeError(\n        'cannot set both `action` AND `intent`',\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE)\n    }\n\n    return {...this.spec, title}\n  }\n\n  /** Clone menu item builder\n   * @param withSpec - menu item options. See {@link PartialMenuItem}\n   * @returns menu item builder based on context and spec provided. See {@link MenuItemBuilder}\n   */\n  clone(withSpec?: PartialMenuItem): MenuItemBuilder {\n    const builder = new MenuItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport interface SortMenuItem extends MenuItem {\n  params: {\n    by: SortOrderingItem[]\n  }\n}\n\n/** @internal */\nexport function getOrderingMenuItem(\n  context: StructureContext,\n  {by, title, i18n}: SortOrdering,\n  extendedProjection?: string,\n): MenuItemBuilder {\n  let builder = new MenuItemBuilder(context)\n    .group('sorting')\n    .title(\n      context.i18n.t('default-menu-item.fallback-title', {\n        // note this lives in the `studio` bundle because that one is loaded by default\n        ns: 'studio',\n        replace: {title}, // replaces the `{{title}}` option\n      }),\n    ) // fallback title\n    .icon(SortIcon)\n    .action('setSortOrder')\n    .params({by, extendedProjection})\n\n  if (i18n) {\n    builder = builder.i18n(i18n)\n  }\n\n  return builder\n}\n\n/** @internal */\nexport function getOrderingMenuItemsForSchemaType(\n  context: StructureContext,\n  typeName: SchemaType | string,\n): MenuItemBuilder[] {\n  const {schema} = context\n  const type = typeof typeName === 'string' ? schema.get(typeName) : typeName\n  if (!type || !('orderings' in type)) {\n    return []\n  }\n\n  return (\n    type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS\n  ).map((ordering: SortOrdering) =>\n    getOrderingMenuItem(context, ordering, getExtendedProjection(type, ordering.by)),\n  )\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/** @internal */\nexport function maybeSerializeMenuItemGroup(\n  item: MenuItemGroup | MenuItemGroupBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItemGroup {\n  return item instanceof MenuItemGroupBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Interface for menu item groups\n * @public\n */\nexport interface MenuItemGroup {\n  /** Menu group Id */\n  id: string\n  /** Menu group title */\n  title: string\n  i18n?: I18nTextRecord<'title'>\n}\n\n/**\n * Class for building menu item groups.\n *\n * @public\n */\nexport class MenuItemGroupBuilder implements Serializable<MenuItemGroup> {\n  /** Menu item group ID */\n  protected _id: string\n  /** Menu item group title */\n  protected _title: string\n\n  protected _i18n?: I18nTextRecord<'title'>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItemGroup,\n  ) {\n    this._id = spec ? spec.id : ''\n    this._title = spec ? spec.title : ''\n    this._i18n = spec ? spec.i18n : undefined\n  }\n\n  /**\n   * Set menu item group ID\n   * @param id - menu item group ID\n   * @returns menu item group builder based on ID provided. See {@link MenuItemGroupBuilder}\n   */\n  id(id: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {id, title: this._title, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group ID\n   * @returns menu item group ID\n   */\n  getId(): string {\n    return this._id\n  }\n\n  /**\n   * Set menu item group title\n   * @param title - menu item group title\n   * @returns menu item group builder based on title provided. See {@link MenuItemGroupBuilder}\n   */\n  title(title: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {title, id: this._id, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group title\n   * @returns menu item group title\n   */\n  getTitle(): string {\n    return this._title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item group builder based on i18n info provided. See {@link MenuItemGroupBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {i18n, id: this._id, title: this._title})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this._i18n\n  }\n\n  /**\n   * Serialize menu item group builder\n   * @param options - serialization options (path). See {@link SerializeOptions}\n   * @returns menu item group based on path provided in options. See {@link MenuItemGroup}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItemGroup {\n    const {_id, _title, _i18n} = this\n    if (!_id) {\n      throw new SerializeError(\n        '`id` is required for a menu item group',\n        options.path,\n        options.index,\n        _title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!_title) {\n      throw new SerializeError(\n        '`title` is required for a menu item group',\n        options.path,\n        _id,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: _id,\n      title: _title,\n      i18n: _i18n,\n    }\n  }\n}\n","import {SerializeError} from '../SerializeError'\nimport {type SerializePath} from '../StructureNodes'\n\nexport const disallowedPattern = /([^A-Za-z0-9-_.])/\n\nexport function validateId(\n  id: string,\n  parentPath: SerializePath,\n  pathSegment: string | number | undefined,\n): string {\n  if (typeof id !== 'string') {\n    throw new SerializeError(\n      `Structure node id must be of type string, got ${typeof id}`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  const [disallowedChar] = id.match(disallowedPattern) || []\n  if (disallowedChar) {\n    throw new SerializeError(\n      `Structure node id cannot contain character \"${disallowedChar}\"`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  if (id.startsWith('__edit__')) {\n    throw new SerializeError(\n      `Structure node id cannot start with __edit__`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  return id\n}\n","import {camelCase} from 'lodash'\nimport getSlug from 'speakingurl'\n\nimport {disallowedPattern} from './validateId'\n\nexport function getStructureNodeId(title: string, id?: string): string {\n  if (id) {\n    return id\n  }\n\n  const camelCased = camelCase(title)\n\n  return disallowedPattern.test(camelCased) ? camelCase(getSlug(title)) : camelCased\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {type IntentChecker} from './Intent'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {type UserComponent} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Interface for component\n *\n * @public\n */\n// TODO: rename to `StructureComponent` since it clashes with React?\nexport interface Component extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component menu items, array of type {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** Component menu item group, array of type {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n  /** Component options */\n  options: {[key: string]: unknown}\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Interface for component input\n *\n * @public\n */\nexport interface ComponentInput extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for buildable component\n *\n * @public\n */\nexport interface BuildableComponent extends Partial<StructureNode> {\n  /** Component of type {@link UserComponent} */\n  component?: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Class for building components\n *\n * @public\n */\nexport class ComponentBuilder implements Serializable<Component> {\n  /** component builder option object */\n  protected spec: BuildableComponent\n\n  constructor(spec?: ComponentInput) {\n    this.spec = {options: {}, ...(spec ? spec : {})}\n  }\n\n  /** Set Component ID\n   * @param id - component ID\n   * @returns component builder based on ID provided\n   */\n  id(id: string): ComponentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get ID\n   * @returns ID\n   */\n  getId(): BuildableComponent['id'] {\n    return this.spec.id\n  }\n\n  /** Set Component title\n   * @param title - component title\n   * @returns component builder based on title provided (and ID)\n   */\n  title(title: string): ComponentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Component title\n   * @returns title\n   */\n  getTitle(): BuildableComponent['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ComponentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Component child\n   * @param child - child component\n   * @returns component builder based on child component provided\n   */\n  child(child: Child): ComponentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Component child\n   * @returns child component\n   */\n  getChild(): BuildableComponent['child'] {\n    return this.spec.child\n  }\n\n  /** Set component\n   * @param component - user built component\n   * @returns component builder based on component provided\n   */\n  component(component: UserComponent): ComponentBuilder {\n    return this.clone({component})\n  }\n\n  /** Get Component\n   * @returns component\n   */\n  getComponent(): BuildableComponent['component'] {\n    return this.spec.component\n  }\n\n  /** Set Component options\n   * @param options - component options\n   * @returns component builder based on options provided\n   */\n  options(options: {[key: string]: unknown}): ComponentBuilder {\n    return this.clone({options})\n  }\n\n  /** Get Component options\n   * @returns component options\n   */\n  getOptions(): NonNullable<BuildableComponent['options']> {\n    return this.spec.options || {}\n  }\n\n  /** Set Component menu items\n   * @param menuItems - component menu items\n   * @returns component builder based on menuItems provided\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[]): ComponentBuilder {\n    return this.clone({menuItems})\n  }\n\n  /** Get Component menu items\n   * @returns menu items\n   */\n  getMenuItems(): BuildableComponent['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set Component menu item groups\n   * @param menuItemGroups - component menu item groups\n   * @returns component builder based on menuItemGroups provided\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ComponentBuilder {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get Component menu item groups\n   * @returns menu item groups\n   */\n  getMenuItemGroups(): BuildableComponent['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  canHandleIntent(canHandleIntent: IntentChecker): ComponentBuilder {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Serialize component\n   * @param options - serialization options\n   * @returns component object based on path provided in options\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): Component {\n    const {id, title, child, options: componentOptions, component} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!component) {\n      throw new SerializeError(\n        '`component` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      type: 'component',\n      child,\n      component,\n      canHandleIntent: this.spec.canHandleIntent,\n      options: componentOptions || {},\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, options.path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, options.path),\n      ),\n    }\n  }\n\n  /** Clone component builder (allows for options overriding)\n   * @param withSpec - component builder options\n   * @returns cloned builder\n   */\n  clone(withSpec?: BuildableComponent): ComponentBuilder {\n    const builder = new ComponentBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SanityClient} from '@sanity/client'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  getDraftId,\n  getPublishedId,\n  type SourceClientOptions,\n} from 'sanity'\n\nexport async function resolveTypeForDocument(\n  getClient: (options: SourceClientOptions) => SanityClient,\n  id: string,\n): Promise<string | undefined> {\n  const query = '*[_id in [$documentId, $draftId]]._type'\n  const documentId = getPublishedId(id)\n  const draftId = getDraftId(id)\n\n  const types = await getClient(DEFAULT_STUDIO_CLIENT_OPTIONS).fetch(\n    query,\n    {documentId, draftId},\n    {tag: 'structure.resolve-type'},\n  )\n\n  return types[0]\n}\n","import {kebabCase} from 'lodash'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from '../StructureNodes'\nimport {type View} from '../types'\nimport {validateId} from '../util/validateId'\nimport {type ComponentViewBuilder} from './ComponentView'\nimport {type FormViewBuilder} from './FormView'\n\n/**\n * Interface for base view\n *\n * @public */\nexport interface BaseView {\n  /** View id */\n  id: string\n  /** View Title */\n  title: string\n  /** View Icon */\n  icon?: React.ComponentType | React.ReactNode\n}\n\n/**\n * Class for building generic views.\n *\n * @public\n */\nexport abstract class GenericViewBuilder<TView extends Partial<BaseView>, ConcreteImpl>\n  implements Serializable<BaseView>\n{\n  /** Generic view option object */\n  protected spec: TView = {} as TView\n\n  /** Set generic view ID\n   * @param id - generic view ID\n   * @returns generic view builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n  /** Get generic view ID\n   * @returns generic view ID\n   */\n  getId(): TView['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic view title\n   * @param title - generic view title\n   * @returns generic view builder based on title provided and (if provided) its ID.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: this.spec.id || kebabCase(title)})\n  }\n\n  /** Get generic view title\n   * @returns generic view title\n   */\n  getTitle(): TView['title'] {\n    return this.spec.title\n  }\n\n  /** Set generic view icon\n   * @param icon - generic view icon\n   * @returns generic view builder based on icon provided.\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ConcreteImpl {\n    return this.clone({icon})\n  }\n\n  /** Get generic view icon\n   * @returns generic view icon\n   */\n  getIcon(): TView['icon'] {\n    return this.spec.icon\n  }\n\n  /** Serialize generic view\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic view object based on path provided in options. See {@link BaseView}\n   */\n  serialize(options: SerializeOptions = {path: []}): BaseView {\n    const {id, title, icon} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!title) {\n      throw new SerializeError(\n        '`title` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      icon,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - Partial generic view builder options. See {@link BaseView}\n   * @returns Generic view builder.\n   */\n  abstract clone(withSpec?: Partial<BaseView>): ConcreteImpl\n}\n\nfunction isSerializable(view: BaseView | Serializable<BaseView>): view is Serializable<BaseView> {\n  return typeof (view as Serializable<BaseView>).serialize === 'function'\n}\n\n/** @internal */\nexport function maybeSerializeView(\n  item: View | Serializable<View>,\n  index: number,\n  path: SerializePath,\n): View {\n  return isSerializable(item) ? item.serialize({path, index}) : item\n}\n\n/**\n * View builder. See {@link ComponentViewBuilder} and {@link FormViewBuilder}\n *\n * @public\n */\nexport type ViewBuilder = ComponentViewBuilder | FormViewBuilder\n","import {isRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type SerializeOptions} from '../StructureNodes'\nimport {type UserViewComponent} from '../types'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for component views.\n *\n * @public */\nexport interface ComponentView<TOptions = Record<string, any>> extends BaseView {\n  type: 'component'\n  /** Component view components. See {@link UserViewComponent} */\n  component: UserViewComponent\n  /** Component view options */\n  options: TOptions\n}\n\nconst isComponentSpec = (spec: unknown): spec is ComponentView =>\n  isRecord(spec) && spec.type === 'component'\n\n/**\n * Class for building a component view.\n *\n * @public */\nexport class ComponentViewBuilder extends GenericViewBuilder<\n  Partial<ComponentView>,\n  ComponentViewBuilder\n> {\n  /** Partial Component view option object. See {@link ComponentView} */\n  protected spec: Partial<ComponentView>\n\n  constructor(\n    /**\n     * Component view component or spec\n     * @param componentOrSpec - user view component or partial component view. See {@link UserViewComponent} and {@link ComponentView}\n     */\n    componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n  ) {\n    const spec = isComponentSpec(componentOrSpec) ? {...componentOrSpec} : {options: {}}\n\n    super()\n    this.spec = spec\n\n    const userComponent =\n      typeof componentOrSpec === 'function' ? componentOrSpec : this.spec.component\n\n    if (userComponent) {\n      // Because we're cloning, this'll return a new instance, so grab the spec from it\n      this.spec = this.component(userComponent).spec\n    }\n  }\n\n  /** Set view Component\n   * @param component - component view component. See {@link UserViewComponent}\n   * @returns component view builder based on component view provided. See {@link ComponentViewBuilder}\n   */\n  component(component: UserViewComponent): ComponentViewBuilder {\n    return this.clone({component})\n  }\n\n  /** Get view Component\n   * @returns Partial component view. See {@link ComponentView}\n   */\n  getComponent(): Partial<ComponentView>['component'] {\n    return this.spec.component\n  }\n\n  /** Set view Component options\n   * @param options - component view options\n   * @returns component view builder based on options provided. See {@link ComponentViewBuilder}\n   */\n  options(options: {[key: string]: any}): ComponentViewBuilder {\n    return this.clone({options})\n  }\n\n  /** Get view Component options\n   * @returns component view options. See {@link ComponentView}\n   */\n  getOptions(): ComponentView['options'] {\n    return this.spec.options || {}\n  }\n\n  /** Serialize view Component\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns component view based on path provided in options. See {@link ComponentView}\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): ComponentView {\n    const base = super.serialize(options)\n\n    const component = this.spec.component\n    if (typeof component !== 'function') {\n      throw new SerializeError(\n        '`component` is required and must be a function for `component()` view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.COMPONENT_REQUIRED)\n    }\n\n    return {\n      ...base,\n      component,\n      options: this.spec.options || {},\n      type: 'component',\n    }\n  }\n\n  /** Clone Component view builder (allows for options overriding)\n   * @param withSpec - partial for component view option. See {@link ComponentView}\n   * @returns component view builder. See {@link ComponentViewBuilder}\n   */\n  clone(withSpec?: Partial<ComponentView>): ComponentViewBuilder {\n    const builder = new ComponentViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SerializeOptions} from '../StructureNodes'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for form views.\n *\n * @public */\nexport interface FormView extends BaseView {\n  type: 'form'\n}\n\n/**\n * Class for building a form view.\n *\n * @public */\nexport class FormViewBuilder extends GenericViewBuilder<Partial<BaseView>, FormViewBuilder> {\n  /** Document list options. See {@link FormView} */\n  protected spec: Partial<FormView>\n\n  constructor(spec?: Partial<FormView>) {\n    super()\n    this.spec = {id: 'editor', title: 'Editor', ...(spec ? spec : {})}\n  }\n\n  /**\n   * Serialize Form view builder\n   * @param options - Serialize options. See {@link SerializeOptions}\n   * @returns form view builder based on path provided in options. See {@link FormView}\n   */\n  serialize(options: SerializeOptions = {path: []}): FormView {\n    return {\n      ...super.serialize(options),\n      type: 'form',\n    }\n  }\n\n  /**\n   * Clone Form view builder (allows for options overriding)\n   * @param withSpec - Partial form view builder options. See {@link FormView}\n   * @returns form view builder. See {@link FormViewBuilder}\n   */\n  clone(withSpec?: Partial<FormView>): FormViewBuilder {\n    const builder = new FormViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type UserViewComponent} from '../types'\nimport {type ComponentView, ComponentViewBuilder} from './ComponentView'\nimport {type FormView, FormViewBuilder} from './FormView'\n\nexport * from './ComponentView'\nexport * from './FormView'\nexport * from './View'\n\n/** @internal */\nexport const form = (spec?: Partial<FormView>): FormViewBuilder => new FormViewBuilder(spec)\n\n/** @internal */\nexport const component = (\n  componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n): ComponentViewBuilder => new ComponentViewBuilder(componentOrSpec)\n","import {type SchemaType} from '@sanity/types'\nimport {uniq} from 'lodash'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver} from './ChildResolver'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type DocumentNode,\n  type EditorNode,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext, type View} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\nimport {validateId} from './util/validateId'\nimport {form} from './views'\nimport {maybeSerializeView, type ViewBuilder} from './views/View'\n\nconst createDocumentChildResolver =\n  ({resolveDocumentNode, getClient}: StructureContext): ChildResolver =>\n  async (itemId, {params, path}) => {\n    let type = params.type\n\n    const parentPath = path.slice(0, path.length - 1)\n    const currentSegment = path[path.length - 1]\n\n    if (!type) {\n      type = await resolveTypeForDocument(getClient, itemId)\n    }\n\n    if (!type) {\n      throw new SerializeError(\n        `Failed to resolve document, and no type provided in parameters.`,\n        parentPath,\n        currentSegment,\n      )\n    }\n\n    return resolveDocumentNode({documentId: itemId, schemaType: type})\n  }\n\n/**\n * Interface for options of Partial Documents. See {@link PartialDocumentNode}\n *\n * @public */\nexport interface DocumentOptions {\n  /** Document Id */\n  id: string\n  /** Document Type */\n  type: string\n  /** Document Template */\n  template?: string\n  /** Template parameters */\n  templateParameters?: Record<string, unknown>\n}\n\n/**\n * Interface for partial document (focused on the document pane)\n *\n * @public */\nexport interface PartialDocumentNode {\n  /** Document Id */\n  id?: string\n  /** Document title */\n  title?: string\n  /** I18n key and namespace used to populate the localized title */\n  i18n?: I18nTextRecord<'title'>\n  /** Document children of type {@link Child} */\n  child?: Child\n  /**\n   * Views for the document pane. See {@link ViewBuilder} and {@link View}\n   */\n  views?: (View | ViewBuilder)[]\n  /**\n   * Document options. See {@link DocumentOptions}\n   */\n  options?: Partial<DocumentOptions>\n}\n\n/**\n * A `DocumentBuilder` is used to build a document node.\n *\n * @public */\nexport class DocumentBuilder implements Serializable<DocumentNode> {\n  /** Component builder option object See {@link PartialDocumentNode} */\n  protected spec: PartialDocumentNode\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: PartialDocumentNode,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set Document Builder ID\n   * @param id - document builder ID\n   * @returns document builder based on ID provided. See {@link DocumentBuilder}\n   */\n  id(id: string): DocumentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get Document Builder ID\n   * @returns document ID. See {@link PartialDocumentNode}\n   */\n  getId(): PartialDocumentNode['id'] {\n    return this.spec.id\n  }\n\n  /** Set Document title\n   * @param title - document title\n   * @returns document builder based on title provided (and ID). See {@link DocumentBuilder}\n   */\n  title(title: string): DocumentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Document title\n   * @returns document title. See {@link PartialDocumentNode}\n   */\n  getTitle(): PartialDocumentNode['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): DocumentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Document child\n   * @param child - document child\n   * @returns document builder based on child provided. See {@link DocumentBuilder}\n   */\n  child(child: Child): DocumentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Document child\n   * @returns document child. See {@link PartialDocumentNode}\n   */\n  getChild(): PartialDocumentNode['child'] {\n    return this.spec.child\n  }\n\n  /** Set Document ID\n   * @param documentId - document ID\n   * @returns document builder with document based on ID provided. See {@link DocumentBuilder}\n   */\n  documentId(documentId: string): DocumentBuilder {\n    // Let's try to be a bit helpful and assign an ID from document ID if none is specified\n    const paneId = this.spec.id || documentId\n    return this.clone({\n      id: paneId,\n      options: {\n        ...(this.spec.options || {}),\n        id: documentId,\n      },\n    })\n  }\n\n  /** Get Document ID\n   * @returns document ID. See {@link DocumentOptions}\n   */\n  getDocumentId(): Partial<DocumentOptions>['id'] {\n    return this.spec.options?.id\n  }\n\n  /** Set Document Type\n   * @param documentType - document type\n   * @returns document builder with document based on type provided. See {@link DocumentBuilder}\n   */\n  schemaType(documentType: SchemaType | string): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        type: typeof documentType === 'string' ? documentType : documentType.name,\n      },\n    })\n  }\n\n  /** Get Document Type\n   * @returns document type. See {@link DocumentOptions}\n   */\n  getSchemaType(): Partial<DocumentOptions>['type'] {\n    return this.spec.options?.type\n  }\n\n  /** Set Document Template\n   * @param templateId - document template ID\n   * @param parameters - document template parameters\n   * @returns document builder with document based on template provided. See {@link DocumentBuilder}\n   */\n  initialValueTemplate(templateId: string, parameters?: Record<string, unknown>): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        template: templateId,\n        templateParameters: parameters,\n      },\n    })\n  }\n\n  /** Get Document Template\n   * @returns document template. See {@link DocumentOptions}\n   */\n  getInitialValueTemplate(): Partial<DocumentOptions>['template'] {\n    return this.spec.options?.template\n  }\n\n  /** Get Document's initial value Template parameters\n   * @returns document template parameters. See {@link DocumentOptions}\n   */\n  getInitialValueTemplateParameters(): Partial<DocumentOptions>['templateParameters'] {\n    return this.spec.options?.templateParameters\n  }\n\n  /** Set Document views\n   * @param views - document views. See {@link ViewBuilder} and {@link View}\n   * @returns document builder with document based on views provided. See {@link DocumentBuilder}\n   */\n  views(views: (View | ViewBuilder)[]): DocumentBuilder {\n    return this.clone({views})\n  }\n\n  /** Get Document views\n   * @returns document views. See {@link ViewBuilder} and {@link View}\n   */\n  getViews(): (View | ViewBuilder)[] {\n    return this.spec.views || []\n  }\n\n  /** Serialize Document builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document node based on path, index and hint provided in options. See {@link DocumentNode}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): DocumentNode {\n    const urlId = path[index || path.length - 1]\n\n    // Try to grab document ID / editor ID from URL if not defined\n    const id = this.spec.id || (urlId && `${urlId}`) || ''\n    const options: Partial<DocumentOptions> = {\n      id,\n      type: undefined,\n      template: undefined,\n      templateParameters: undefined,\n      ...this.spec.options,\n    }\n\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for document nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options || !options.id) {\n      throw new SerializeError(\n        'document id (`id`) is required for document nodes',\n        path,\n        id,\n        hint,\n      ).withHelpUrl(HELP_URL.DOCUMENT_ID_REQUIRED)\n    }\n\n    if (!options || !options.type) {\n      throw new SerializeError(\n        'document type (`schemaType`) is required for document nodes',\n        path,\n        id,\n        hint,\n      )\n    }\n\n    const views = (this.spec.views && this.spec.views.length > 0 ? this.spec.views : [form()]).map(\n      (item, i) => maybeSerializeView(item, i, path),\n    )\n\n    const viewIds = views.map((view) => view.id)\n    const dupes = uniq(viewIds.filter((viewId, i) => viewIds.includes(viewId, i + 1)))\n    if (dupes.length > 0) {\n      throw new SerializeError(\n        `document node has views with duplicate IDs: ${dupes.join(',  ')}`,\n        path,\n        id,\n        hint,\n      )\n    }\n\n    return {\n      ...this.spec,\n      child: this.spec.child || createDocumentChildResolver(this._context),\n      id: validateId(id, path, index),\n      type: 'document',\n      options: getDocumentOptions(options),\n      views,\n    }\n  }\n\n  /** Clone Document builder\n   * @param withSpec - partial document node specification used to extend the cloned builder. See {@link PartialDocumentNode}\n   * @returns document builder based on context and spec provided. See {@link DocumentBuilder}\n   */\n  clone(withSpec: PartialDocumentNode = {}): DocumentBuilder {\n    const builder = new DocumentBuilder(this._context)\n    const options = {...(this.spec.options || {}), ...(withSpec.options || {})}\n    builder.spec = {...this.spec, ...withSpec, options}\n    return builder\n  }\n}\n\nfunction getDocumentOptions(spec: Partial<DocumentOptions>): DocumentOptions {\n  const opts: DocumentOptions = {\n    id: spec.id || '',\n    type: spec.type || '*',\n  }\n\n  if (spec.template) {\n    opts.template = spec.template\n  }\n\n  if (spec.templateParameters) {\n    opts.templateParameters = spec.templateParameters\n  }\n\n  return opts\n}\n\n/** @internal */\nexport function documentFromEditor(context: StructureContext, spec?: EditorNode): DocumentBuilder {\n  let doc = spec?.type\n    ? // Use user-defined document fragment as base if possible\n      context.resolveDocumentNode({schemaType: spec.type})\n    : // Fall back to plain old document builder\n      new DocumentBuilder(context)\n\n  if (!spec) return doc\n\n  const {id, type, template, templateParameters} = spec.options\n  doc = doc.id(spec.id).documentId(id)\n\n  if (type) {\n    doc = doc.schemaType(type)\n  }\n  if (template) {\n    doc = doc.initialValueTemplate(template, templateParameters)\n  }\n  if (spec.child) {\n    doc = doc.child(spec.child)\n  }\n\n  return doc\n}\n\n/** @internal */\nexport function documentFromEditorWithInitialValue(\n  {resolveDocumentNode, templates}: StructureContext,\n  templateId: string,\n  parameters?: Record<string, unknown>,\n): DocumentBuilder {\n  const template = templates.find((t) => t.id === templateId)\n\n  if (!template) {\n    throw new Error(`Template with ID \"${templateId}\" not defined`)\n  }\n\n  return resolveDocumentNode({schemaType: template.schemaType}).initialValueTemplate(\n    templateId,\n    parameters,\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type InitialValueTemplateItem} from 'sanity'\n\nimport {type BaseIntentParams, type IntentParams} from './Intent'\nimport {type MenuItem, MenuItemBuilder} from './MenuItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * A `InitialValueTemplateItemBuilder` is used to build a document node with an initial value set.\n *\n * @public\n */\nexport class InitialValueTemplateItemBuilder implements Serializable<InitialValueTemplateItem> {\n  /** Initial Value template item option object. See {@link InitialValueTemplateItem} */\n  protected spec: Partial<InitialValueTemplateItem>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: Partial<InitialValueTemplateItem>,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set initial value template item builder ID\n   * @param id - initial value template item ID\n   * @returns initial value template item based on ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  id(id: string): InitialValueTemplateItemBuilder {\n    return this.clone({id})\n  }\n\n  /** Get initial value template item builder ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getId(): Partial<InitialValueTemplateItem>['id'] {\n    return this.spec.id\n  }\n\n  /** Set initial value template item title\n   * @param title - initial value template item title\n   * @returns initial value template item based on title provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  title(title: string): InitialValueTemplateItemBuilder {\n    return this.clone({title})\n  }\n\n  /** Get initial value template item title\n   * @returns initial value template item title. See {@link InitialValueTemplateItem}\n   */\n  getTitle(): Partial<InitialValueTemplateItem>['title'] {\n    return this.spec.title\n  }\n\n  /** Set initial value template item description\n   * @param description - initial value template item description\n   * @returns initial value template item builder based on description provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  description(description: string): InitialValueTemplateItemBuilder {\n    return this.clone({description})\n  }\n\n  /** Get initial value template item description\n   * @returns initial value template item description. See {@link InitialValueTemplateItem}\n   */\n  getDescription(): Partial<InitialValueTemplateItem>['description'] {\n    return this.spec.description\n  }\n\n  /** Set initial value template ID\n   * @param templateId - initial value template item template ID\n   * @returns initial value template item based builder on template ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  templateId(templateId: string): InitialValueTemplateItemBuilder {\n    // Let's try to be a bit helpful and assign an ID from template ID if none is specified\n    const paneId = this.spec.id || templateId\n    return this.clone({\n      id: paneId,\n      templateId,\n    })\n  }\n\n  /** Get initial value template item template ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getTemplateId(): Partial<InitialValueTemplateItem>['templateId'] {\n    return this.spec.templateId\n  }\n\n  /** Get initial value template item template parameters\n   * @param parameters - initial value template item parameters\n   * @returns initial value template item builder based on parameters provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  parameters(parameters: {[key: string]: any}): InitialValueTemplateItemBuilder {\n    return this.clone({parameters})\n  }\n\n  /** Get initial value template item template parameters\n   * @returns initial value template item parameters. See {@link InitialValueTemplateItem}\n   */\n  getParameters(): Partial<InitialValueTemplateItem>['parameters'] {\n    return this.spec.parameters\n  }\n\n  /** Serialize initial value template item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns initial value template item object based on the path, index and hint provided in options. See {@link InitialValueTemplateItem}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): InitialValueTemplateItem {\n    const {spec, _context} = this\n    const {templates} = _context\n\n    if (typeof spec.id !== 'string' || !spec.id) {\n      throw new SerializeError(\n        '`id` is required for initial value template item nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!spec.templateId) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const template = templates.find((t) => t.id === spec.templateId)\n\n    if (!template) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: spec.id,\n      templateId: spec.id,\n      schemaType: template.schemaType,\n      type: 'initialValueTemplateItem',\n      description: spec.description || template.description,\n      title: spec.title || template.title,\n      subtitle: spec.subtitle,\n      icon: spec.icon || template.icon,\n      initialDocumentId: spec.initialDocumentId,\n      parameters: spec.parameters,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - initial value template item builder options. See {@link InitialValueTemplateItemBuilder}\n   * @returns initial value template item builder based on the context and options provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  clone(withSpec: Partial<InitialValueTemplateItem> = {}): InitialValueTemplateItemBuilder {\n    const builder = new InitialValueTemplateItemBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n\n/** @internal */\nexport function defaultInitialValueTemplateItems(\n  context: StructureContext,\n): InitialValueTemplateItemBuilder[] {\n  const {schema, getStructureBuilder, templates} = context\n\n  // Sort templates by their schema type, in order or definition\n  const typeNames = schema.getTypeNames()\n  const ordered = templates\n    // Don't list templates that require parameters\n    // TODO: this should use the new-document template items instead maybe?\n    .filter((tpl) => !tpl.parameters?.length)\n    .sort((a, b) => typeNames.indexOf(a.schemaType) - typeNames.indexOf(b.schemaType))\n\n  // Create actual template items out of the templates\n  return ordered.map((tpl) => getStructureBuilder().initialValueTemplateItem(tpl.id))\n}\n\n/** @internal */\nexport function maybeSerializeInitialValueTemplateItem(\n  item: InitialValueTemplateItem | InitialValueTemplateItemBuilder,\n  index: number,\n  path: SerializePath,\n): InitialValueTemplateItem {\n  return item instanceof InitialValueTemplateItemBuilder ? item.serialize({path, index}) : item\n}\n\n/** @internal */\nexport function menuItemsFromInitialValueTemplateItems(\n  context: StructureContext,\n  templateItems: InitialValueTemplateItem[],\n): MenuItem[] {\n  const {schema, templates} = context\n  return templateItems.map((item) => {\n    const template = templates.find((t) => t.id === item.templateId)\n    const title = item.title || template?.title || 'Create'\n\n    const params: BaseIntentParams = {}\n    if (template && template.schemaType) {\n      params.type = template.schemaType\n    }\n\n    if (item.templateId) {\n      params.template = item.templateId\n    }\n\n    const intentParams: IntentParams = item.parameters ? [params, item.parameters] : params\n    const schemaType = template && schema.get(template.schemaType)\n\n    const i18n = item.i18n || template?.i18n\n\n    let builder = new MenuItemBuilder(context)\n      .title(title)\n      .icon((template && template.icon) || schemaType?.icon || AddIcon)\n      .intent({type: 'create', params: intentParams})\n\n    if (i18n) {\n      builder = builder.i18n(i18n)\n    }\n\n    return builder.serialize()\n  })\n}\n","import {getTypeNamesFromFilter, type PartialDocumentList} from './DocumentList'\nimport {type StructureNode} from './StructureNodes'\n\n/**\n * Intent parameters (json)\n *\n * @public\n */\nexport type IntentJsonParams = {[key: string]: any}\n\n/**\n * Base intent parameters\n *\n * @public\n * @todo dedupe with core\n */\nexport interface BaseIntentParams {\n  /**\n   * Document schema type name to create/edit.\n   * Required for `create` intents, optional for `edit` (but encouraged, safer and faster)\n   */\n  type?: string\n\n  /**\n   * ID of the document to create/edit.\n   * Required for `edit` intents, optional for `create`.\n   */\n  id?: string\n\n  /**\n   * Name (ID) of initial value template to use for `create` intent. Optional.\n   */\n  template?: string\n\n  /**\n   * Experimental field path\n   *\n   * @beta\n   * @experimental\n   * @hidden\n   */\n  path?: string\n\n  /**\n   * Optional \"mode\" to use for edit intent.\n   * Known modes are `structure` and `presentation`.\n   */\n  mode?: string\n\n  /**\n   * Arbitrary/custom parameters are generally discouraged - try to keep them to a minimum,\n   * or use `payload` (arbitrary JSON-serializable object) instead.\n   */\n  [key: string]: string | undefined\n}\n\n/** @internal */\nexport const DEFAULT_INTENT_HANDLER = Symbol('Document type list canHandleIntent')\n\n/**\n * Intent parameters\n * See {@link router.BaseIntentParams} and {@link router.IntentJsonParams}\n *\n * @public\n */\nexport type IntentParams = BaseIntentParams | [BaseIntentParams, IntentJsonParams]\n\n/**\n * Interface for intents\n * @public */\n// TODO: intents should be unified somewhere\nexport interface Intent {\n  /** Intent type */\n  type: string\n  /** Intent parameters. See {@link IntentParams}\n   */\n  params?: IntentParams\n}\n\n/**\n * Interface for intent checker\n *\n * @public\n */\nexport interface IntentChecker {\n  (\n    /** Intent name */\n    intentName: string,\n    /** Intent checker parameter */\n    params: {[key: string]: any},\n    /** Structure context. See {@link StructureNode} */\n    context: {pane: StructureNode; index: number},\n  ): boolean\n  /** intent checker identify */\n  identity?: symbol\n}\n\n/** @internal */\nexport const defaultIntentChecker: IntentChecker = (intentName, params, {pane}): boolean => {\n  const isEdit = intentName === 'edit'\n  const isCreate = intentName === 'create'\n  const typedSpec = pane as PartialDocumentList\n  const paneFilter = typedSpec.options?.filter || ''\n  const paneParams = typedSpec.options?.params || {}\n  const typeNames = typedSpec.schemaTypeName\n    ? [typedSpec.schemaTypeName]\n    : getTypeNamesFromFilter(paneFilter, paneParams)\n\n  const initialValueTemplates = typedSpec.initialValueTemplates || []\n\n  if (isCreate && params.template) {\n    return initialValueTemplates.some((tpl) => tpl.templateId === params.template)\n  }\n\n  return (\n    (isEdit && params.id && typeNames.includes(params.type)) ||\n    (isCreate && typeNames.includes(params.type))\n  )\n}\n\ndefaultIntentChecker.identity = DEFAULT_INTENT_HANDLER\n","export const layoutOptions = ['default', 'card', 'media', 'detail', 'block']\n","import {type I18nTextRecord, type InitialValueTemplateItem, type PreviewLayoutKey} from 'sanity'\n\nimport {\n  type InitialValueTemplateItemBuilder,\n  maybeSerializeInitialValueTemplateItem,\n} from './InitialValueTemplateItem'\nimport {defaultIntentChecker, type IntentChecker} from './Intent'\nimport {layoutOptions} from './Layout'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\nfunction noChildResolver() {\n  return undefined\n}\n\n/** @internal */\nexport const shallowIntentChecker: IntentChecker = (intentName, params, {pane, index}): boolean => {\n  return index <= 1 && defaultIntentChecker(intentName, params, {pane, index})\n}\n\n/**\n * Interface for list display options\n *\n * @public */\nexport interface ListDisplayOptions {\n  /** Check if list display should show icons */\n  showIcons?: boolean\n}\n\n/**\n * Interface for base generic list\n *\n * @public\n */\nexport interface BaseGenericList extends StructureNode {\n  /** List layout key. */\n  defaultLayout?: PreviewLayoutKey\n  /** Can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** List display options. See {@link ListDisplayOptions} */\n  displayOptions?: ListDisplayOptions\n  /** List child. See {@link Child} */\n  child: Child\n  /** List initial values array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n}\n\n/**\n * Interface for generic list\n *\n * @public\n */\n// \"POJO\"/verbatim-version - end result\nexport interface GenericList extends BaseGenericList {\n  /** List type */\n  type: string\n  /** List menu items array. See {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** List menu item groups array. See {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n}\n\n/**\n * Interface for buildable generic list\n *\n * @public\n */\n// Used internally in builder classes to make everything optional\nexport interface BuildableGenericList extends Partial<BaseGenericList> {\n  /** List menu items array. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** List menu items groups array. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for generic list input\n * Allows builders and only requires things not inferrable\n *\n * @public */\n// Input version, allows builders and only requires things not inferrable\nexport interface GenericListInput extends StructureNode {\n  /** Input id */\n  id: string\n  /** Input title */\n  title: string\n  /** Input menu items groups. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Input menu items groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  /** Input initial value array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n  /** Input default layout. */\n  defaultLayout?: PreviewLayoutKey\n  /** If input can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** Input child of type {@link Child} */\n  child?: Child\n}\n\n/**\n * Class for building generic lists\n *\n * @public\n */\nexport abstract class GenericListBuilder<TList extends BuildableGenericList, ConcreteImpl>\n  implements Serializable<GenericList>\n{\n  /** Check if initial value templates are set */\n  protected initialValueTemplatesSpecified = false\n  /** Generic list option object */\n  protected spec: TList = {} as TList\n\n  /** Set generic list ID\n   * @param id - generic list ID\n   * @returns generic list builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n\n  /** Get generic list ID\n   * @returns generic list ID\n   */\n  getId(): TList['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic list title\n   * @param title - generic list title\n   * @returns generic list builder based on title and ID provided.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get generic list title\n   * @returns generic list title\n   */\n  getTitle(): TList['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ConcreteImpl {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): TList['i18n'] {\n    return this.spec.i18n\n  }\n\n  /** Set generic list layout\n   * @param defaultLayout - generic list layout key.\n   * @returns generic list builder based on layout provided.\n   */\n  defaultLayout(defaultLayout: PreviewLayoutKey): ConcreteImpl {\n    return this.clone({defaultLayout})\n  }\n\n  /** Get generic list layout\n   * @returns generic list layout\n   */\n  getDefaultLayout(): TList['defaultLayout'] {\n    return this.spec.defaultLayout\n  }\n\n  /** Set generic list menu items\n   * @param menuItems - generic list menu items. See {@link MenuItem} and {@link MenuItemBuilder}\n   * @returns generic list builder based on menu items provided.\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[] | undefined): ConcreteImpl {\n    return this.clone({menuItems})\n  }\n\n  /** Get generic list menu items\n   * @returns generic list menu items\n   */\n  getMenuItems(): TList['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set generic list menu item groups\n   * @param menuItemGroups - generic list menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder}\n   * @returns generic list builder based on menu item groups provided.\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ConcreteImpl {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get generic list menu item groups\n   * @returns generic list menu item groups\n   */\n  getMenuItemGroups(): TList['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  /** Set generic list child\n   * @param child - generic list child. See {@link Child}\n   * @returns generic list builder based on child provided (clone).\n   */\n  child(child: Child): ConcreteImpl {\n    return this.clone({child})\n  }\n\n  /** Get generic list child\n   * @returns generic list child\n   */\n  getChild(): TList['child'] {\n    return this.spec.child\n  }\n\n  /** Set generic list can handle intent\n   * @param canHandleIntent - generic list intent checker. See {@link IntentChecker}\n   * @returns generic list builder based on can handle intent provided.\n   */\n  canHandleIntent(canHandleIntent?: IntentChecker): ConcreteImpl {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Get generic list can handle intent\n   * @returns generic list can handle intent\n   */\n  getCanHandleIntent(): TList['canHandleIntent'] {\n    return this.spec.canHandleIntent\n  }\n\n  /** Set generic list display options\n   * @param enabled - allow / disallow for showing icons\n   * @returns generic list builder based on display options (showIcons) provided.\n   */\n  showIcons(enabled = true): ConcreteImpl {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcons: enabled},\n    })\n  }\n\n  /** Get generic list display options\n   * @returns generic list display options (specifically showIcons)\n   */\n  getShowIcons(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcons : undefined\n  }\n\n  /** Set generic list initial value templates\n   * @param templates - generic list initial value templates. See {@link InitialValueTemplateItemBuilder}\n   * @returns generic list builder based on templates provided.\n   */\n  initialValueTemplates(\n    templates:\n      | InitialValueTemplateItem\n      | InitialValueTemplateItemBuilder\n      | Array<InitialValueTemplateItem | InitialValueTemplateItemBuilder>,\n  ): ConcreteImpl {\n    this.initialValueTemplatesSpecified = true\n    return this.clone({initialValueTemplates: Array.isArray(templates) ? templates : [templates]})\n  }\n\n  /** Get generic list initial value templates\n   * @returns generic list initial value templates\n   */\n  getInitialValueTemplates(): TList['initialValueTemplates'] {\n    return this.spec.initialValueTemplates\n  }\n\n  /** Serialize generic list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic list object based on path provided in options. See {@link GenericList}\n   */\n  serialize(options: SerializeOptions = {path: []}): GenericList {\n    const id = this.spec.id || ''\n    const path = options.path\n\n    const defaultLayout = this.spec.defaultLayout\n    if (defaultLayout && !layoutOptions.includes(defaultLayout)) {\n      throw new SerializeError(\n        `\\`layout\\` must be one of ${layoutOptions.map((item) => `\"${item}\"`).join(', ')}`,\n        path,\n        id || options.index,\n        this.spec.title,\n      )\n    }\n\n    const initialValueTemplates = (this.spec.initialValueTemplates || []).map((item, i) =>\n      maybeSerializeInitialValueTemplateItem(item, i, path),\n    )\n\n    return {\n      id: validateId(id, options.path, id || options.index),\n      title: this.spec.title,\n      i18n: this.spec.i18n,\n      type: 'genericList',\n      defaultLayout,\n      child: this.spec.child || noChildResolver,\n      canHandleIntent: this.spec.canHandleIntent || shallowIntentChecker,\n      displayOptions: this.spec.displayOptions,\n      initialValueTemplates,\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, path),\n      ),\n    }\n  }\n\n  /** Clone generic list builder (allows for options overriding)\n   * @param _withSpec - generic list options.\n   * @returns generic list builder.\n   */\n  abstract clone(_withSpec?: object): ConcreteImpl\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {AddIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrderingItem} from '@sanity/types'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, type InitialValueTemplateItem} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions, type ItemChild} from './ChildResolver'\nimport {DocumentBuilder} from './Document'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n} from './GenericList'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Child, type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\n\nconst validateFilter = (spec: PartialDocumentList, options: SerializeOptions) => {\n  const filter = spec.options?.filter.trim() || ''\n\n  if (['*', '{'].includes(filter[0])) {\n    throw new SerializeError(\n      `\\`filter\\` cannot start with \\`${filter[0]}\\` - looks like you are providing a query, not a filter`,\n      options.path,\n      spec.id,\n      spec.title,\n    ).withHelpUrl(HELP_URL.QUERY_PROVIDED_FOR_FILTER)\n  }\n\n  return filter\n}\n\nconst createDocumentChildResolverForItem =\n  (context: StructureContext): ChildResolver =>\n  (itemId: string, options: ChildResolverOptions): ItemChild | Promise<ItemChild> | undefined => {\n    const parentItem = options.parent as DocumentList\n    const template = options.params?.template\n      ? context.templates.find((tpl) => tpl.id === options.params.template)\n      : undefined\n    const type = template\n      ? template.schemaType\n      : parentItem.schemaTypeName || resolveTypeForDocument(context.getClient, itemId)\n\n    return Promise.resolve(type).then((schemaType) =>\n      schemaType\n        ? context.resolveDocumentNode({schemaType, documentId: itemId})\n        : new DocumentBuilder(context).id('editor').documentId(itemId).schemaType(''),\n    )\n  }\n\n/**\n * Partial document list\n *\n * @public\n */\nexport interface PartialDocumentList extends BuildableGenericList {\n  /** Document list options. See {@link DocumentListOptions} */\n  options?: DocumentListOptions\n  /** Schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document list input\n *\n * @public\n */\nexport interface DocumentListInput extends GenericListInput {\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n}\n\n/**\n * Interface for document list\n *\n * @public\n */\nexport interface DocumentList extends GenericList {\n  type: 'documentList'\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n  /** Document list child. See {@link Child} */\n  child: Child\n  /** Document schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document List options\n *\n * @public\n */\nexport interface DocumentListOptions {\n  /** Document list filter */\n  filter: string\n  /** Document list parameters */\n  params?: Record<string, unknown>\n  /** Document list API version */\n  apiVersion?: string\n  /** Document list API default ordering array. */\n  defaultOrdering?: SortOrderingItem[]\n}\n\n/**\n * Class for building document list\n *\n * @public\n */\nexport class DocumentListBuilder extends GenericListBuilder<\n  PartialDocumentList,\n  DocumentListBuilder\n> {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super()\n    this.spec = spec || {}\n    this.initialValueTemplatesSpecified = Boolean(spec?.initialValueTemplates)\n  }\n\n  /** Set API version\n   * @param apiVersion - API version\n   * @returns document list builder based on the options and API version provided. See {@link DocumentListBuilder}\n   */\n  apiVersion(apiVersion: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {filter: ''}), apiVersion}})\n  }\n\n  /** Get API version\n   * @returns API version\n   */\n  getApiVersion(): string | undefined {\n    return this.spec.options?.apiVersion\n  }\n\n  /** Set Document list filter\n   * @param filter - GROQ-filter used to determine which documents to display. Do not support joins, since they operate on individual documents, and will ignore order-clauses and projections. See {@link https://www.sanity.io/docs/realtime-updates}\n   * @returns document list builder based on the options and filter provided. See {@link DocumentListBuilder}\n   */\n  filter(filter: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {}), filter}})\n  }\n\n  /** Get Document list filter\n   * @returns filter\n   */\n  getFilter(): string | undefined {\n    return this.spec.options?.filter\n  }\n\n  /** Set Document list schema type name\n   * @param type - schema type name.\n   * @returns document list builder based on the schema type name provided. See {@link DocumentListBuilder}\n   */\n  schemaType(type: SchemaType | string): DocumentListBuilder {\n    const schemaTypeName = typeof type === 'string' ? type : type.name\n    return this.clone({schemaTypeName})\n  }\n\n  /** Get Document list schema type name\n   * @returns schema type name\n   */\n  getSchemaType(): string | undefined {\n    return this.spec.schemaTypeName\n  }\n\n  /** Set Document list options' parameters\n   * @param params - parameters\n   * @returns document list builder based on the options provided. See {@link DocumentListBuilder}\n   */\n  params(params: Record<string, unknown>): DocumentListBuilder {\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), params},\n    })\n  }\n\n  /** Get Document list options' parameters\n   * @returns options\n   */\n  getParams(): Record<string, unknown> | undefined {\n    return this.spec.options?.params\n  }\n\n  /** Set Document list default ordering\n   * @param ordering - default sort ordering array. See {@link SortOrderingItem}\n   * @returns document list builder based on ordering provided. See {@link DocumentListBuilder}\n   */\n  defaultOrdering(ordering: SortOrderingItem[]): DocumentListBuilder {\n    if (!Array.isArray(ordering)) {\n      throw new Error('`defaultOrdering` must be an array of order clauses')\n    }\n\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), defaultOrdering: ordering},\n    })\n  }\n\n  /** Get Document list default ordering\n   * @returns default ordering. See {@link SortOrderingItem}\n   */\n  getDefaultOrdering(): SortOrderingItem[] | undefined {\n    return this.spec.options?.defaultOrdering\n  }\n\n  /** Serialize Document list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list object based on path provided in options. See {@link DocumentList}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentList {\n    if (typeof this.spec.id !== 'string' || !this.spec.id) {\n      throw new SerializeError(\n        '`id` is required for document lists',\n        options.path,\n        options.index,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!this.spec.options || !this.spec.options.filter) {\n      throw new SerializeError(\n        '`filter` is required for document lists',\n        options.path,\n        this.spec.id,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.FILTER_REQUIRED)\n    }\n\n    const hasSimpleFilter = this.spec.options?.filter === '_type == $type'\n    if (!hasSimpleFilter && this.spec.options.filter && !this.spec.options.apiVersion) {\n      console.warn(\n        `No apiVersion specified for document type list with custom filter: \\`${this.spec.options.filter}\\`. This will be required in the future. See %s for more info.`,\n        generateHelpUrl(HELP_URL.API_VERSION_REQUIRED_FOR_CUSTOM_FILTER),\n      )\n    }\n    return {\n      ...super.serialize(options),\n      type: 'documentList',\n      schemaTypeName: this.spec.schemaTypeName,\n      child: this.spec.child || createDocumentChildResolverForItem(this._context),\n      options: {\n        ...this.spec.options,\n        // @todo: make specifying .apiVersion required when using custom (non-simple) filters in v4\n        apiVersion: this.spec.options.apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n        filter: validateFilter(this.spec, options),\n      },\n    }\n  }\n\n  /** Clone Document list builder (allows for options overriding)\n   * @param withSpec - override document list spec. See {@link PartialDocumentList}\n   * @returns document list builder. See {@link DocumentListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentListBuilder {\n    const builder = new DocumentListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n\n    if (!this.initialValueTemplatesSpecified) {\n      builder.spec.initialValueTemplates = inferInitialValueTemplates(this._context, builder.spec)\n    }\n\n    if (!builder.spec.schemaTypeName) {\n      builder.spec.schemaTypeName = inferTypeName(builder.spec)\n    }\n\n    return builder\n  }\n\n  /** Get Document list spec\n   * @returns document list spec. See {@link PartialDocumentList}\n   */\n  getSpec(): PartialDocumentList {\n    return this.spec\n  }\n}\n\nfunction inferInitialValueTemplates(\n  context: StructureContext,\n  spec: PartialDocumentList,\n): InitialValueTemplateItem[] | undefined {\n  const {document} = context\n  const {schemaTypeName, options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = schemaTypeName\n    ? [schemaTypeName]\n    : Array.from(new Set(getTypeNamesFromFilter(filter, params)))\n\n  if (typeNames.length === 0) {\n    return undefined\n  }\n\n  return typeNames\n    .flatMap((schemaType) =>\n      document.resolveNewDocumentOptions({\n        type: 'structure',\n        schemaType,\n      }),\n    )\n    .map((option) => ({...option, icon: AddIcon}))\n}\n\nfunction inferTypeName(spec: PartialDocumentList): string | undefined {\n  const {options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = getTypeNamesFromFilter(filter, params)\n  return typeNames.length === 1 ? typeNames[0] : undefined\n}\n\n/** @internal */\nexport function getTypeNamesFromFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  let typeNames = getTypeNamesFromEqualityFilter(filter, params)\n\n  if (typeNames.length === 0) {\n    typeNames = getTypeNamesFromInTypesFilter(filter, params)\n  }\n\n  return typeNames\n}\n\n// From _type == \"movie\" || _type == $otherType\nfunction getTypeNamesFromEqualityFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern =\n    /\\b_type\\s*==\\s*(['\"].*?['\"]|\\$.*?(?:\\s|$))|\\B(['\"].*?['\"]|\\$.*?(?:\\s|$))\\s*==\\s*_type/g\n  const matches: string[] = []\n  let match\n  while ((match = pattern.exec(filter)) !== null) {\n    matches.push(match[1] || match[2])\n  }\n\n  return matches\n    .map((candidate) => {\n      const typeName = candidate[0] === '$' ? params[candidate.slice(1)] : candidate\n      const normalized = ((typeName as string) || '').trim().replace(/^[\"']|[\"']$/g, '')\n      return normalized\n    })\n    .filter(Boolean)\n}\n\n// From _type in [\"dog\", \"cat\", $otherSpecies]\nfunction getTypeNamesFromInTypesFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern = /\\b_type\\s+in\\s+\\[(.*?)\\]/\n  const matches = filter.match(pattern)\n  if (!matches) {\n    return []\n  }\n\n  return matches[1]\n    .split(/,\\s*/)\n    .map((match) => match.trim().replace(/^[\"']+|[\"']+$/g, ''))\n    .map((item) => (item[0] === '$' ? params[item.slice(1)] : item))\n    .filter(Boolean) as string[]\n}\n","import {find} from 'lodash'\nimport {isRecord} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions} from './ChildResolver'\nimport {isDocumentListItem} from './DocumentListItem'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n  shallowIntentChecker,\n} from './GenericList'\nimport {type IntentChecker} from './Intent'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Divider, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst getArgType = (thing: ListItem) => {\n  if (thing instanceof ListBuilder) {\n    return 'ListBuilder'\n  }\n\n  if (isPromise<ListItem>(thing)) {\n    return 'Promise'\n  }\n\n  return Array.isArray(thing) ? 'array' : typeof thing\n}\n\nconst isListItem = (item: ListItem | Divider): item is ListItem => {\n  return item.type === 'listItem'\n}\n\nconst defaultCanHandleIntent: IntentChecker = (intentName: string, params, context) => {\n  const pane = context.pane as List\n  const items = pane.items || []\n  return (\n    items\n      .filter(isDocumentListItem)\n      .some((item) => item.schemaType.name === params.type && item._id === params.id) ||\n    shallowIntentChecker(intentName, params, context)\n  )\n}\n\nconst resolveChildForItem: ChildResolver = (itemId: string, options: ChildResolverOptions) => {\n  const parentItem = options.parent as List\n  const items = parentItem.items.filter(isListItem)\n  const target = (items.find((item) => item.id === itemId) || {child: undefined}).child\n\n  if (!target || typeof target !== 'function') {\n    return target\n  }\n\n  return typeof target === 'function' ? target(itemId, options) : target\n}\n\nfunction maybeSerializeListItem(\n  item: ListItem | ListItemBuilder | Divider,\n  index: number,\n  path: SerializePath,\n): ListItem | Divider {\n  if (item instanceof ListItemBuilder) {\n    return item.serialize({path, index})\n  }\n\n  const listItem = item as ListItem\n  if (listItem && listItem.type === 'divider') {\n    return item as Divider\n  }\n\n  if (!listItem || listItem.type !== 'listItem') {\n    const gotWhat = (listItem && listItem.type) || getArgType(listItem)\n    const helpText = gotWhat === 'array' ? ' - did you forget to spread (...moreItems)?' : ''\n    throw new SerializeError(\n      `List items must be of type \"listItem\", got \"${gotWhat}\"${helpText}`,\n      path,\n      index,\n    ).withHelpUrl(HELP_URL.INVALID_LIST_ITEM)\n  }\n\n  return item\n}\n\nfunction isPromise<T>(thing: unknown): thing is PromiseLike<T> {\n  return isRecord(thing) && typeof thing.then === 'function'\n}\n\n/**\n * Interface for List\n *\n * @public\n */\nexport interface List extends GenericList {\n  type: 'list'\n  /** List items. See {@link ListItem} and {@link Divider} */\n  items: (ListItem | Divider)[]\n}\n\n/**\n * Interface for list input\n *\n * @public\n */\nexport interface ListInput extends GenericListInput {\n  /** List input items array. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * Interface for buildable list\n *\n * @public\n */\nexport interface BuildableList extends BuildableGenericList {\n  /** List items. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * A `ListBuilder` is used to build a list of items in the structure tool.\n *\n * @public */\nexport class ListBuilder extends GenericListBuilder<BuildableList, ListBuilder> {\n  /** buildable list option object. See {@link BuildableList} */\n  protected spec: BuildableList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListInput,\n  ) {\n    super()\n    this.spec = spec ? spec : {}\n    this.initialValueTemplatesSpecified = Boolean(spec && spec.initialValueTemplates)\n  }\n\n  /**\n   * Set list builder based on items provided\n   * @param items - list items. See {@link ListItemBuilder}, {@link ListItem} and {@link Divider}\n   * @returns list builder based on items provided. See {@link ListBuilder}\n   */\n  items(items: (ListItemBuilder | ListItem | Divider)[]): ListBuilder {\n    return this.clone({items})\n  }\n\n  /** Get list builder items\n   * @returns list items. See {@link BuildableList}\n   */\n  getItems(): BuildableList['items'] {\n    return this.spec.items\n  }\n\n  /** Serialize list builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns list based on path in options. See {@link List}\n   */\n  serialize(options: SerializeOptions = {path: []}): List {\n    const id = this.spec.id\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for lists',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const items = typeof this.spec.items === 'undefined' ? [] : this.spec.items\n    if (!Array.isArray(items)) {\n      throw new SerializeError(\n        '`items` must be an array of items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY)\n    }\n\n    const path = (options.path || []).concat(id)\n    const serializedItems = items.map((item, index) => maybeSerializeListItem(item, index, path))\n    const dupes = serializedItems.filter((val, i) => find(serializedItems, {id: val.id}, i + 1))\n\n    if (dupes.length > 0) {\n      const dupeIds = dupes.map((item) => item.id).slice(0, 5)\n      const dupeDesc = dupes.length > 5 ? `${dupeIds.join(', ')}...` : dupeIds.join(', ')\n      throw new SerializeError(\n        `List items with same ID found (${dupeDesc})`,\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE)\n    }\n\n    return {\n      ...super.serialize(options),\n      type: 'list',\n      canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,\n      child: this.spec.child || resolveChildForItem,\n      items: serializedItems,\n    }\n  }\n\n  /**\n   * Clone list builder and return new list builder based on context and spec provided\n   * @param withSpec - list options. See {@link BuildableList}\n   * @returns new list builder based on context and spec provided. See {@link ListBuilder}\n   */\n  clone(withSpec?: BuildableList): ListBuilder {\n    const builder = new ListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {type Observable} from 'rxjs'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver, type ItemChild} from './ChildResolver'\nimport {ComponentBuilder} from './Component'\nimport {DocumentBuilder} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {ListBuilder} from './List'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Collection,\n  type CollectionBuilder,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Unserialized list item child.\n * See {@link Collection}, {@link CollectionBuilder}, {@link ChildResolver} and {@link ItemChild}\n *\n * @public\n */\nexport type UnserializedListItemChild =\n  | Collection\n  | CollectionBuilder\n  | ChildResolver\n  | Observable<ItemChild>\n\n/**\n * Child of List Item\n * See {@link Collection}, {@link ChildResolver}, {@link ItemChild}\n * @public\n */\nexport type ListItemChild = Collection | ChildResolver | Observable<ItemChild> | undefined\n\n/**\n * Interface for serialize list item options\n *\n * @public\n */\nexport interface ListItemSerializeOptions extends SerializeOptions {\n  /** Check if list item title is optional */\n  titleIsOptional?: boolean\n}\n\n/**\n * Interface for ist item display options\n *\n * @public */\nexport interface ListItemDisplayOptions {\n  /** Check if list item display should show icon */\n  showIcon?: boolean\n}\n\n/**\n * interface for list item input\n *\n * @public */\nexport interface ListItemInput {\n  /** List item id */\n  id: string\n  /** List item title */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Interface for List Item\n *\n * @public */\nexport interface ListItem {\n  /** List item id */\n  id: string\n  /** List item type */\n  type: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item title. Note that the `i18n` key and namespace will take precedence. */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType\n}\n\n/**\n * Interface for unserialized list items.\n *\n * @public\n */\nexport interface UnserializedListItem {\n  /** List item ID */\n  id: string\n  /** List item title */\n  title: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link UnserializedListItemChild} */\n  child?: UnserializedListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Partial list item. See {@link UnserializedListItem}\n *\n * @public */\nexport type PartialListItem = Partial<UnserializedListItem>\n\n/**\n * Class for building list items\n *\n * @public */\nexport class ListItemBuilder implements Serializable<ListItem> {\n  /** List item option object. See {@link PartialListItem} */\n  protected spec: PartialListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListItemInput,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set list item ID\n   * @returns list item builder based on ID provided. See {@link ListItemBuilder}\n   */\n  id(id: string): ListItemBuilder {\n    return this.clone({id})\n  }\n\n  /**\n   * Get list item ID\n   * @returns list item ID. See {@link PartialListItem}\n   */\n  getId(): PartialListItem['id'] {\n    return this.spec.id\n  }\n\n  /**\n   * Set list item title\n   * @returns list item builder based on title provided. See {@link ListItemBuilder}\n   */\n  title(title: string): ListItemBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /**\n   * Get list item title\n   * @returns list item title. See {@link PartialListItem}\n   */\n  getTitle(): PartialListItem['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ListItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set list item icon\n   * @returns list item builder based on icon provided. See {@link ListItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ListItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Set if list item should show icon\n   * @returns list item builder based on showIcon provided. See {@link ListItemBuilder}\n   */\n  showIcon(enabled = true): ListItemBuilder {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcon: enabled},\n    })\n  }\n\n  /**\n   * Check if list item should show icon\n   * @returns true if it should show the icon, false if not, undefined if not set\n   */\n  getShowIcon(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcon : undefined\n  }\n\n  /**\n   *Get list item icon\n   * @returns list item icon. See {@link PartialListItem}\n   */\n  getIcon(): PartialListItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set list item child\n   * @param child - list item child. See {@link UnserializedListItemChild}\n   * @returns list item builder based on child provided. See {@link ListItemBuilder}\n   */\n  child(child: UnserializedListItemChild): ListItemBuilder {\n    return this.clone({child})\n  }\n\n  /**\n   * Get list item child\n   * @returns list item child. See {@link PartialListItem}\n   */\n  getChild(): PartialListItem['child'] {\n    return this.spec.child\n  }\n\n  /**\n   * Set list item schema type\n   * @param schemaType - list item schema type. See {@link SchemaType}\n   * @returns list item builder based on schema type provided. See {@link ListItemBuilder}\n   */\n  schemaType(schemaType: SchemaType | string): ListItemBuilder {\n    return this.clone({schemaType})\n  }\n\n  /**\n   * Get list item schema type\n   * @returns list item schema type. See {@link PartialListItem}\n   */\n  getSchemaType(): PartialListItem['schemaType'] {\n    const schemaType = this.spec.schemaType\n\n    if (typeof schemaType === 'string') {\n      return this._context.schema.get(schemaType)\n    }\n\n    return this.spec.schemaType\n  }\n\n  /** Serialize list item builder\n   * @param options - serialization options. See {@link ListItemSerializeOptions}\n   * @returns list item node based on path provided in options. See {@link ListItem}\n   */\n  serialize(options: ListItemSerializeOptions = {path: []}): ListItem {\n    const {id, title, child} = this.spec\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options.titleIsOptional && (typeof title !== 'string' || !title)) {\n      throw new SerializeError('`title` is required for list items', options.path, id).withHelpUrl(\n        HELP_URL.TITLE_REQUIRED,\n      )\n    }\n\n    let schemaType = this.spec.schemaType\n    if (typeof schemaType === 'string') {\n      const type = this._context.schema.get(schemaType)\n      if (!type) {\n        throw new SerializeError(\n          `Could not find type \"${schemaType}\" in schema`,\n          options.path,\n          id,\n        ).withHelpUrl(HELP_URL.SCHEMA_TYPE_NOT_FOUND)\n      }\n\n      schemaType = type\n    }\n\n    const serializeOptions = {path: options.path.concat(id), hint: 'child'}\n    let listChild =\n      child instanceof ComponentBuilder ||\n      child instanceof DocumentListBuilder ||\n      child instanceof DocumentBuilder ||\n      child instanceof ListBuilder\n        ? child.serialize(serializeOptions)\n        : child\n\n    // In the case of a function, create a bound version that will pass the correct serialize\n    // context, so we may lazily resolve it at some point in the future without losing context\n    if (typeof listChild === 'function') {\n      const originalChild = listChild\n      listChild = (itemId, childOptions) => {\n        return originalChild(itemId, {...childOptions, serializeOptions})\n      }\n    }\n\n    return {\n      ...this.spec,\n      id: validateId(id, options.path, options.index),\n      schemaType,\n      child: listChild,\n      title,\n      type: 'listItem',\n    }\n  }\n\n  /** Clone list item builder\n   * @param withSpec - partial list item options. See {@link PartialListItem}\n   * @returns list item builder based on context and spec provided. See {@link ListItemBuilder}\n   */\n  clone(withSpec?: PartialListItem): ListItemBuilder {\n    const builder = new ListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {isRecord} from 'sanity'\n\nimport {DocumentBuilder} from './Document'\nimport {\n  type ListItem,\n  ListItemBuilder,\n  type ListItemInput,\n  type UnserializedListItem,\n} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document list item input\n *\n * @public\n */\nexport interface DocumentListItemInput extends ListItemInput {\n  /** Document list item input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Interface for document list item\n *\n * @public\n */\nexport interface DocumentListItem extends ListItem {\n  /** Document schema type. See {@link SchemaType} */\n  schemaType: SchemaType\n  /** Document ID */\n  _id: string\n}\n\n/**\n * Partial document list item\n *\n * @public\n */\nexport type PartialDocumentListItem = Partial<UnserializedListItem>\n\nconst createDefaultChildResolver =\n  (context: StructureContext, spec: PartialDocumentListItem) => (documentId: string) => {\n    const schemaType =\n      spec.schemaType &&\n      (typeof spec.schemaType === 'string' ? spec.schemaType : spec.schemaType.name)\n\n    return schemaType\n      ? context.resolveDocumentNode({schemaType, documentId})\n      : new DocumentBuilder(context).id('documentEditor').documentId(documentId)\n  }\n\n/**\n * Class for building a document list item\n *\n * @public\n */\nexport class DocumentListItemBuilder extends ListItemBuilder {\n  /** Document list options. See {@link PartialDocumentListItem} */\n  protected spec: PartialDocumentListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListItemInput,\n  ) {\n    super(_context, spec)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Serialize document list item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list item object based on path provided in options. See {@link DocumentListItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentListItem {\n    const spec = super.serialize({...options, titleIsOptional: true})\n\n    if (!spec.schemaType) {\n      throw new SerializeError(\n        '`schemaType` is required for document list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED)\n    }\n\n    const child = spec.child || createDefaultChildResolver(this._context, spec)\n    return {...spec, child, schemaType: spec.schemaType, _id: spec.id}\n  }\n\n  /** Clone Document list item builder (allows for options overriding)\n   * @param withSpec - Document list item builder options. See {@link PartialDocumentListItem}\n   * @returns document list item builder. See {@link DocumentListItemBuilder}\n   */\n  clone(withSpec?: PartialDocumentListItem): DocumentListItemBuilder {\n    const builder = new DocumentListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport function isDocumentListItem(item: unknown): item is DocumentListItem {\n  return isRecord(item) && typeof item.schemaType !== 'undefined' && typeof item._id === 'string'\n}\n","import {type SchemaType} from '@sanity/types'\n\nimport {DocumentListBuilder, type DocumentListInput, type PartialDocumentList} from './DocumentList'\nimport {type GenericListInput} from './GenericList'\nimport {DEFAULT_INTENT_HANDLER} from './Intent'\nimport {type Child} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document type list input\n *\n * @public\n */\nexport interface DocumentTypeListInput extends Partial<GenericListInput> {\n  /** Document type list input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Class for building a document type list\n *\n * @public\n */\nexport class DocumentTypeListBuilder extends DocumentListBuilder {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super(_context)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set Document type list child\n   * @param child - Child component. See {@link Child}\n   * @returns document type list builder based on child component provided without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  child(child: Child): DocumentTypeListBuilder {\n    return this.cloneWithoutDefaultIntentHandler({child})\n  }\n\n  /** Clone Document type list builder (allows for options overriding)\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder. See {@link DocumentTypeListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    builder.spec = {...this.spec, ...parent.getSpec(), ...(withSpec || {})}\n    return builder\n  }\n\n  /** Clone Document type list builder (allows for options overriding) and remove default intent handler\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  cloneWithoutDefaultIntentHandler(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    const canHandleIntent = this.spec.canHandleIntent\n    const shouldOverride = canHandleIntent && canHandleIntent.identity === DEFAULT_INTENT_HANDLER\n    const override = shouldOverride ? {canHandleIntent: undefined} : {}\n    builder.spec = {\n      ...parent.getSpec(),\n      ...this.spec,\n      ...(withSpec || {}),\n      ...override,\n    }\n    return builder\n  }\n}\n","import {StackCompactIcon, StackIcon} from '@sanity/icons'\nimport {type SchemaType} from '@sanity/types'\nimport {startCase} from 'lodash'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {type DocumentListBuilder} from './DocumentList'\nimport {DocumentTypeListBuilder, type DocumentTypeListInput} from './DocumentTypeList'\nimport {defaultIntentChecker} from './Intent'\nimport {type List} from './List'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {DEFAULT_SELECTED_ORDERING_OPTION} from './Sort'\nimport {type Collection} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst BUNDLED_DOC_TYPES = ['sanity.imageAsset', 'sanity.fileAsset']\n\nfunction isBundledDocType(typeName: string) {\n  return BUNDLED_DOC_TYPES.includes(typeName)\n}\n\nfunction isDocumentType(schemaType: SchemaType) {\n  return schemaType.type?.name === 'document'\n}\n\nfunction isList(collection: Collection): collection is List {\n  return collection.type === 'list'\n}\n\nexport function getDocumentTypes({schema}: StructureContext): string[] {\n  return schema\n    .getTypeNames()\n    .filter((n) => {\n      const schemaType = schema.get(n)\n      return schemaType && isDocumentType(schemaType)\n    })\n    .filter((n) => !isBundledDocType(n))\n}\n\nexport function getDocumentTypeListItems(context: StructureContext): ListItemBuilder[] {\n  const types = getDocumentTypes(context)\n  return types.map((typeName) => getDocumentTypeListItem(context, typeName))\n}\n\nexport function getDocumentTypeListItem(\n  context: StructureContext,\n  typeName: string,\n): ListItemBuilder {\n  const {schema} = context\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new ListItemBuilder(context)\n    .id(typeName)\n    .title(title)\n    .schemaType(type)\n    .child((id, childContext) => {\n      const parent = childContext.parent as Collection\n      const parentItem = isList(parent)\n        ? (parent.items.find((item) => item.id === id) as ListItem)\n        : null\n\n      let list = getDocumentTypeList(context, typeName)\n      if (parentItem && parentItem.title) {\n        list = list.title(parentItem.title)\n      }\n\n      return list\n    })\n}\n\nexport function getDocumentTypeList(\n  context: StructureContext,\n  typeNameOrSpec: string | DocumentTypeListInput,\n): DocumentListBuilder {\n  const {schema, resolveDocumentNode} = context\n\n  const schemaType = typeof typeNameOrSpec === 'string' ? typeNameOrSpec : typeNameOrSpec.schemaType\n  const typeName = typeof schemaType === 'string' ? schemaType : schemaType.name\n  const spec: DocumentTypeListInput =\n    typeof typeNameOrSpec === 'string' ? {schemaType} : typeNameOrSpec\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new DocumentTypeListBuilder(context)\n    .id(spec.id || typeName)\n    .title(spec.title || title)\n    .filter('_type == $type')\n    .params({type: typeName})\n    .schemaType(type)\n    .defaultOrdering(DEFAULT_SELECTED_ORDERING_OPTION.by)\n    .menuItemGroups(\n      spec.menuItemGroups || [\n        {\n          id: 'sorting',\n          title: 'Sort',\n          i18n: {title: {key: 'menu-item-groups.actions-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'layout',\n          title: 'Layout',\n          i18n: {title: {key: 'menu-item-groups.layout-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'actions',\n          title: 'Actions',\n          i18n: {title: {key: 'menu-item-groups.sorting-group', ns: structureLocaleNamespace}},\n        },\n      ],\n    )\n    .child(\n      spec.child ||\n        ((documentId: string) => resolveDocumentNode({schemaType: typeName, documentId})),\n    )\n    .canHandleIntent(spec.canHandleIntent || defaultIntentChecker)\n    .menuItems(\n      spec.menuItems || [\n        // Create new (from action button) will be added in serialization step of GenericList\n\n        // Sort by <Y>\n        ...getOrderingMenuItemsForSchemaType(context, type),\n\n        // Display as <Z>\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.compact-view', ns: structureLocaleNamespace}})\n          .title('Compact view') // fallback title\n          .icon(StackCompactIcon)\n          .action('setLayout')\n          .params({layout: 'default'}),\n\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.detailed-view', ns: structureLocaleNamespace}})\n          .title('Detailed view') // fallback title\n          .icon(StackIcon)\n          .action('setLayout')\n          .params({layout: 'detail'}),\n\n        // Create new (from menu) will be added in serialization step of GenericList\n      ],\n    )\n}\n","import {type SchemaType} from '@sanity/types'\nimport {uniqueId} from 'lodash'\nimport {isValidElementType} from 'react-is'\nimport {getConfigContextFromSource, getPublishedId, type Source} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {ComponentBuilder, type ComponentInput} from './Component'\nimport {DocumentBuilder, documentFromEditor, documentFromEditorWithInitialValue} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {DocumentListItemBuilder} from './DocumentListItem'\nimport {\n  getDocumentTypeList,\n  getDocumentTypeListItem,\n  getDocumentTypeListItems,\n} from './documentTypeListItems'\nimport {\n  defaultInitialValueTemplateItems,\n  InitialValueTemplateItemBuilder,\n  menuItemsFromInitialValueTemplateItems,\n} from './InitialValueTemplateItem'\nimport {ListBuilder} from './List'\nimport {ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItem, getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {MenuItemGroupBuilder} from './MenuItemGroup'\nimport {type Divider} from './StructureNodes'\nimport {\n  type DefaultDocumentNodeResolver,\n  type StructureBuilder,\n  type StructureContext,\n  type UserComponent,\n} from './types'\nimport * as views from './views'\n\n/** @internal */\nexport interface StructureBuilderOptions {\n  source: Source\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n}\n\nfunction hasIcon(schemaType?: SchemaType | string): boolean {\n  if (!schemaType || typeof schemaType === 'string') {\n    return false\n  }\n\n  return Boolean(schemaType.icon)\n}\n\nfunction getDefaultStructure(context: StructureContext): ListBuilder {\n  const items = getDocumentTypeListItems(context)\n  return new ListBuilder(context)\n    .id('__root__')\n    .title('Content')\n    .i18n({title: {key: 'default-definition.content-title', ns: structureLocaleNamespace}})\n    .items(items)\n    .showIcons(items.some((item) => hasIcon(item.getSchemaType())))\n}\n\n/** @internal */\nexport function createStructureBuilder({\n  defaultDocumentNode,\n  source,\n}: StructureBuilderOptions): StructureBuilder {\n  const configContext = getConfigContextFromSource(source)\n  const context: StructureContext = {\n    ...source,\n    getStructureBuilder: () => structureBuilder,\n    resolveDocumentNode: (options) => {\n      let builder =\n        defaultDocumentNode?.(structureBuilder, {...options, ...configContext}) ||\n        new DocumentBuilder(context)\n\n      if (!builder.getId()) {\n        builder = builder.id('documentEditor')\n      }\n\n      if (options.documentId) {\n        builder = builder.documentId(getPublishedId(options.documentId))\n      }\n\n      return builder.schemaType(options.schemaType)\n    },\n  }\n\n  const structureBuilder: StructureBuilder = {\n    defaults: () => getDefaultStructure(context),\n    documentTypeList: (...args) => getDocumentTypeList(context, ...args),\n    documentTypeListItem: (...args) => getDocumentTypeListItem(context, ...args),\n    documentTypeListItems: (...args) => getDocumentTypeListItems(context, ...args),\n    document: (...args) => new DocumentBuilder(context, ...args),\n    documentWithInitialValueTemplate: (...args) =>\n      documentFromEditorWithInitialValue(context, ...args),\n    defaultDocument: context.resolveDocumentNode,\n\n    list: (...args) => new ListBuilder(context, ...args),\n    listItem: (...args) => new ListItemBuilder(context, ...args),\n\n    menuItem: (...args) => new MenuItemBuilder(context, ...args),\n    menuItemGroup: (...args) => new MenuItemGroupBuilder(context, ...args),\n    menuItemsFromInitialValueTemplateItems: (...args) =>\n      menuItemsFromInitialValueTemplateItems(context, ...args),\n\n    documentList: (...args) => new DocumentListBuilder(context, ...args),\n    documentListItem: (...args) => new DocumentListItemBuilder(context, ...args),\n\n    orderingMenuItem: (...args) => getOrderingMenuItem(context, ...args),\n    orderingMenuItemsForType: (...args) => getOrderingMenuItemsForSchemaType(context, ...args),\n\n    editor: (...args) => documentFromEditor(context, ...args),\n\n    defaultInitialValueTemplateItems: (...args) =>\n      defaultInitialValueTemplateItems(context, ...args),\n\n    initialValueTemplateItem: (\n      templateId: string,\n      parameters?: Record<string, unknown>,\n    ): InitialValueTemplateItemBuilder =>\n      new InitialValueTemplateItemBuilder(context, {\n        id: templateId,\n        parameters,\n        templateId,\n      }),\n\n    component: (spec?: ComponentInput | UserComponent) => {\n      return isValidElementType(spec)\n        ? new ComponentBuilder().component(spec as UserComponent)\n        : new ComponentBuilder(spec as ComponentInput)\n    },\n\n    divider: (): Divider => ({id: uniqueId('__divider__'), type: 'divider'}),\n\n    view: views,\n    context,\n  }\n\n  return structureBuilder\n}\n","import {type DocumentBadgeComponent} from 'sanity'\n\n/** @internal */\nexport const LiveEditBadge: DocumentBadgeComponent = (props) => {\n  const {liveEdit} = props\n\n  if (liveEdit) {\n    return {\n      label: 'Live',\n      color: 'danger',\n    }\n  }\n\n  return null\n}\nLiveEditBadge.displayName = 'LiveEditBadge'\n","import {uuid} from '@sanity/uuid'\n\nimport {EMPTY_PARAMS, type LOADING_PANE} from './constants'\nimport {type PaneNode, type RouterPanes} from './types'\n\nconst state: {\n  activePanes: Array<PaneNode | typeof LOADING_PANE>\n} = {activePanes: []}\n\nexport function setActivePanes(panes: Array<PaneNode | typeof LOADING_PANE>): void {\n  state.activePanes = panes\n}\n\n/**\n * This function looks at the _active panes_ to resolve an intent. this type of\n * intent resolution is faster and does not cause the panes to reset\n *\n * @internal\n */\nexport function getIntentState(\n  intent: string,\n  params: Record<string, string>,\n  routerState: {panes?: RouterPanes} | undefined,\n  payload: unknown,\n): {panes: RouterPanes} | {intent: string; params: Record<string, string>; payload: unknown} {\n  const panes = routerState?.panes || []\n  const activePanes = state.activePanes || []\n  const editDocumentId = params.id || uuid()\n  const isTemplate = intent === 'create' && params.template\n\n  // Loop through open panes and see if any of them can handle the intent\n  for (let i = activePanes.length - 1; i >= 0; i--) {\n    const pane = activePanes[i]\n\n    if (typeof pane !== 'object') continue\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `resolveIntent.ts`\n    if (\n      pane.canHandleIntent?.(intent, params, {\n        pane,\n        index: i,\n      }) ||\n      // see `resolveIntent.ts` for more info\n      (pane.type === 'documentList' &&\n        pane.schemaTypeName === params.type &&\n        pane.options.filter === '_type == $type')\n    ) {\n      const paneParams = isTemplate ? {template: params.template} : EMPTY_PARAMS\n\n      return {\n        panes: panes\n          .slice(0, i)\n          .concat([[{id: editDocumentId, params: paneParams, payload}]]) as RouterPanes,\n      }\n    }\n  }\n\n  return {intent: intent, params, payload}\n}\n","import {\n  AddIcon,\n  CloseIcon,\n  EditIcon,\n  type IconComponent,\n  PublishIcon,\n  TrashIcon,\n  UnpublishIcon,\n} from '@sanity/icons'\n\nexport const TIMELINE_ICON_COMPONENTS: {[key: string]: IconComponent | undefined} = {\n  create: AddIcon,\n  delete: TrashIcon,\n  discardDraft: CloseIcon,\n  initial: AddIcon,\n  editDraft: EditIcon,\n  editLive: EditIcon,\n  publish: PublishIcon,\n  unpublish: UnpublishIcon,\n}\n","import {type IconComponent} from '@sanity/icons'\nimport {type ChunkType} from 'sanity'\n\nimport {TIMELINE_ICON_COMPONENTS} from './constants'\n\nexport function getTimelineEventIconComponent(type: ChunkType): IconComponent | undefined {\n  return TIMELINE_ICON_COMPONENTS[type]\n}\n","import {ChevronLeftIcon} from '@sanity/icons'\nimport {type MouseEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {TIMELINE_LIST_WRAPPER_ID} from './timeline'\n\n/**\n * This is a hack to force the scrollbar to not appear when the list is expanding,\n * if we don't do this the scrollbar will appear for a brief moment when the list is expanding and then disappear\n * when the list is fully expanded.\n */\nfunction hideScrollbarOnExpand(isExpanded: boolean) {\n  // Do nothing if the list is already expanded\n  if (isExpanded) return\n\n  const listWrapper = document.getElementById(TIMELINE_LIST_WRAPPER_ID)\n\n  if (listWrapper) {\n    const firstChildren = listWrapper.children[0] as HTMLElement\n    const hasScrollbar = firstChildren.scrollHeight > firstChildren.clientHeight\n    if (!hasScrollbar) {\n      //\n      const currentStyle = getComputedStyle(firstChildren).overflowY\n      // Add overflow hidden to the listWrapper to avoid the scrollbar to appear when expanding\n      firstChildren.style.overflowY = 'hidden'\n      setTimeout(() => {\n        // Reset the overflow style after the list is expanded\n        firstChildren.style.overflowY = currentStyle\n      }, 0)\n    }\n  }\n}\n\nconst FlipIcon = styled(ChevronLeftIcon)`\n  transition: transform 200ms;\n  &[data-expanded='true'] {\n    transform: rotate(-90deg);\n  }\n`\n\nexport function ExpandableTimelineItemButton({\n  isExpanded,\n  onExpand,\n}: {\n  isExpanded: boolean\n  onExpand: () => void\n}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleExpandClick = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.stopPropagation()\n      hideScrollbarOnExpand(isExpanded)\n      onExpand()\n    },\n    [onExpand, isExpanded],\n  )\n\n  return (\n    <Button\n      mode=\"bleed\"\n      icon={<FlipIcon data-expanded={isExpanded} />}\n      tooltipProps={{\n        content: isExpanded\n          ? t('timeline-item.menu.action-collapse')\n          : t('timeline-item.menu.action-expand'),\n      }}\n      onClick={handleExpandClick}\n    />\n  )\n}\n","import {Box, Flex, Stack} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const StackWrapper = styled(Stack)`\n  max-width: 200px;\n`\n\nexport const ListWrapper = styled(Flex)<{$maxHeight: string}>`\n  max-height: ${(props) => props.$maxHeight};\n  min-width: 244px;\n`\n\nexport const Root = styled(Box)<{$visible?: boolean}>(({$visible}) => {\n  return css`\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity 0.2s;\n\n    ${$visible &&\n    css`\n      opacity: 1;\n      pointer-events: auto;\n    `}\n  `\n})\n","import {type ChunkType, type StudioLocaleResourceKeys} from 'sanity'\n\n/**\n * Maps from a chunk type to an i18n key for the operation\n *\n * @internal\n */\nexport const TIMELINE_ITEM_I18N_KEY_MAPPING: Record<ChunkType, StudioLocaleResourceKeys> = {\n  initial: 'timeline.operation.created-initial',\n  create: 'timeline.operation.created',\n  publish: 'timeline.operation.published',\n  editLive: 'timeline.operation.edited-live',\n  editDraft: 'timeline.operation.edited-draft',\n  unpublish: 'timeline.operation.unpublished',\n  discardDraft: 'timeline.operation.draft-discarded',\n  delete: 'timeline.operation.deleted',\n}\n","import {type AvatarSize, AvatarStack} from '@sanity/ui'\nimport {UserAvatar} from 'sanity'\n\ninterface UserAvatarStackProps {\n  maxLength?: number\n  userIds: string[]\n  size?: AvatarSize\n  withTooltip?: boolean\n}\n\nexport function UserAvatarStack({\n  maxLength,\n  userIds,\n  size,\n  withTooltip = true,\n}: UserAvatarStackProps) {\n  return (\n    <AvatarStack maxLength={maxLength} size={size}>\n      {userIds.map((userId) => (\n        <UserAvatar key={userId} user={userId} withTooltip={withTooltip} />\n      ))}\n    </AvatarStack>\n  )\n}\n","import {Box, Card, Flex, Skeleton, Stack, Text} from '@sanity/ui'\n// eslint-disable-next-line camelcase\nimport {getTheme_v2, type ThemeColorAvatarColorKey} from '@sanity/ui/theme'\nimport {createElement, type MouseEvent, useCallback, useMemo} from 'react'\nimport {\n  type ChunkType,\n  type RelativeTimeOptions,\n  useDateTimeFormat,\n  UserAvatar,\n  useRelativeTime,\n  useTranslation,\n  useUser,\n} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {getTimelineEventIconComponent} from './helpers'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\nimport {UserAvatarStack} from './userAvatarStack'\nimport {type ChunksWithCollapsedDrafts} from './utils'\n\nexport const IconBox = styled(Flex)<{$color: ThemeColorAvatarColorKey}>((props) => {\n  const theme = getTheme_v2(props.theme)\n  const color = props.$color\n\n  return css`\n    --card-icon-color: ${theme.color.avatar[color].fg};\n    background-color: ${theme.color.avatar[color].bg};\n    box-shadow: 0 0 0 1px var(--card-bg-color);\n\n    position: absolute;\n    width: ${theme.avatar.sizes[0].size}px;\n    height: ${theme.avatar.sizes[0].size}px;\n    right: -3px;\n    bottom: -3px;\n    border-radius: 50%;\n  `\n})\n\nconst TIMELINE_ITEM_EVENT_TONE: Record<ChunkType | 'withinSelection', ThemeColorAvatarColorKey> = {\n  initial: 'blue',\n  create: 'blue',\n  publish: 'green',\n  editLive: 'green',\n  editDraft: 'yellow',\n  unpublish: 'orange',\n  discardDraft: 'orange',\n  delete: 'red',\n  withinSelection: 'magenta',\n}\n\nexport interface TimelineItemProps {\n  chunk: ChunksWithCollapsedDrafts\n  isSelected: boolean\n  onSelect: (chunk: ChunksWithCollapsedDrafts) => void\n  collaborators?: Set<string>\n  optionsMenu?: React.ReactNode\n}\n\nconst RELATIVE_TIME_OPTIONS: RelativeTimeOptions = {\n  minimal: true,\n  useTemporalPhrase: true,\n}\n\nconst AvatarSkeleton = styled(Skeleton)((props) => {\n  const theme = getTheme_v2(props.theme)\n  return css`\n    border-radius: 50%;\n    width: ${theme.avatar.sizes[1].size}px;\n    height: ${theme.avatar.sizes[1].size}px;\n  `\n})\n\nconst NameSkeleton = styled(Skeleton)((props) => {\n  const theme = getTheme_v2(props.theme)\n  return css`\n    width: 6ch;\n    height: ${theme.font.text.sizes[0].lineHeight}px;\n  `\n})\n\nconst UserLine = ({userId}: {userId: string}) => {\n  const [user, loading] = useUser(userId)\n\n  return (\n    <Flex align=\"center\" gap={2} key={userId} padding={1}>\n      <Box>{loading || !user ? <AvatarSkeleton animated /> : <UserAvatar user={user} />}</Box>\n      <Box>\n        {loading || !user?.displayName ? (\n          <Text size={1}>\n            <NameSkeleton animated />\n          </Text>\n        ) : (\n          <Text muted size={1}>\n            {user.displayName}\n          </Text>\n        )}\n      </Box>\n    </Flex>\n  )\n}\nconst TooltipContent = ({collaborators}: {collaborators: string[]}) => {\n  const {t} = useTranslation('studio')\n  return (\n    <Stack paddingBottom={1}>\n      <Box padding={1} paddingBottom={2}>\n        <Text size={1} weight=\"medium\">\n          {t('timeline.changes.title')}\n        </Text>\n      </Box>\n      {collaborators.map((userId) => (\n        <UserLine key={userId} userId={userId} />\n      ))}\n    </Stack>\n  )\n}\nexport function TimelineItem({\n  chunk,\n  isSelected,\n  onSelect,\n  collaborators,\n  optionsMenu,\n}: TimelineItemProps) {\n  const {t} = useTranslation('studio')\n  const {type, endTimestamp: timestamp} = chunk\n  const iconComponent = getTimelineEventIconComponent(type)\n  const authorUserIds = Array.from(chunk.authors)\n  const collaboratorsUsersIds = collaborators ? Array.from(collaborators) : []\n  const isSelectable = type !== 'delete'\n  const dateFormat = useDateTimeFormat({dateStyle: 'medium', timeStyle: 'short'})\n  const date = new Date(timestamp)\n\n  const updatedTimeAgo = useRelativeTime(date || '', RELATIVE_TIME_OPTIONS)\n\n  const formattedTimestamp = useMemo(() => {\n    const parsedDate = new Date(timestamp)\n    const formattedDate = dateFormat.format(parsedDate)\n\n    return formattedDate\n  }, [timestamp, dateFormat])\n\n  const handleClick = useCallback(\n    (evt: MouseEvent<HTMLDivElement>) => {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      if (isSelectable) {\n        onSelect(chunk)\n      }\n    },\n    [onSelect, chunk, isSelectable],\n  )\n\n  return (\n    <Flex align=\"center\" gap={1}>\n      <Card\n        as=\"button\"\n        onClick={handleClick}\n        padding={2}\n        pressed={isSelected}\n        radius={2}\n        data-ui=\"timelineItem\"\n        data-testid=\"timeline-item-button\"\n        data-chunk-id={chunk.id}\n      >\n        <Flex align=\"center\" gap={3}>\n          <div style={{position: 'relative'}}>\n            <UserAvatarStack maxLength={3} userIds={authorUserIds} size={2} />\n            <IconBox align=\"center\" justify=\"center\" $color={TIMELINE_ITEM_EVENT_TONE[type]}>\n              <Text size={0}>{iconComponent && createElement(iconComponent)}</Text>\n            </IconBox>\n          </div>\n          <Stack space={2}>\n            <Text size={1} weight=\"medium\">\n              {t(TIMELINE_ITEM_I18N_KEY_MAPPING[type]) || <code>{type}</code>}\n            </Text>\n\n            <Text as=\"time\" size={1} muted dateTime={timestamp} title={formattedTimestamp}>\n              {updatedTimeAgo}\n            </Text>\n          </Stack>\n\n          {collaboratorsUsersIds.length > 0 && (\n            <Flex flex={1} justify=\"flex-end\" align=\"center\">\n              <Tooltip\n                placement=\"top\"\n                content={<TooltipContent collaborators={collaboratorsUsersIds} />}\n                portal\n              >\n                <Box paddingLeft={2} paddingY={2}>\n                  <UserAvatarStack\n                    maxLength={3}\n                    userIds={collaboratorsUsersIds}\n                    size={0}\n                    withTooltip={false}\n                  />\n                </Box>\n              </Tooltip>\n            </Flex>\n          )}\n        </Flex>\n      </Card>\n      {optionsMenu}\n    </Flex>\n  )\n}\n","import {type Chunk, type ChunkType} from 'sanity'\n\nexport type NonPublishChunk = Omit<Chunk, 'type'> & {\n  type: Exclude<ChunkType, 'publish'>\n  parentId?: string\n}\n\nexport type PublishChunk = Omit<Chunk, 'type'> & {\n  type: 'publish'\n  children: string[]\n  collaborators: Set<string>\n}\n\nexport const isNonPublishChunk = (chunk: Chunk): chunk is NonPublishChunk =>\n  chunk.type !== 'publish'\n\nexport const isPublishChunk = (chunk: Chunk): chunk is PublishChunk => chunk.type === 'publish'\n\n/**\n * searches for the previous publish action in the list of chunks\n * e.g. chunks = [publish, edit, publish, edit, edit] it needs to return the second publish action\n * e.g. chunks = [publish, edit, delete, edit, edit] it returns undefined\n */\n\nfunction getPreviousPublishAction(chunks: Chunk[]) {\n  let previousPublish: PublishChunk | null = null\n  // We need to iterate from the end to the start of the list\n  for (let index = chunks.length - 1; index >= 0; index--) {\n    const chunk = chunks[index]\n    if (isPublishChunk(chunk)) {\n      previousPublish = chunk\n      break\n    }\n    if (chunk.type === 'editDraft') {\n      continue\n    } else break\n  }\n\n  return previousPublish\n}\nexport type ChunksWithCollapsedDrafts = NonPublishChunk | PublishChunk\n\n/**\n * Takes an array of chunks and adds them metadata necessary for the timeline view.\n * for draft chunks, it will add the parentId of the published chunk if this draft action is now published\n * for published, it will add the children array and the collaborators array\n */\nexport function addChunksMetadata(chunks: Chunk[]): ChunksWithCollapsedDrafts[] {\n  const result: ChunksWithCollapsedDrafts[] = []\n\n  for (const chunk of chunks) {\n    if (isPublishChunk(chunk)) {\n      result.push({\n        ...chunk,\n        type: 'publish',\n        children: [],\n        collaborators: new Set(), // Initialize the collaborators array\n      })\n      continue\n    }\n    if (isNonPublishChunk(chunk)) {\n      const previousPublish = getPreviousPublishAction(result)\n      if (chunk.type === 'editDraft' && previousPublish?.type === 'publish') {\n        Array.from(chunk.authors).forEach((id) => {\n          previousPublish.collaborators.add(id)\n        })\n        previousPublish.children.push(chunk.id)\n        result.push({\n          ...chunk,\n          parentId: previousPublish.id,\n        })\n        continue\n      }\n    }\n    if (isNonPublishChunk(chunk)) {\n      result.push(chunk)\n    }\n  }\n\n  return result\n}\n","import {Box, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type Chunk,\n  CommandList,\n  type CommandListRenderItemCallback,\n  LoadingBlock,\n  useTranslation,\n} from 'sanity'\n\nimport {ExpandableTimelineItemButton} from './expandableTimelineItemButton'\nimport {ListWrapper, Root, StackWrapper} from './timeline.styled'\nimport {TimelineItem} from './timelineItem'\nimport {\n  addChunksMetadata,\n  type ChunksWithCollapsedDrafts,\n  isNonPublishChunk,\n  isPublishChunk,\n} from './utils'\n\ninterface TimelineProps {\n  chunks: Chunk[]\n  hasMoreChunks: boolean | null\n  lastChunk?: Chunk | null\n  onLoadMore: () => void\n  onSelect: (chunk: Chunk) => void\n  /**\n   * The list needs a predefined max height for the scroller to work.\n   */\n  listMaxHeight?: string\n}\n\nexport const TIMELINE_LIST_WRAPPER_ID = 'timeline-list-wrapper'\n\nexport const Timeline = ({\n  chunks,\n  hasMoreChunks,\n  lastChunk: selectedChunk,\n  onLoadMore,\n  onSelect,\n  listMaxHeight = 'calc(100vh - 280px)',\n}: TimelineProps) => {\n  const [mounted, setMounted] = useState(false)\n  const {t} = useTranslation('studio')\n  const selectedChunkId = selectedChunk?.id\n  const chunksWithMetadata = useMemo(() => addChunksMetadata(chunks), [chunks])\n\n  const [expandedParents, setExpandedParents] = useState<Set<string>>(() => {\n    if (selectedChunkId) {\n      // If the selected chunk is a draft, we need to expand its parent\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        return new Set([selected.parentId])\n      }\n    }\n    return new Set()\n  })\n\n  useEffect(() => {\n    // This effect ensures that when we reload the timeline with a selected draft, we expand its parent.\n    if (selectedChunkId) {\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        const parentId = selected.parentId\n        setExpandedParents((prev) => {\n          if (prev.has(parentId)) return prev\n          const next = new Set(prev)\n          next.add(parentId)\n          return next\n        })\n      }\n    }\n  }, [chunksWithMetadata, selectedChunkId])\n\n  const filteredChunks = useMemo(() => {\n    return chunksWithMetadata.filter((chunk) => {\n      if (isPublishChunk(chunk) || !chunk.parentId) return true\n      // If the chunk has a parent id keep it hidden until the parent is expanded.\n      return expandedParents.has(chunk.parentId)\n    })\n  }, [chunksWithMetadata, expandedParents])\n\n  useEffect(() => {\n    // This effect ensures that we load more chunks if the list is not long enough.\n    // This could happen if a parent chunk has multiple drafts, so you could end with a list of 50 transactions but only\n    // 1 parent chunk, the publish, which squashed all the changes.\n    // In that case, users will see the loading block at the bottom, but nothing will really be happening. Because they haven't reach the end of the list.\n    if (filteredChunks.length < 16 && hasMoreChunks) {\n      onLoadMore()\n    }\n  }, [filteredChunks, hasMoreChunks, onLoadMore])\n\n  const handleExpandParent = useCallback(\n    (parentId: string) => () =>\n      setExpandedParents((prev) => {\n        const next = new Set(prev)\n\n        if (prev.has(parentId)) next.delete(parentId)\n        else next.add(parentId)\n\n        return next\n      }),\n    [],\n  )\n\n  const selectedIndex = useMemo(\n    () =>\n      selectedChunkId ? filteredChunks.findIndex((chunk) => chunk.id === selectedChunkId) : -1,\n    [selectedChunkId, filteredChunks],\n  )\n  const handleSelectChunk = useCallback(\n    (chunk: ChunksWithCollapsedDrafts) => {\n      const timelineChunk = chunks.find((c) => c.id === chunk.id)\n      if (timelineChunk) onSelect(timelineChunk)\n      else {\n        console.error('TimelineItem: chunk not found')\n        onSelect(chunk)\n      }\n    },\n    [chunks, onSelect],\n  )\n\n  const renderItem = useCallback<CommandListRenderItemCallback<(typeof filteredChunks)[number]>>(\n    (chunk, {activeIndex}) => {\n      const isFirst = activeIndex === 0\n\n      return (\n        <Box\n          paddingBottom={1}\n          paddingTop={isFirst ? 1 : 0}\n          paddingRight={1}\n          paddingLeft={isNonPublishChunk(chunk) && chunk.parentId ? 4 : 1}\n        >\n          <TimelineItem\n            chunk={chunk}\n            isSelected={selectedChunkId === chunk.id}\n            onSelect={handleSelectChunk}\n            collaborators={isPublishChunk(chunk) ? chunk.collaborators : undefined}\n            optionsMenu={\n              isPublishChunk(chunk) && chunk.children.length > 0 ? (\n                <ExpandableTimelineItemButton\n                  isExpanded={expandedParents.has(chunk.id)}\n                  onExpand={handleExpandParent(chunk.id)}\n                />\n              ) : null\n            }\n          />\n          {activeIndex === filteredChunks.length - 1 && hasMoreChunks && <LoadingBlock />}\n        </Box>\n      )\n    },\n    [\n      expandedParents,\n      filteredChunks.length,\n      handleExpandParent,\n      handleSelectChunk,\n      hasMoreChunks,\n      selectedChunkId,\n    ],\n  )\n\n  useEffect(() => setMounted(true), [])\n\n  return (\n    <Root\n      /**\n       * We delay initial rendering if `selectedIndex` is present.\n       * This is a _temporary_ workaround to allow the virtual <CommandList>\n       * to scroll to a specific index prior to being displayed.\n       *\n       * Without this, there'll be a noticeable 'flash' where the virtual list\n       * will render with its child items at the top and then scroll into position.\n       */\n      $visible={!selectedIndex || mounted}\n      data-ui=\"timeline\"\n    >\n      {filteredChunks.length === 0 && (\n        <StackWrapper padding={3} space={3}>\n          <Text size={1} weight=\"medium\">\n            {t('timeline.error.no-document-history-title')}\n          </Text>\n          <Text muted size={1}>\n            {t('timeline.error.no-document-history-description')}\n          </Text>\n        </StackWrapper>\n      )}\n\n      {filteredChunks.length > 0 && (\n        <ListWrapper direction=\"column\" $maxHeight={listMaxHeight} id={TIMELINE_LIST_WRAPPER_ID}>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={t('timeline.list.aria-label')}\n            autoFocus=\"list\"\n            initialIndex={selectedIndex}\n            initialScrollAlign=\"center\"\n            itemHeight={57}\n            items={filteredChunks}\n            onEndReached={onLoadMore}\n            onEndReachedIndexOffset={20}\n            overscan={5}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </ListWrapper>\n      )}\n    </Root>\n  )\n}\n\nTimeline.displayName = 'Timeline'\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Flex, Stack} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nexport function TimelineError() {\n  const {t} = useTranslation('studio')\n\n  return (\n    <Flex align=\"flex-start\" gap={3} padding={4}>\n      <TextWithTone tone=\"critical\">\n        <ErrorOutlineIcon />\n      </TextWithTone>\n      <Stack space={4}>\n        <TextWithTone size={1} tone=\"critical\" weight=\"medium\">\n          {t('timeline.error.load-document-changes-title')}\n        </TextWithTone>\n        <TextWithTone size={1} tone=\"critical\">\n          {t('timeline.error.load-document-changes-description')}\n        </TextWithTone>\n      </Stack>\n    </Flex>\n  )\n}\n","import {ChevronDownIcon} from '@sanity/icons'\nimport {\n  Flex,\n  type Placement,\n  PortalProvider,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useToast,\n} from '@sanity/ui'\nimport {useCallback, useMemo, useState} from 'react'\nimport {type Chunk, useTimelineSelector, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Popover} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Timeline} from './timeline'\nimport {TimelineError} from './TimelineError'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\n\ninterface TimelineMenuProps {\n  chunk: Chunk | null\n  mode: 'rev' | 'since'\n  placement?: Placement\n}\n\nconst Root = styled(Popover)`\n  overflow: hidden;\n  overflow: clip;\n`\n\nexport const TIMELINE_MENU_PORTAL = 'timeline-menu'\n\nexport function TimelineMenu({chunk, mode, placement}: TimelineMenuProps) {\n  const {setTimelineRange, setTimelineMode, timelineError, ready, timelineStore} = useDocumentPane()\n  const [open, setOpen] = useState(false)\n  const [button, setButton] = useState<HTMLButtonElement | null>(null)\n  const [popoverRef, setPopoverRef] = useState<HTMLElement | null>(null)\n\n  const toast = useToast()\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n\n  const {t} = useTranslation('studio')\n\n  const handleOpen = useCallback(() => {\n    setTimelineMode(mode)\n    setOpen(true)\n  }, [mode, setTimelineMode])\n\n  const handleClose = useCallback(() => {\n    setTimelineMode('closed')\n    setOpen(false)\n  }, [setTimelineMode])\n\n  const handleGlobalKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (open && (event.key === 'Escape' || event.key === 'Tab')) {\n        handleClose()\n        button?.focus()\n      }\n    },\n    [button, handleClose, open],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(open && handleClose, () => [button, popoverRef])\n\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForRev(revChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const selectSince = useCallback(\n    (sinceChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForSince(sinceChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    if (!loading) {\n      timelineStore.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  const content = useMemo(() => {\n    if (timelineError) return <TimelineError />\n\n    if (mode === 'rev') {\n      return (\n        <Timeline\n          chunks={chunks}\n          hasMoreChunks={hasMoreChunks}\n          lastChunk={realRevChunk}\n          onLoadMore={handleLoadMore}\n          onSelect={selectRev}\n        />\n      )\n    }\n\n    const filteredChunks = realRevChunk\n      ? chunks.filter((c) => c.index < realRevChunk.index)\n      : chunks\n    return (\n      <Timeline\n        chunks={filteredChunks}\n        hasMoreChunks={hasMoreChunks}\n        lastChunk={sinceTime}\n        onLoadMore={handleLoadMore}\n        onSelect={selectSince}\n      />\n    )\n  }, [\n    chunks,\n    handleLoadMore,\n    hasMoreChunks,\n    mode,\n    realRevChunk,\n    selectRev,\n    selectSince,\n    sinceTime,\n    timelineError,\n  ])\n\n  const formatParams = {\n    timestamp: {dateStyle: 'medium', timeStyle: 'short'},\n  }\n\n  const revLabel = chunk\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[chunk.type], {\n        context: 'timestamp',\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.latest-revision')\n\n  const sinceLabel = chunk\n    ? t('timeline.since', {\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.since-version-missing')\n\n  const buttonLabel = mode === 'rev' ? revLabel : sinceLabel\n\n  return (\n    <PortalProvider __unstable_elements={{[TIMELINE_MENU_PORTAL]: popoverRef}}>\n      <Root\n        data-testid=\"timeline-menu\"\n        constrainSize\n        content={open && content}\n        data-ui=\"versionMenu\"\n        open={open}\n        placement={placement}\n        matchReferenceWidth\n        portal\n        ref={setPopoverRef}\n      >\n        <Flex width={'fill'}>\n          <Button\n            data-testid={open ? 'timeline-menu-close-button' : 'timeline-menu-open-button'}\n            disabled={!ready}\n            mode=\"ghost\"\n            onClick={open ? handleClose : handleOpen}\n            ref={setButton}\n            selected={open}\n            width=\"fill\"\n            tooltipProps={null}\n            justify={'space-between'}\n            style={{\n              maxWidth: '100%',\n            }}\n            iconRight={ChevronDownIcon}\n            text={ready ? buttonLabel : t('timeline.loading-history')}\n          />\n        </Flex>\n      </Root>\n    </PortalProvider>\n  )\n}\n","import {type ObjectDiff} from '@sanity/diff'\nimport {BoundaryElementProvider, Box, Card, Flex, Text} from '@sanity/ui'\nimport {type ReactElement, useMemo, useState} from 'react'\nimport {\n  ChangeFieldWrapper,\n  ChangeList,\n  type DocumentChangeContextInstance,\n  LoadingBlock,\n  NoChanges,\n  type ObjectSchemaType,\n  ScrollContainer,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\nimport {DocumentChangeContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {TimelineMenu} from '../../timeline'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nconst Grid = styled(Box)`\n  &:not([hidden]) {\n    display: grid;\n  }\n  grid-template-columns: 48px 1fr;\n  align-items: center;\n  gap: 0.25em;\n`\n\nexport function ChangesInspector({showChanges}: {showChanges: boolean}): ReactElement {\n  const {documentId, schemaType, timelineError, timelineStore, value} = useDocumentPane()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n\n  const rev = useTimelineSelector(timelineStore, (state) => state.revTime)\n  const diff = useTimelineSelector(timelineStore, (state) => state.diff)\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const selectionState = useTimelineSelector(timelineStore, (state) => state.selectionState)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n  const loading = selectionState === 'loading'\n  const isComparingCurrent = !onOlderRevision\n\n  // Note that we are using the studio core namespace here, as changes theoretically should\n  // be part of Sanity core (needs to be moved from structure at some point)\n  const {t: structureT} = useTranslation(structureLocaleNamespace)\n\n  const documentContext: DocumentChangeContextInstance = useMemo(\n    () => ({\n      documentId,\n      schemaType,\n      FieldWrapper: ChangeFieldWrapper,\n      rootDiff: diff,\n      isComparingCurrent,\n      value,\n      showFromValue: true,\n    }),\n    [documentId, diff, isComparingCurrent, schemaType, value],\n  )\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <Box padding={3}>\n        <Grid paddingX={2} paddingBottom={2}>\n          <Text size={1} muted>\n            {structureT('changes.from.label')}\n          </Text>\n\n          <TimelineMenu mode=\"since\" chunk={sinceTime} placement=\"bottom-start\" />\n          <Text size={1} muted>\n            {structureT('changes.to.label')}\n          </Text>\n          <TimelineMenu chunk={rev} mode=\"rev\" placement=\"bottom-end\" />\n        </Grid>\n      </Box>\n\n      <Card flex={1} paddingX={2} paddingY={2}>\n        <BoundaryElementProvider element={scrollRef}>\n          <Scroller data-ui=\"Scroller\" ref={setScrollRef}>\n            <Box flex={1} paddingX={3} height=\"fill\">\n              {showChanges && (\n                <Content\n                  diff={diff}\n                  documentContext={documentContext}\n                  error={timelineError}\n                  loading={loading}\n                  schemaType={schemaType}\n                />\n              )}\n            </Box>\n          </Scroller>\n        </BoundaryElementProvider>\n      </Card>\n    </Flex>\n  )\n}\n\nfunction Content({\n  error,\n  diff,\n  documentContext,\n  loading,\n  schemaType,\n}: {\n  error?: Error | null\n  diff: ObjectDiff<any> | null\n  documentContext: DocumentChangeContextInstance\n  loading: boolean\n  schemaType: ObjectSchemaType\n}) {\n  if (error) {\n    return <NoChanges />\n  }\n\n  if (loading) {\n    return <LoadingBlock showText />\n  }\n\n  if (!diff) {\n    return <NoChanges />\n  }\n\n  return (\n    <DocumentChangeContext.Provider value={documentContext}>\n      <ChangeList diff={diff} schemaType={schemaType} />\n    </DocumentChangeContext.Provider>\n  )\n}\n","import {BoundaryElementProvider, Card, Flex, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {type Chunk, ScrollContainer, useTimelineSelector, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Timeline} from '../../timeline'\nimport {TimelineError} from '../../timeline/TimelineError'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nexport function HistorySelector({showList}: {showList: boolean}) {\n  const {timelineError, setTimelineMode, setTimelineRange, timelineStore} = useDocumentPane()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n  const [listHeight, setListHeight] = useState(0)\n\n  const getScrollerRef = useCallback((el: HTMLDivElement | null) => {\n    /**\n     * Hacky solution, the list height needs to be defined, it cannot be obtained from the parent using a `max-height: 100%`\n     * Because the scroller won't work properly and it won't scroll to the selected element on mount.\n     * To fix this, this component will set the list height to the height of the parent element - 1px, to avoid a double scroll line.\n     */\n    setListHeight(el?.clientHeight ? el.clientHeight - 1 : 0)\n    setScrollRef(el)\n  }, [])\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n\n  const {t} = useTranslation('studio')\n  const toast = useToast()\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore.findRangeForRev(revChunk)\n        setTimelineMode('closed')\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineMode, setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    // If updated, be sure to update the TimeLineMenu component as well\n    if (!loading) {\n      timelineStore.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n      <Card flex={1} padding={2} paddingTop={0}>\n        {timelineError ? (\n          <TimelineError />\n        ) : (\n          <BoundaryElementProvider element={scrollRef}>\n            <Scroller data-ui=\"Scroller\" ref={getScrollerRef}>\n              {listHeight &&\n              // This forces the list to unmount and remount, which is needed to reset the scroll position\n              showList ? (\n                <Timeline\n                  chunks={chunks}\n                  hasMoreChunks={hasMoreChunks}\n                  lastChunk={realRevChunk}\n                  onLoadMore={handleLoadMore}\n                  onSelect={selectRev}\n                  listMaxHeight={`${listHeight}px`}\n                />\n              ) : null}\n            </Scroller>\n          </BoundaryElementProvider>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {type DocumentInspectorProps, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components/paneRouter/usePaneRouter'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesInspector} from './ChangesInspector'\nimport {HistorySelector} from './HistorySelector'\n\nconst FadeInFlex = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n  &[data-ready] {\n    opacity: 1;\n  }\n`\nconst TABS = ['history', 'review'] as const\nconst isValidTab = (tab: string | undefined): tab is (typeof TABS)[number] =>\n  // @ts-expect-error TS doesn't understand the type guard\n  tab && TABS.includes(tab)\n\nexport function ChangesTabs(props: DocumentInspectorProps) {\n  const {params, setParams} = usePaneRouter()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isReady = params?.inspect === HISTORY_INSPECTOR_NAME\n\n  const paneRouterTab = isValidTab(params?.changesInspectorTab)\n    ? params.changesInspectorTab\n    : TABS[0]\n  const setPaneRouterTab = (tab: (typeof TABS)[number]) =>\n    setParams({\n      ...params,\n      changesInspectorTab: tab,\n    })\n\n  return (\n    <FadeInFlex direction=\"column\" padding={0} height=\"fill\" data-ready={isReady ? '' : undefined}>\n      <Flex align=\"center\" padding={3} gap={2}>\n        <TabList space={1} flex={1}>\n          <Tab\n            aria-controls=\"history-panel\"\n            id=\"history-tab\"\n            label={t('changes.tab.history')}\n            onClick={() => setPaneRouterTab('history')}\n            selected={paneRouterTab === 'history'}\n          />\n          <Tab\n            aria-controls=\"review-changes-panel\"\n            id=\"changes-tab\"\n            label={t('changes.tab.review-changes')}\n            onClick={() => setPaneRouterTab('review')}\n            selected={paneRouterTab === 'review'}\n          />\n        </TabList>\n        <Box flex=\"none\">\n          <Button\n            aria-label={t('changes.action.close-label')}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={props.onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n\n      <TabPanel\n        aria-labelledby=\"history-tab\"\n        height=\"fill\"\n        hidden={paneRouterTab !== 'history'}\n        id=\"history-panel\"\n      >\n        <HistorySelector showList={paneRouterTab === 'history'} />\n      </TabPanel>\n\n      <TabPanel\n        aria-labelledby=\"review-tab\"\n        hidden={paneRouterTab !== 'review'}\n        id=\"review-panel\"\n        height=\"fill\"\n      >\n        <ChangesInspector showChanges={paneRouterTab === 'review'} />\n      </TabPanel>\n    </FadeInFlex>\n  )\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {type DocumentInspector, useTranslation} from 'sanity'\n\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesTabs} from './ChangesTabs'\n\nexport const changesInspector: DocumentInspector = {\n  name: HISTORY_INSPECTOR_NAME,\n  useMenuItem: () => {\n    const {features} = useStructureTool()\n    const {t} = useTranslation()\n\n    return {\n      hidden: !features.reviewChanges,\n      icon: RestoreIcon,\n      title: t('changes.title'),\n    }\n  },\n  component: ChangesTabs,\n  onClose: ({params}) => ({\n    params: {...params, since: undefined, rev: undefined, changesInspectorTab: undefined},\n  }),\n  onOpen: ({params}) => ({params: {...params, since: '@lastPublished'}}),\n}\n","/* eslint-disable no-loop-func */\n\nimport {type Path, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {isArray, isRecord} from 'sanity'\n\nexport function getPathTitles(options: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}): Array<{name: string; title?: string}> {\n  const {path, schemaType, value} = options\n  const result: Array<{name: string; title?: string}> = []\n\n  let s = schemaType\n  let v: unknown = value\n\n  for (const segment of path) {\n    // field name\n    if (typeof segment === 'string') {\n      if (!isRecord(v) && v !== undefined) {\n        throw new Error(`Parent value is not an object, cannot get path segment: .${segment}`)\n      }\n\n      if (s.jsonType !== 'object') {\n        throw new Error(\n          `Parent type is not an object schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const field = s.fields.find((f) => f.name === segment)\n\n      if (!field) {\n        result.push({name: segment})\n        return result\n      }\n\n      s = field.type\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item index\n    if (typeof segment === 'number') {\n      if (!isArray(v) && v !== undefined) {\n        throw new Error(`Parent value is not an array, cannot get path segment: [${segment}]`)\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: [${segment}]`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const itemType = s.of.find((ofType) => {\n        if (typeof v === 'string') {\n          return ofType.jsonType === 'string'\n        }\n\n        if (typeof v === 'number') {\n          return ofType.jsonType === 'number'\n        }\n\n        if (typeof v === 'boolean') {\n          return ofType.jsonType === 'boolean'\n        }\n\n        if (isRecord(v)) {\n          return ofType.name === v?._type\n        }\n\n        return false\n      })\n\n      if (!itemType) {\n        throw new Error(`Item type not found: [${segment}]`)\n      }\n\n      s = itemType\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item key\n    if (isRecord(segment) && segment._key) {\n      if (!isArray(v)) {\n        throw new Error(\n          `Parent value is not an array, cannot get path segment: [_key == ${segment}]`,\n        )\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      const values = v ?? []\n\n      v = values.find((i) => isRecord(i) && i._key === segment._key)\n\n      if (!isRecord(v)) {\n        throw new Error(`Array item not found: [_key == ${segment._key}]`)\n      }\n\n      const ofType = s.of.find((i) => isRecord(v) && i.name === v?._type)\n\n      if (!ofType) {\n        throw new Error(`Array item type not found: .${v?._type}`)\n      }\n\n      s = ofType\n\n      result.push(s)\n\n      continue\n    }\n\n    throw new Error(`Invalid path segment: ${JSON.stringify(segment)}`)\n  }\n\n  return result\n}\n","import {\n  ErrorOutlineIcon,\n  type IconComponent,\n  InfoOutlineIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SchemaType,\n  type ValidationMarker,\n} from '@sanity/types'\nimport {Box, Card, type CardTone, Flex, Stack, Text} from '@sanity/ui'\nimport {createElement, type ErrorInfo, Fragment, useCallback, useMemo, useState} from 'react'\nimport {type DocumentInspectorProps, useTranslation} from 'sanity'\n\nimport {ErrorBoundary} from '../../../../../ui-components'\nimport {DocumentInspectorHeader} from '../../documentInspector'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {getPathTitles} from './getPathTitles'\n\nconst MARKER_ICON: Record<'error' | 'warning' | 'info', IconComponent> = {\n  error: ErrorOutlineIcon,\n  warning: WarningOutlineIcon,\n  info: InfoOutlineIcon,\n}\n\nconst MARKER_TONE: Record<'error' | 'warning' | 'info', CardTone> = {\n  error: 'critical',\n  warning: 'caution',\n  info: 'primary',\n}\n\nexport function ValidationInspector(props: DocumentInspectorProps) {\n  const {onClose} = props\n  const {onFocus, onPathOpen, schemaType, validation, value} = useDocumentPane()\n  const {t} = useTranslation('validation')\n\n  const handleOpen = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onFocus, onPathOpen],\n  )\n\n  return (\n    <Flex direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <DocumentInspectorHeader\n        as=\"header\"\n        closeButtonLabel={t('panel.close-button-aria-label')}\n        flex=\"none\"\n        onClose={onClose}\n        title={t('panel.title')}\n      />\n\n      <Card flex={1} overflow=\"auto\" padding={3}>\n        {validation.length === 0 && (\n          <Box padding={2}>\n            <Text muted size={1}>\n              {t('panel.no-errors-message')}\n            </Text>\n          </Box>\n        )}\n\n        {validation.length > 0 && (\n          <Stack space={2}>\n            {validation.map((marker, i) => (\n              <ValidationCard\n                // eslint-disable-next-line react/no-array-index-key\n                key={i}\n                marker={marker}\n                onOpen={handleOpen}\n                schemaType={schemaType}\n                value={value}\n              />\n            ))}\n          </Stack>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n\nfunction ValidationCard(props: {\n  marker: ValidationMarker\n  onOpen: (path: Path) => void\n  schemaType: ObjectSchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {marker, onOpen, schemaType, value} = props\n  const handleOpen = useCallback(() => onOpen(marker.path), [marker, onOpen])\n  const [errorInfo, setErrorInfo] = useState<{error: Error; info: ErrorInfo} | null>(null)\n\n  return (\n    <ErrorBoundary onCatch={setErrorInfo}>\n      {errorInfo && (\n        <Card padding={3} radius={2} tone=\"critical\">\n          <Text size={1}>{errorInfo.error.message}</Text>\n        </Card>\n      )}\n\n      {!errorInfo && (\n        <Card\n          __unstable_focusRing\n          as=\"button\"\n          onClick={handleOpen}\n          padding={3}\n          radius={2}\n          tone={MARKER_TONE[marker.level]}\n        >\n          <Flex align=\"flex-start\" gap={3}>\n            <Box flex=\"none\">\n              <Text size={1}>{createElement(MARKER_ICON[marker.level])}</Text>\n            </Box>\n\n            <Stack flex={1} space={2}>\n              <DocumentNodePathBreadcrumbs\n                path={marker.path}\n                schemaType={schemaType}\n                value={value}\n              />\n\n              <Text muted size={1}>\n                {marker.message}\n              </Text>\n            </Stack>\n          </Flex>\n        </Card>\n      )}\n    </ErrorBoundary>\n  )\n}\n\nfunction DocumentNodePathBreadcrumbs(props: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {path, schemaType, value} = props\n\n  const pathTitles = useMemo(() => {\n    try {\n      return getPathTitles({path, schemaType, value})\n    } catch (e) {\n      console.error(e)\n    }\n    return null\n  }, [path, schemaType, value])\n\n  if (!pathTitles?.length) return null\n\n  return (\n    <Text size={1}>\n      {pathTitles.map((t, i) => (\n        <Fragment key={i}>\n          {i > 0 && <span style={{color: 'var(--card-muted-fg-color)', opacity: 0.5}}> / </span>}\n          <span style={{fontWeight: 500}}>{t.title || t.name}</span>\n        </Fragment>\n      ))}\n    </Text>\n  )\n}\n","import {CheckmarkCircleIcon, ErrorOutlineIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {useMemo} from 'react'\nimport {\n  type DocumentInspector,\n  type DocumentInspectorMenuItem,\n  type DocumentInspectorUseMenuItemProps,\n  type FormNodeValidation,\n  isValidationError,\n  isValidationWarning,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {VALIDATION_INSPECTOR_NAME} from '../../constants'\nimport {ValidationInspector} from './ValidationInspector'\n\nfunction useMenuItem(props: DocumentInspectorUseMenuItemProps): DocumentInspectorMenuItem {\n  const {documentId, documentType} = props\n  const {t} = useTranslation('validation')\n  const {validation: validationMarkers} = useValidationStatus(documentId, documentType)\n\n  const validation: FormNodeValidation[] = useMemo(\n    () =>\n      validationMarkers.map((item) => ({\n        level: item.level,\n        message: item.message,\n        path: item.path,\n      })),\n    [validationMarkers],\n  )\n\n  const hasErrors = validation.some(isValidationError)\n  const hasWarnings = validation.some(isValidationWarning)\n\n  const icon = useMemo(() => {\n    if (hasErrors) return ErrorOutlineIcon\n    if (hasWarnings) return WarningOutlineIcon\n    return CheckmarkCircleIcon\n  }, [hasErrors, hasWarnings])\n\n  const tone = useMemo(() => {\n    if (hasErrors) return 'critical'\n    if (hasWarnings) return 'caution'\n    return 'positive'\n  }, [hasErrors, hasWarnings])\n\n  return {\n    hidden: validation.length === 0,\n    icon,\n    title: t('panel.title'),\n    tone,\n    showAsAction: true,\n  }\n}\n\nexport const validationInspector: DocumentInspector = {\n  name: VALIDATION_INSPECTOR_NAME,\n  component: ValidationInspector,\n  useMenuItem,\n}\n","import {omit} from 'lodash'\nimport {decodeJsonParams, encodeJsonParams, route} from 'sanity/router'\n\nimport {type RouterPaneGroup, type RouterPanes, type RouterPaneSibling} from './types'\n\nconst EMPTY_PARAMS = {}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToState(params: string): Record<string, unknown> {\n  try {\n    return JSON.parse(decodeURIComponent(params))\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn('Failed to parse JSON parameters')\n    return {}\n  }\n}\n\nexport function encodePanesSegment(panes: RouterPanes): string {\n  return (panes || [])\n    .map((group) => group.map(encodeChunks).join('|'))\n    .map(encodeURIComponent)\n    .join(';')\n}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToPath(params: Record<string, unknown>): string {\n  return JSON.stringify(params)\n}\n\n// http://localhost:3333/intent/create/template=book-by-author;type=book/eyJhdXRob3JJZCI6Imdycm0ifQ==\n\n/**\n * @internal\n */\nexport function toState(pathSegment: string): RouterPaneGroup[] {\n  return parsePanesSegment(decodeURIComponent(pathSegment))\n}\n\n/**\n * @internal\n */\nexport function toPath(panes: RouterPaneGroup[]): string {\n  return encodePanesSegment(panes)\n}\n\nexport const router = route.create('/', [\n  // \"Asynchronous intent resolving\" route\n  route.intents('/intent'),\n\n  // Legacy fallback route, will be redirected to new format\n  route.create('/edit/:type/:editDocumentId', [\n    route.create({\n      path: '/:params',\n      transform: {params: {toState: legacyEditParamsToState, toPath: legacyEditParamsToPath}},\n    }),\n  ]),\n\n  // The regular path - when the intent can be resolved to a specific pane\n  route.create({\n    path: '/:panes',\n    // Legacy URLs, used to handle redirects\n    children: [route.create('/:action', route.create('/:legacyEditDocumentId'))],\n    transform: {\n      panes: {toState, toPath},\n    },\n  }),\n])\n\n// old: authors;knut,{\"template\":\"diaryEntry\"}\n// new: authors;knut,view=diff,eyJyZXYxIjoiYWJjMTIzIiwicmV2MiI6ImRlZjQ1NiJ9|latest-posts\n\nconst panePattern = /^([.a-z0-9_-]+),?({.*?})?(?:(;|$))/i\nconst isParam = (str: string) => /^[a-z0-9]+=[^=]+/i.test(str)\nconst isPayloadLike = (str: string) => /^[A-Za-z0-9\\-_]+(?:={0,2})$/.test(str)\nconst exclusiveParams = ['view', 'since', 'rev', 'inspect', 'comment']\n\ntype Truthy<T> = T extends false\n  ? never\n  : T extends ''\n    ? never\n    : T extends 0\n      ? never\n      : T extends 0n\n        ? never\n        : T extends null | undefined\n          ? NonNullable<T>\n          : T\nconst isTruthy = Boolean as (t: unknown) => boolean as <T>(t: T) => t is Truthy<T>\n\nfunction parseChunks(chunks: string[], initial: RouterPaneSibling): RouterPaneSibling {\n  const sibling: RouterPaneSibling = {...initial, params: EMPTY_PARAMS, payload: undefined}\n  return chunks.reduce((pane, chunk) => {\n    if (isParam(chunk)) {\n      const key = chunk.slice(0, chunk.indexOf('='))\n      const value = chunk.slice(key.length + 1)\n      pane.params = {...pane.params, [decodeURIComponent(key)]: decodeURIComponent(value)}\n    } else if (isPayloadLike(chunk)) {\n      pane.payload = tryParseBase64Payload(chunk)\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('Unknown pane segment: %s - skipping', chunk)\n    }\n\n    return pane\n  }, sibling)\n}\n\nfunction encodeChunks(pane: RouterPaneSibling, index: number, group: RouterPaneGroup): string {\n  const {payload, params = {}, id} = pane\n  const [firstSibling] = group\n  const paneIsFirstSibling = pane === firstSibling\n  const sameAsFirst = index !== 0 && id === firstSibling.id\n  const encodedPayload =\n    typeof payload === 'undefined' ? undefined : encodeJsonParams(payload as any)\n\n  const encodedParams = Object.entries(params)\n    .filter((entry): entry is [string, string] => {\n      const [key, value] = entry\n      if (!value) return false\n      if (paneIsFirstSibling) return true\n\n      // omit the value if it's the same as the value from the first sibling\n      const valueFromFirstSibling = firstSibling.params?.[key]\n      if (value === valueFromFirstSibling && !exclusiveParams.includes(key)) return false\n      return true\n    })\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n\n  return (\n    [sameAsFirst ? '' : id]\n      .concat([encodedParams.length > 0 && encodedParams, encodedPayload].filter(isTruthy).flat())\n      .join(',') || ','\n  )\n}\n\nexport function parsePanesSegment(str: string): RouterPanes {\n  if (str.indexOf(',{') !== -1) {\n    return parseOldPanesSegment(str)\n  }\n\n  return str\n    .split(';')\n    .map((group) => {\n      const [firstSibling, ...restOfSiblings] = group.split('|').map((segment) => {\n        const [id, ...chunks] = segment.split(',')\n        return parseChunks(chunks, {id})\n      })\n\n      return [\n        firstSibling,\n        ...restOfSiblings.map((sibling) => ({\n          ...firstSibling,\n          ...sibling,\n          id: sibling.id || firstSibling.id,\n          params: {...omit(firstSibling.params, exclusiveParams), ...sibling.params},\n          payload: sibling.payload || firstSibling.payload,\n        })),\n      ]\n    })\n    .filter((group) => group.length > 0)\n}\n\nfunction parseOldPanesSegment(str: string): RouterPanes {\n  const chunks: RouterPaneGroup = []\n\n  let buffer = str\n  while (buffer.length) {\n    const [match, id, payloadChunk] = buffer.match(panePattern) || []\n    if (!match) {\n      buffer = buffer.slice(1)\n      continue\n    }\n\n    const payload = payloadChunk && tryParsePayload(payloadChunk)\n    chunks.push({id, payload})\n\n    buffer = buffer.slice(match.length)\n  }\n\n  return [chunks]\n}\n\nfunction tryParsePayload(json: string) {\n  try {\n    return JSON.parse(json)\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n\nfunction tryParseBase64Payload(data: string): unknown {\n  try {\n    return data ? decodeJsonParams(data) : undefined\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n","import {MasterDetailIcon} from '@sanity/icons'\nimport {lazy} from 'react'\nimport {definePlugin} from 'sanity'\n\nimport {\n  DeleteAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  HistoryRestoreAction,\n  PublishAction,\n  UnpublishAction,\n} from './documentActions'\nimport {LiveEditBadge} from './documentBadges'\nimport {getIntentState} from './getIntentState'\nimport {structureUsEnglishLocaleBundle} from './i18n'\nimport {changesInspector} from './panes/document/inspectors/changes'\nimport {validationInspector} from './panes/document/inspectors/validation'\nimport {router} from './router'\nimport {type StructureToolOptions} from './types'\n\nconst documentActions = [\n  PublishAction,\n  UnpublishAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  DeleteAction,\n  HistoryRestoreAction,\n]\n\nconst documentBadges = [LiveEditBadge]\n\nconst inspectors = [validationInspector, changesInspector]\n\n/**\n * The structureTool is a studio plugin which adds the “structure tool” – a tool within\n * Sanity Studio in which content editors can drill down to specific documents to edit them.\n * You can configure your Studio's structure tool(s).\n *\n * @public\n * @param options - Options for the structure tool. See {@link StructureToolOptions}\n * @example Minimal example\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n *\n * export default defineConfig((\n *  // ...\n *  plugins: [\n *    structureTool() // use defaults\n *  ]\n * })\n * ```\n *\n * @example To customise your structure tool\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n * import { FaCar } from 'react-icons'\n\n * export default defineConfig((\n *\t // ...\n *   plugins: [\n *    structureTool({\n *      name: 'cars',\n *      title: 'Cars',\n *      icon: FaCar,\n *      structure: (S) => S.documentTypeList('car'),\n *      defaultDocumentNode: (S) =>\n *        S.document().views([\n *          S.view.form(),\n *          S.view.component(Preview).title('Preview')\n *        ])\n *    })\n *  ]\n * })\n * ```\n * */\nexport const structureTool = definePlugin<StructureToolOptions | void>((options) => {\n  const icon = options?.icon || MasterDetailIcon\n\n  return {\n    name: 'sanity/structure',\n    document: {\n      actions: (prevActions) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document actions already exist in the Studio config\n        return Array.from(new Set([...prevActions, ...documentActions]))\n      },\n      badges: (prevBadges) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document badges already exist in the Studio config\n        return Array.from(new Set([...prevBadges, ...documentBadges]))\n      },\n      inspectors: (prevInspectors) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the inspectors already exist in the Studio config\n        return Array.from(new Set([...prevInspectors, ...inspectors]))\n      },\n    },\n\n    tools: [\n      {\n        name: options?.name || 'structure',\n        title: options?.title || 'Structure',\n        icon,\n        component: lazy(() => import('./components/structureTool')),\n        canHandleIntent: (intent, params) => {\n          if (intent === 'create') return canHandleCreateIntent(params)\n          if (intent === 'edit') return canHandleEditIntent(params)\n          return false\n        },\n        getIntentState,\n        // Controlled by sanity/src/structure/components/structureTool/StructureTitle.tsx\n        controlsDocumentTitle: true,\n        options,\n        router,\n      },\n    ],\n\n    i18n: {\n      bundles: [structureUsEnglishLocaleBundle],\n    },\n  }\n})\n\nfunction canHandleCreateIntent(params: Record<string, unknown>) {\n  // We can't handle create intents without a `type` parameter\n  if (!('type' in params)) {\n    return false\n  }\n\n  // We can handle any create intent as long as it has a `type` parameter,\n  // but we also know how to deal with templates, where other tools might not\n  return 'template' in params ? {template: true} : true\n}\n\nfunction canHandleEditIntent(params: Record<string, unknown>) {\n  // We can't handle edit intents without an `id` parameter\n  if (!('id' in params)) {\n    return false\n  }\n\n  // We can handle any edit intent with a document ID, but we're best at `structure` mode\n  // This ensures that other tools that can handle modes such as `presentation` or `batch`\n  // can take precedence over the structure tool\n  return 'mode' in params ? {mode: params.mode === 'structure'} : true\n}\n","import {type ReactElement, type ReactNode, useMemo, useState} from 'react'\nimport {useConfigContextFromSource, useDocumentStore, useSource} from 'sanity'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {createStructureBuilder, type DefaultDocumentNodeResolver} from './structureBuilder'\nimport {\n  type StructureResolver,\n  type StructureToolContextValue,\n  type UnresolvedPaneNode,\n} from './types'\n\n/** @internal */\nexport interface StructureToolProviderProps {\n  structure?: StructureResolver\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n  children: ReactNode\n}\n\n/** @internal */\nexport function StructureToolProvider({\n  defaultDocumentNode,\n  structure: resolveStructure,\n  children,\n}: StructureToolProviderProps): ReactElement {\n  const [layoutCollapsed, setLayoutCollapsed] = useState(false)\n  const source = useSource()\n  const configContext = useConfigContextFromSource(source)\n  const documentStore = useDocumentStore()\n\n  const S = useMemo(() => {\n    return createStructureBuilder({\n      defaultDocumentNode,\n      source,\n    })\n  }, [defaultDocumentNode, source])\n\n  const rootPaneNode = useMemo(() => {\n    // TODO: unify types and remove cast\n    if (resolveStructure)\n      return resolveStructure(S, {\n        ...configContext,\n        documentStore,\n      }) as UnresolvedPaneNode\n    return S.defaults() as UnresolvedPaneNode\n  }, [S, resolveStructure, configContext, documentStore])\n\n  const features: StructureToolContextValue['features'] = useMemo(\n    () => ({\n      backButton: layoutCollapsed,\n      resizablePanes: !layoutCollapsed,\n      reviewChanges: !layoutCollapsed,\n      splitPanes: !layoutCollapsed,\n      splitViews: !layoutCollapsed,\n    }),\n    [layoutCollapsed],\n  )\n\n  const structureTool: StructureToolContextValue = useMemo(() => {\n    return {\n      features,\n      layoutCollapsed,\n      setLayoutCollapsed,\n      rootPaneNode,\n      structureContext: S.context,\n    }\n  }, [features, layoutCollapsed, rootPaneNode, S.context])\n\n  return (\n    <StructureToolContext.Provider value={structureTool}>{children}</StructureToolContext.Provider>\n  )\n}\n"],"names":["structureLocaleNamespace","structureUsEnglishLocaleBundle","defineLocaleResourceBundle","locale","namespace","resources","DocTitle","props","$","_c","document","documentValue","schema","useSchema","t0","_type","get","schemaType","t","useTranslation","t1","value","error","useValuePreview","t2","t3","message","errorMessage","title","color","ChevronWrapper","styled","Box","CrossDatasetReferencesDetails","details","CrossDatasetReferencesSummary","summary","Table","table","theme","rem","sanity","space","DocumentIdFlex","Flex","OtherReferenceCount","difference","totalCount","references","length","count","Symbol","for","t4","t5","PaneItemPreview","icon","layout","presence","isRecord","isValidElement","isString","isNumber","documentPreviewStore","_id","getPreviewStateObservable","previewStateObservable","draft","isLoading","published","useObservable","status","tooltip","getPreviewValueWithFallback","t6","BackLink","forwardRef","ref","routerPanesState","groupIndex","useContext","PaneRouterContext","slice","panes","state","usePaneLayout","pane","PaneLayoutContext","Error","ChildLink","childId","childParameters","childPayload","rest","id","params","payload","ParameterizedLink","currentPanes","siblingIndex","nextParams","useUnique","nextPayload","currentGroup","currentSibling","__spreadProps","nextSibling","nextGroup","t7","t8","t9","nextPanes","t10","nextState","t11","ReferenceChildLink","children","documentId","documentType","parentRefPath","template","pathToString","__spreadValues","type","usePaneRouter","EMPTY_ARRAY","ReferencePreviewLink","onClick","getPublishedId","documentPresence","useDocumentPresence","useDocumentPreviewStore","name","linkProps","ConfirmDeleteDialogBody","crossDatasetReferences","internalReferences","documentTitle","action","datasetNames","hasUnknownDatasetNames","onReferenceLinkClick","toast","useToast","item","UnknownIcon","renderPreviewItem","DocumentTitle","T0","T1","T2","t12","normalizedDatasetNames","datasetSubtitle","datasets","join","context","t13","t14","t15","t16","Card","map","item_0","borderTop","undefined","documentCount","minWidth","filter","_temp","t17","index","projectId","datasetName","push","CopyIcon","content","reference","isClientError","e","POLL_INTERVAL","visiblePoll$","getVisiblePoll$","fromEvent","pipe","startWith","visibilityState","distinctUntilChanged","switchMap","visible","timer","EMPTY","shareReplay","refCount","bufferSize","getDocumentExistence","versionedClient","draftId","getDraftId","publishedId","requestOptions","uri","getDataUrl","json","query","excludeContent","tag","observable","request","omitted","nonExistant","doc","reason","some","fetchCrossDatasetReferences","checkDocumentId","of","currentDataset","config","dataset","url","catchError","statusCode","useInternalReferences","createHookFromObservableFactory","documentStore","listenQuery","fetch","listen","transitions","throttleTime","useCrossDatasetReferences","useReferringDocuments","useClient","DEFAULT_STUDIO_CLIENT_OPTIONS","useDocumentStore","isInternalReferencesLoading","isCrossDatasetReferencesLoading","Array","from","Set","Boolean","sort","projectIds","_temp2","_temp3","_temp4","crossDatasetReference_1","crossDatasetReference","crossDatasetReference_0","DialogBody","LoadingContainer","attrs","align","direction","justify","ConfirmDeleteDialog","onCancel","onConfirm","dialogId","useId","showConfirmButton","text","cancelButton","confirmButton","ConfirmDeleteDialogContainer","setError","useState","handleRetry","tone","Delay","ms","ready","setReady","timeoutId","setTimeout","clearTimeout","useEffect","PANE_DEBUG","PANE_COLLAPSED_WIDTH","PANE_DEFAULT_MIN_WIDTH","Root","Layer","PaneDivider","disabled","element","resize","dragging","setDragging","event","preventDefault","startX","pageX","handleMouseMove","deltaX","handleMouseUp","e_0","window","removeEventListener","addEventListener","handleMouseDown","Pane","forwardedRef","currentMaxWidthProp","currentMinWidthProp","maxWidthProp","minWidthProp","restProps","currentMinWidth","currentMaxWidth","flex","maxWidth","selected","flexProp","rootElement","setRootElement","collapse","collapsed","layoutCollapsed","expand","expandedElement","mount","p","find","indexOf","paneIndex","nextPane","isLast","expanded","nextCollapsed","useRef","current","useImperativeHandle","refValue","setRef","handleCollapse","handleExpand","contextValue","bb0","bb1","hidden","divider","Infinity","t18","style","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","displayName","usePane","PaneContext","PaneContent","as","overflow","padding","toLowerCaseNoSpaces","str","toLocaleLowerCase","replaceAll","MENU_GROUP_POPOVER_PROPS","constrainSize","placement","portal","PaneMenuButtonItem","isAfterGroup","node","getI18nText","useGetI18nText","child","childIndex","key","child_0","childIndex_0","PaneContextMenuItemResolver","intent","PaneContextMenuItem","tooltipContent","useI18nText","hotkey","split","iconRight","CheckmarkIcon","onAction","PaneContextIntentMenuItem","intentLink","useIntentLink","handleClick","href","CONTEXT_MENU_POPOVER_PROPS","nodesHasTone","nodes","PaneContextMenuButton","actionsNodes","hasCritical","hasCaution","nodeIndex","RootCard","PaneFooter","$border","css","Layout","TitleCard","fg","bg","card","enabled","TitleTextSkeleton","TextSkeleton","TitleText","Text","TabsBox","rgba","base","PaneHeader","actions","backButton","border","contentAfter","loading","subActions","tabs","tabIndex","paneElement","paneRect","useElementRect","height","innerHeight","width","layoutStyle","handleTitleClick","handleLayoutClick","showTabsOrSubActions","getDisabledReason","disabledReason","ariaLabel","isDisabled","PaneHeaderActionButton","warn","PaneHeaderMenuItemActionButton","hotkeys","PaneHeaderActionIntentButton","PaneHeaderMenuGroupActionButton","idx","_calcPaneResize","cache","left","right","sum","leftMinWidth","rightMinWidth","leftMaxWidth","Math","min","rightMaxWidth","minDeltaX","rightMinDeltaX","maxDeltaX","leftMaxDeltaX","_deltaX","max","leftW","rightW","leftFlex","rightFlex","_getDOMPath","el","path","parentElement","childNodes","unshift","EMPTY_PATH","_sortElements","elements","WeakMap","set","_sortByElementPath","a","b","_a","_b","len","i","aIndex","bIndex","createPaneLayoutController","observers","optionsMap","userCollapsedElementSet","rootWidth","resizeDataMap","Map","resizing","add","_notifyObservers","delete","options","original","splice","leftElement","leftIndex","leftOptions","rightElement","rightOptions","offsetWidth","leftResizeData","rightResizeData","nextRootElement","setRootWidth","nextRootWidth","subscribe","observer","_elements","dataMap","lastElement","collapsedWidth","remaingWidth","userCollapsed","has","sizeCollapsed","resizeData","data","PaneLayout","onCollapse","onExpand","controller","rootRect","setState","paneLayout","isMenuNodeButton","renderAsButton","isNotMenuNodeButton","negate","resolveMenuNodes","fieldActions","menuItems","menuItemGroups","keyOffset","mapFieldActionToPaneMenuNode","groups","itemGroup","g","i18n","ungroupedItems","group","shortcut","actionHandler","showAsAction","childIdx","IntentButton","linkRef","Link","InsufficientPermissionsMessageTooltip","reveal","currentUser","useCurrentUser","POPOVER_PROPS","getIntent","templates","typeName","templateId","baseParams","initialDocumentId","parameters","PaneHeaderCreateButton","templateItems","useTemplates","templatePermissions","isTemplatePermissionsLoading","useTemplatePermissions","every","nothingGranted","reduce","permissionsById","AddIcon","firstItem","permissions","granted","itemIndex","permissions_0","disabled_0","intent_0","acc","permission_0","permission","isNonNullable","hashObject","sortObject","v","isArray","Object","entries","keyA","keyB","localeCompare","JSON","stringify","parse","PaneHeaderActions","memo","initialValueTemplateItems","initialValueTemplateItemsFromStructure","actionHandlers","EMPTY_OBJECT","handleAction","useCallback","console","handler","menuNodes","useMemo","actionNodes","contextMenuNodes","initialValueTemplateItemFromMenuItems","menuItemIndex","intentParams","templateParams","description","combinedInitialValueTemplates","uniqBy","MissingSchemaType","Code","getIconWithFallback","defaultIcon","PaneItem","pressed","margin","marginBottom","marginTop","hasSchemaType","clicked","setClicked","isSanityDocument","DocumentIcon","opacity","FolderIcon","preview","metaKey","RenderActionCollectionState","actionProps","onActionComplete","RenderBadgeCollectionState","badges","badgeProps","ErrorPane","paneKey","getWaitMessages","thresholds","messageKey","isDev","src","merge","threshold","mapTo","delay","DEFAULT_MESSAGE_KEY","Content","LoadingPane","messageProp","resolvedMessage","currentMessage","setCurrentMessage","sub","unsubscribe","contentElement","setContentElement","mounted","setMounted","_raf2","DELAY","useDocumentPane","documentPane","DocumentPaneContext","CommentsWrapper","CommentsProviderWrapper","useCommentsEnabled","connectionState","onPathOpen","inspector","openInspector","setParams","createPathWithParams","selectedCommentId","comment","paramsRef","useLayoutEffect","commentId","inspect","COMMENTS_INSPECTOR_NAME","location","origin","getCommentLink","handleClearSelectedComment","handleOpenCommentsInspector","_DEBUG","EMPTY_PARAMS","LOADING_PANE","DOCUMENT_PANEL_PORTAL_ELEMENT","useStructureTool","structureTool","StructureToolContext","DOCUMENT_PANEL_MIN_WIDTH","DOCUMENT_PANEL_INITIAL_MIN_WIDTH","DOCUMENT_INSPECTOR_MIN_WIDTH","DOCUMENT_INSPECTOR_MAX_WIDTH","INSPECT_ACTION_PREFIX","DEFAULT_MENU_ITEM_GROUPS","HISTORY_INSPECTOR_NAME","VALIDATION_INSPECTOR_NAME","DocumentInspectorMenuItemsResolver","inspectors","onMenuItems","lenRef","setMenuItems","menuItemsRef","newFieldActions","setMenuItem","prev","next","InspectorMenuItems","useMenuItem","defineInspectorMenuItemComponent","InspectorMenuItem","menuItem","useDocumentTitle","editState","subscribed","IGNORE_OPS","DocumentOperationResults","pushToast","documentPaneValue","documentTitleInfo","titleError","useDocumentOperationEvent","prevEvent","paneRouter","includes","op","documentTitleBase","cleanupId","closable","duration","Strong","closeCurrentAndAfter","isLiveEditEnabled","liveEdit","position","zIndex","lineHeight","DocumentInspectorHeader","closeButtonLabel","forwardedAs","onClose","CloseIcon","div","Resizer","onResize","onResizeStart","mouseXRef","Resizable","setElement","elementWidthRef","targetWidth","setTargetWidth","handleResizeStart","w","handleResize","DocumentInspectorPanel","closeInspector","features","handleClose","component","createElement","resizablePanes","STRUCTURE_TOOL_NAMESPACE","useStructureToolSetting","defaultValue","keyValueStore","useKeyValueStore","keyValueStoreKey","getKey","value_0","newValue","setKey","VIEW_MODE_PARSED","VIEW_MODE_RAW","VIEW_MODES","lru","LRU","maxSize","isExpanded","keyPath","cached","toggleExpanded","selectElement","sel","getSelection","range","createRange","removeAllRanges","selectNodeContents","addRange","select","currentTarget","maybeSelectAll","keyCode","ctrlKey","isDocumentLike","JSONInspectorWrapper","fonts","code","family","sizes","fontSize","syntax","property","constant","string","boolean","number","Search","onChange","target","handleChange","SearchIcon","InspectDialog","onInspectClose","dialogIdPrefix","viewModeId","onViewModeChange","mode","viewMode","setParsedViewMode","setRawViewMode","bottom","outline","ignoreCase","Banner","Icon","DeletedDocumentBanner","revisionId","restore","useDocumentOperation","navigateIntent","useRouter","execute","handleRestore","ReadOnlyIcon","DeprecatedDocumentTypeBanner","isDeprecatedSchemaType","deprecated","ErrorOutlineIcon","AskToEditDialogOpened","defineEvent","version","AskToEditRequestSent","MAX_NOTE_LENGTH","RequestPermissionDialog","onRequestSubmitted","telemtry","useTelemetry","useProjectId","apiVersion","client","zOffset","useZIndex","isSubmitting","setIsSubmitting","note","setNote","msgError","setMsgError","hasTooManyRequests","setHasTooManyRequests","hasBeenDenied","setHasBeenDenied","adminRole","roles","requestedRole","method","body","requestUrl","then","log","catch","err","response","errMessage","finally","onSubmit","fullscreen","role_0","role","appliesToUsers","LOADING_STATE","EMPTY_STATE","DECLINED_STATE","PENDING_STATE","EXPIRED_STATE","useRoleRequestsStatus","checkRoleRequests","checkRoleRequests$","requests","projectRequests","resourceId","declinedRequest","isAfter","addWeeks","Date","createdAt","isBefore","InsufficientPermissionBanner","requiredPermission","roleRequestStatus","requestStatusLoading","requestStatusError","requestSent","setRequestSent","requestPending","currentUserRoles","isOnlyViewer","showRequestPermissionDialog","setShowRequestPermissionDialog","listFormat","useListFormat","telemetry","roleTitles","formatToParts","Roles","part","ReferenceChangedBanner","replaceCurrent","routerReferenceId","parentGroup","parentSibling","parentId","hasHistoryOpen","rev","pathFromString","referenceInfoObservable","parentRefPathSegment","keyedSegmentIndex","findIndex","concat","unstable_observePathsDocumentPair","debounceTime","result","availability","pathGet","snapshot","_ref","referenceInfo","handleReloadReference","available","SyncIcon","WarningOutlineIcon","ResolvedLiveEdit","DraftLiveEditBanner","displayed","isPublishing","setPublishing","isDiscarding","setDiscarding","publish","discardChanges","liveEditResolveType","handlePublish","handleDiscard","isDraftId","TitleContainer","Stack","heading","FormHeader","isSingleton","__experimental_formPreviewTitle","LONG_ENOUGH_BUT_NOT_TOO_LONG","useConditionalToast","ev","FormView","margins","collapsedFieldSets","collapsedPaths","validation","formState","onFocus","onBlur","onSetCollapsedPath","onSetCollapsedFieldSet","onSetActiveFieldGroup","openPath","patchChannel","createPatchChannel","isLocked","transactionSyncLock","conditionalToastParams","pair","documentEvents","tap","prepareMutationEvent","prepareRebaseEvent","hasRev","_rev","patches","formRef","setFormRef","focusedFirstDescendant","setFocusedFirstDescendant","focusPath","focusFirstDescendant","changed","focused","members","readOnly","mutations","mut","patch","fromMutationPatches","remotePatches","remoteMutations","localPatches","localMutations","DocumentBox","Scroller","ScrollContainer","$disabled","DocumentPanel","footerHeight","headerHeight","isInspectOpen","setDocumentPanelPortalElement","activeViewId","views","isPermissionsLoading","isDeleting","isDeleted","timelineStore","parentPortal","usePortal","portalRef","documentScrollElement","setDocumentScrollElement","formContainerElement","_createdAt","activeView","view","portalElement","splitPanes","formViewHidden","activeViewNode","historical","lastNonDeletedRevId","useTimelineSelector","isLiveEdit","scrollTo","inspectDialog","showInspector","POPOVER_FALLBACK_PLACEMENTS","DIALOG_WIDTH_TO_UI_WIDTH","small","medium","large","full","ConfirmDialog","dialog","referenceElement","ConfirmDialogContent","cancelButtonIcon","cancelButtonText","confirmButtonIcon","confirmButtonText","isTopLayer","useLayer","useGlobalKeyDown","useClickOutsideEvent","Button","Grid","ModalDialog","footer","showCloseButton","header","Dialog","PopoverDialog","PopoverDialogContent","DocumentActionPortalProvider","ActionStateDialog","modalId","unknownModal","ActionDialogWrapper","actionStates","actionIndex","setActionIndex","currentAction","ActionMenuButton","idPrefix","setReferenceElement","preventOverflow","popoverProps","actionState","renderActionDialog","ActionMenuListItem","onHandle","String","label","replace","tooltipProps","s","toUpperCase","DISABLED_REASON_TITLE_KEY","NOTHING_TO_DELETE","NOT_READY","DeleteAction","onComplete","setIsDeleting","paneSetIsDeleting","deleteOp","isConfirmDialogOpen","setConfirmDialogOpen","handleCancel","handleConfirm","handle","useDocumentPairPermissions","TrashIcon","DISABLED_REASON_KEY","NO_CHANGES","NOT_PUBLISHED","DiscardChangesAction","ResetIcon","NOTHING_TO_DUPLICATE","DuplicateAction","duplicate","isDuplicating","setDuplicating","dupeId","uuid","duplicateSuccess","firstValueFrom","operationEvents","HistoryRestoreAction","revision","isRevisionInitial","isRevisionLatest","RevertIcon","DocumentPublished","LIVE_EDIT_ENABLED","ALREADY_PUBLISHED","publishedAt","AlreadyPublished","useTemporalPhrase","timeSincePublished","useRelativeTime","PublishAction","publishState","setPublishState","validationStatus","useValidationStatus","syncState","useSyncState","changesOpen","useEditState","isValidationErrorMarker","hasValidationErrors","publishScheduled","setPublishScheduled","isSyncing","isValidating","_updatedAt","hasDraft","doPublish","validationComplete","didPublish","publishedImmediately","previouslyPublished","PublishIcon","UnpublishAction","unpublish","UnpublishIcon","DocumentStatusBarActionsInner","showMenu","states","__internal_tasks","firstActionState","menuActionStates","buttonElement","setButtonElement","footerAction","DocumentStatusBarActions","allActions","renderDocumentStatusBarActions","HistoryStatusBarActions","revTime","isRestoreAction","historyActions","toLowerCase","DocumentHeaderTabs","tabPanelId","DocumentHeaderTab","isActive","viewId","setView","DocumentHeaderTitle","DocumentPanelHeader","_props","onMenuAction","onPaneClose","onPaneSplit","unstable_languageFilter","hasGroupSiblings","useFieldActions","menuButtonNodes","showTabs","showSplitPaneButton","splitViews","showSplitPaneCloseButton","showBackButton","showPaneGroupCloseButton","renderPaneActions","ArrowLeftIcon","languageFilterComponent","SplitVerticalIcon","DocumentPanelHeaderActionDialogDeferred","useDeferredValue","DocumentPanelHeaderActionDialog","SpacerButton","size","pointerEvents","visibility","BADGE_TONES","primary","success","warning","danger","DocumentBadgesInner","DocumentBadgesDeferred","DocumentBadges","renderDocumentBadges","badge","whiteSpace","StyledMotionPath","motion","Circle","Arrows","Checkmark","rotateAnimation","keyframes","RotateGroup","root","syncing","scale","transition","saved","changes","circle","strokeDasharray","strokeDashoffset","arrows","checkmark","pathLength","AnimatedStatusIcon","STATUS_DICTIONARY","i18nKey","DocumentStatusPulse","currentStatus","SYNCING_TIMEOUT","SAVED_TIMEOUT","DocumentStatusLine","singleLine","setStatus","lastUpdated","timerId","timerId_0","StatusText","RevisionStatusLine","date","format","RestoreIcon","useResizeObserver","resizeObserver","observe","unobserve","CONTAINER_BREAKPOINT","DocumentStatusBar","actionsBoxRef","createLinkMetadata","onDocumentChange","CreateLinkedActions","useSanityCreateConfig","components","documentLinkedActions","showingRevision","setCollapsed","contentRect","shouldRender","isSanityCreateLinked","flexShrink","marginLeft","onOlderRevision","KeyboardShortcutResponder","actionsBoxElement","activeIndex","onActionStart","onKeyDown","rootRef","activeAction","matchingStates","isHotkey","matchingState","handleKeyDown","DocumentActionShortcuts","setActiveIndex","renderDocumentActionShortcuts","getInspectorItems","currentInspector","hasValue","inspectorMenuItems","getInspectItem","JsonIcon","getProductionPreviewItem","previewUrl","EarthAmericasIcon","getMenuItems","inspectorItems","items","LinkIcon","usePreviewUrl","resolveProductionUrl","useSource","BehaviorSubject","subject","asObservable","DocumentLayoutError","DIALOG_PROVIDER_POSITION","StyledChangeConnectorRoot","ChangeConnectorRoot","DocumentLayout","inspectOpen","onHistoryOpen","isInitialValueLoading","paneParams","zOffsets","getSanityCreateLinkMetadata","documentLinkedBannerContent","CreateLinkedBannerContent","startInCreateBanner","StartInCreateBanner","footerElement","setFooterElement","headerElement","setHeaderElement","setActionsBoxElement","documentPanelPortalElement","setInspectorMenuItems","rootFieldActionNodes","setRootFieldActionNodes","footerRect","headerRect","handleKeyUp","stopPropagation","onConnectorSetFocus","paneDialog","changesInspectorTab","ShowWhenPaneOpen","pick","plugin","unstable_layout","useDocumentLayoutComponent","defaultComponent","useMiddlewareComponents","DocumentURLCopied","CreatedDraft","getInitialValueTemplateOpts","opts","panePayload","structureNodeTemplate","templateName","urlTemplate","typeTemplates","DocumentPaneProvider","onFocusPath","setDocumentMeta","useCopyPaste","documentActions","documentBadges","unstable_fieldActions","fieldActionsResolver","languageFilterResolver","inspectorsResolver","presenceStore","usePresenceStore","setPaneParams","viewsProp","paneOptions","documentIdRaw","templateParameters","initialValueRaw","useInitialValue","initialValue","validationRaw","useConnectionState","languageFilter","setFocusPath","focusPathRef","timelineMode","setTimelineMode","timelineError","setTimelineError","useTimelineStore","onError","since","sinceAttributes","timelineDisplayed","timelineReady","isPristine","setPresence","subscription","nextPresence","inspectorName","setInspectorName","inspectParamRef","resolvedChangesInspector","compareValue","setTimelineRange","newSince","newRev","handleBlur","blurredPath","disableBlurRef","patchRef","toMutationPatches","closeInspectorName","nextInspectorName","nextInspector","currentParams","onOpen","handleHistoryClose","handleHistoryOpen","reviewChanges","handlePaneClose","closeCurrent","handlePaneSplit","duplicateCurrent","toggleLegacyInspect","toggle","omit","handleMenuAction","open","navigator","clipboard","writeText","toString","startsWith","handleLegacyInspectClose","onSetOpenPath","fieldGroupState","onSetFieldGroupState","onSetCollapsedFieldSets","handleOnSetCollapsedPath","prevState","setAtPath","handleOnSetCollapsedFieldSet","handleSetActiveFieldGroup","groupName","docId","docPermissionsInput","useDocumentValuePermissions","isCreateLinked","isSanityCreateLinkedDocument","isNonExistent","hasNoPermission","updateActionDisabled","isActionEnabled","createActionDisabled","reconnecting","isLiveEditAndDraft","useFormState","comparisonValue","formStateRef","setOpenPath","getExpandOperations","forEach","updatePresence","nextFocusPath","setLocation","lastActiveAt","toISOString","selection","updatePresenceThrottled","throttle","leading","trailing","handleFocus","_nextFocusPath","pathFor","onHistoryClose","timeout","restParams","pathFromUrl","resolveKeyedPath","deepEquals","DocumentPane","parentSourceName","source","DocumentPaneInner","resolveNewDocumentOptions","usePaneOptions","isLoaded","isDocumentLoaded","useDocumentType","mergeDocumentType","providerProps","handleEditReference","childParams","routerPanesStateLength","activePath","PARTIAL_PAGE_LIMIT","FULL_LIST_LIMIT","DEFAULT_ORDERING","by","field","EMPTY_RECORD","RootBox","$opacity","CommandListBox","SKELETON_ITEMS","keys","LoadingView","num","DocumentListPaneContent","childItemId","filterIsSimpleTypeConstraint","hasMaxItems","hasSearchQuery","isLazyLoading","loadingVariant","onEndReached","onRetry","paneTitle","searchInputElement","showIcons","setShouldRender","handleEndReached","renderItem","isSelected","isLastItem","showSpinner","showMaxItemsMessage","limit","noDocumentsContent","mainContent","removePublishedWithDrafts","documents","collate","entry","hasPublished","applyOrderingFunctions","order","orderBy","mapWith","fieldType","tryResolveSchemaTypeForPath","fieldExtendsType","jsonType","baseType","pathSegments","PathUtils","fromString","segment","getFieldTypeByName","isKeySegment","isIndexSegment","memberType","otherType","isReferenceSchemaType","refType","otherRefType","to","fieldName","fields","ofType","findTypes","types","isSplat","findStaticTypesInFilter","IMPLICIT_SCHEMA_TYPE_FIELDS","joinReferences","strict","head","tail","schemaField","refTypes","tailFields","tailWrapper","getExtendedProjection","ordering","swr","createSWR","listenSearchQuery","searchQuery","staticTypeNames","maxFieldDepth","searchStrategy","sortBy","extendedProjection","events$","defer","events","includeResult","mergeMap","throwError","share","welcome$","mutationAndReconnect$","partition","swrKey","take","asyncScheduler","exhaustMapWithTrailing","typeNames","getSearchableTypes","search","createSearch","strategy","maxDepth","doFetch","__unstable_extendedProjection","comments","skipSortByScore","hits","hit","fromCache","INITIAL_QUERY_STATE","isLoadingFullList","useDocumentList","searchFilter","paramsProp","sortOrder","useWorkspace","useSearchMaxFieldDepth","typeNameFromFilter","onRetry$","observableCallback","onFetchFullList$","onLoadFullList","queryResults$","listenSearchQueryArgs","partialList$","fullList$","withLatestFrom","takeUntil","caught$","safeError","scan","nonErrorThrownWarning","thrown","rotate","fadeIn","AnimatedSpinnerIcon","SpinnerIcon","SubtleSpinnerIcon","DelayedSubtleSpinnerIcon","DocumentListPane","sortOrderRaw","displayOptions","useShallowUnique","staticTypes","setSearchQuery","searchInputValue","setSearchInputValue","setSearchInputElement","sortWithOrderingFn","trim","handleQueryChange","useObservableEvent","event$","debounce","handleClearSearch","handleSearchKeyDown","enableSearchSpinner","setEnableSearchSpinner","textInputIcon","initialValueTemplates","setLayout","setSortOrder","StructurePaneHeader","DocumentSheetListSelect","row","selectedAnchor","setSelectedAnchor","meta","handleOnClick","shiftKey","shiftClickIndex","lowerIndex","upperIndex","additionalSelectedRows","getRowModel","flatRows","currentSelectedRows","getSelectedRowModel","rows","setRowSelection","nextSelectedRows","rowId","isRowCurrentlySelected","getIsSelected","toggleSelected","paddingLeft","getCanSelect","useDocumentSheetListContext","DocumentSheetListContext","DocumentSheetListProvider","selectedAnchorCellDetails","setSelectedAnchorCellDetails","selectedRangeCellIndexes","setSelectedRangeCellIndexes","clearAndSetFocusSelection","nextAnchorDetails","activeElement","HTMLElement","blur","resetFocusSelection","changeSelectionColumn","visibleColumns","getVisibleLeafColumns","columnIndexAfterMove","col","colId","rowIndex","changeSelectionRange","previousSelection","anchorIndex","getNextIndex","startingIndex","firstSelectedIndex","lastIndexSelected","nextIndex","setSelectedAnchorCell","handleEscapePress","nextAnchorCellDetails","handleUpDownKey","isShiftKey","offset","newSelectedCellRowIndex","handleAnchorKeydown","handleAnchorClick","getElementById","contains","focusAnchorCell","anchorCellDetails","getStateByCellId","submitFocusedCell","DataCell","td","PinnedDataCell","SheetListCellInner","getValue","column","cellId","renderValue","setRenderValue","isDirty","setIsDirty","inputRef","cellState","handleOnFocus","patchDocument","handleProgrammaticFocus","focus","HTMLInputElement","handleOnMouseDown","detail","handleOnEnterDown","handleOnChange","handleOnBlur","handlePaste","clipboardData","getData","handleCopy","getBorderStyle","inputProps","boxShadow","SheetListCell","cell","isPinned","getIsPinned","Cell","borderWidth","getIsLastColumn","getStart","borderRight","getSize","flexRender","columnDef","getContext","VISIBLE_COLUMN_LIMIT","PreviewCell","displayValue","columnHelper","createColumnHelper","SUPPORTED_FIELDS","getColsFromSchemaType","parentalField","tableColumns","nextCol","accessor","enableHiding","info","isObjectSchemaType","columns","isAccessorKeyColumnDef","isGroupColumnDef","flatColumns","cols","flatMap","useDocumentSheetColumns","documentSchemaType","display","getIsSomeRowsSelected","getToggleAllPageRowsSelectedHandler","initialColumnsVisibility","accCols","countAllowedVisible","visibilityKey","ColumnsControl","isVisibleLimitReached","getCanHide","setInitialColumns","resetColumnVisibility","handleColumnOnChange","toggleVisibility","getColumnVisibilityDisabled","isColumnVisible","getIsVisible","isSingleColumnVisible","maxHeight","overflowY","getAllLeafColumns","SearchContainer","DocumentSheetListFilter","useSearchState","filtersVisible","Header","th","PinnedHeader","HoverMenu","DocumentSheetListHeader","headerGroup","headerTitle","depth","parent","HeaderTag","canShowHeaderMenu","boxSizing","EllipsisHorizontalIcon","DocumentSheetListPaginator","setPageIndex","getCanPreviousPage","DoubleChevronLeftIcon","previousPage","ChevronLeftIcon","getState","pagination","pageIndex","getPageCount","nextPage","getCanNextPage","ChevronRightIcon","DoubleChevronRightIcon","pageSize","setPageSize","Number","createDocumentsSet","documentsReducer","nextDocumentResult","_","restDocuments","updatedDocument","nextDocument","LISTEN_OPTIONS","useDocumentSheetListStore","QUERY","dispatch","useReducer","setIsLoading","res","initialFetch","handleListenerEvent","err_0","listener$","uniques","isDraft","values","dataAsArray","useDocumentSheetList","h","PaneContainer","TableContainer","DocumentSheetListPaneInner","totalRows","useReactTable","getCoreRowModel","getFilteredRowModel","getPaginationRowModel","autoResetPageIndex","initialState","columnPinning","columnVisibility","getRowId","fieldId","renderRow","getVisibleCells","rowsCount","getHeaderGroups","headers","DocumentSheetListPane","schemaTypeName","isDocumentSchemaType","addSelectedStateToMenuItems","isEqual","valueRef","shallowEquals","defaultLayout","defaultOrdering","sourceName","defaultSortOrder","menuItemsWithSelectedState","isSheetListLayout","SerializeError","constructor","parentPath","pathSegment","hint","withHelpUrl","helpId","HELP_URL","ORDER_BY_UPDATED_AT","ns","ORDER_BY_CREATED_AT","DEFAULT_SELECTED_ORDERING_OPTION","DEFAULT_ORDERING_OPTIONS","maybeSerializeMenuItem","MenuItemBuilder","serialize","_context","spec","clone","getAction","getTitle","getI18n","getGroup","getIcon","getParams","getShowAsAction","TITLE_REQUIRED","ACTION_OR_INTENT_REQUIRED","ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE","withSpec","builder","getOrderingMenuItem","SortIcon","getOrderingMenuItemsForSchemaType","orderings","maybeSerializeMenuItemGroup","MenuItemGroupBuilder","_title","_i18n","getId","ID_REQUIRED","disallowedPattern","validateId","disallowedChar","match","getStructureNodeId","camelCased","camelCase","test","getSlug","ComponentBuilder","getChild","getComponent","getOptions","getMenuItemGroups","canHandleIntent","componentOptions","resolveTypeForDocument","getClient","GenericViewBuilder","kebabCase","isSerializable","maybeSerializeView","isComponentSpec","ComponentViewBuilder","componentOrSpec","userComponent","COMPONENT_REQUIRED","FormViewBuilder","form","createDocumentChildResolver","resolveDocumentNode","itemId","currentSegment","DocumentBuilder","paneId","getDocumentId","getSchemaType","initialValueTemplate","getInitialValueTemplate","getInitialValueTemplateParameters","getViews","urlId","DOCUMENT_ID_REQUIRED","viewIds","dupes","uniq","getDocumentOptions","documentFromEditor","documentFromEditorWithInitialValue","InitialValueTemplateItemBuilder","getDescription","getTemplateId","getParameters","subtitle","defaultInitialValueTemplateItems","getStructureBuilder","getTypeNames","tpl","initialValueTemplateItem","maybeSerializeInitialValueTemplateItem","menuItemsFromInitialValueTemplateItems","DEFAULT_INTENT_HANDLER","defaultIntentChecker","intentName","isEdit","isCreate","typedSpec","paneFilter","getTypeNamesFromFilter","identity","layoutOptions","noChildResolver","shallowIntentChecker","GenericListBuilder","getDefaultLayout","getCanHandleIntent","getShowIcons","initialValueTemplatesSpecified","getInitialValueTemplates","validateFilter","QUERY_PROVIDED_FOR_FILTER","createDocumentChildResolverForItem","parentItem","Promise","resolve","DocumentListBuilder","getApiVersion","getFilter","getDefaultOrdering","FILTER_REQUIRED","generateHelpUrl","API_VERSION_REQUIRED_FOR_CUSTOM_FILTER","inferInitialValueTemplates","inferTypeName","getSpec","option","getTypeNamesFromEqualityFilter","getTypeNamesFromInTypesFilter","pattern","matches","exec","candidate","getArgType","thing","ListBuilder","isPromise","isListItem","defaultCanHandleIntent","isDocumentListItem","resolveChildForItem","maybeSerializeListItem","ListItemBuilder","listItem","gotWhat","helpText","INVALID_LIST_ITEM","getItems","LIST_ITEMS_MUST_BE_ARRAY","serializedItems","val","dupeIds","dupeDesc","LIST_ITEM_IDS_MUST_BE_UNIQUE","showIcon","getShowIcon","titleIsOptional","SCHEMA_TYPE_NOT_FOUND","serializeOptions","listChild","originalChild","childOptions","createDefaultChildResolver","DocumentListItemBuilder","SCHEMA_TYPE_REQUIRED","DocumentTypeListBuilder","cloneWithoutDefaultIntentHandler","override","BUNDLED_DOC_TYPES","isBundledDocType","isDocumentType","isList","collection","getDocumentTypes","n","getDocumentTypeListItems","getDocumentTypeListItem","startCase","childContext","list","getDocumentTypeList","typeNameOrSpec","StackCompactIcon","StackIcon","hasIcon","getDefaultStructure","createStructureBuilder","defaultDocumentNode","configContext","getConfigContextFromSource","structureBuilder","defaults","documentTypeList","args","documentTypeListItem","documentTypeListItems","documentWithInitialValueTemplate","defaultDocument","menuItemGroup","documentList","documentListItem","orderingMenuItem","orderingMenuItemsForType","editor","isValidElementType","uniqueId","LiveEditBadge","activePanes","setActivePanes","getIntentState","routerState","editDocumentId","isTemplate","TIMELINE_ICON_COMPONENTS","create","discardDraft","initial","editDraft","EditIcon","editLive","getTimelineEventIconComponent","hideScrollbarOnExpand","listWrapper","TIMELINE_LIST_WRAPPER_ID","firstChildren","scrollHeight","clientHeight","currentStyle","getComputedStyle","FlipIcon","ExpandableTimelineItemButton","handleExpandClick","StackWrapper","ListWrapper","$maxHeight","$visible","TIMELINE_ITEM_I18N_KEY_MAPPING","UserAvatarStack","maxLength","userIds","withTooltip","userId","IconBox","getTheme_v2","$color","avatar","TIMELINE_ITEM_EVENT_TONE","withinSelection","RELATIVE_TIME_OPTIONS","minimal","AvatarSkeleton","Skeleton","NameSkeleton","font","UserLine","user","useUser","TooltipContent","collaborators","TimelineItem","chunk","onSelect","optionsMenu","endTimestamp","timestamp","iconComponent","authors","authorUserIds","collaboratorsUsersIds","isSelectable","dateStyle","timeStyle","dateFormat","useDateTimeFormat","updatedTimeAgo","parsedDate","formattedTimestamp","evt","T3","T4","t29","t30","t31","t32","t33","t34","isNonPublishChunk","isPublishChunk","getPreviousPublishAction","chunks","previousPublish","addChunksMetadata","Timeline","hasMoreChunks","lastChunk","selectedChunk","onLoadMore","listMaxHeight","selectedChunkId","chunksWithMetadata","expandedParents","setExpandedParents","filteredChunks","handleExpandParent","selectedIndex","handleSelectChunk","timelineChunk","c","TimelineError","Popover","TIMELINE_MENU_PORTAL","TimelineMenu","setOpen","button","setButton","popoverRef","setPopoverRef","realRevChunk","sinceTime","_temp5","handleOpen","revChunk","sinceId","revId","findRangeForRev","selectRev","sinceChunk","sinceId_0","revId_0","findRangeForSince","selectSince","loadMore","handleLoadMore","revLabel","formatParams","buttonLabel","ChevronDownIcon","state_3","state_2","state_1","state_0","ChangesInspector","showChanges","scrollRef","setScrollRef","diff","selectionState","isComparingCurrent","structureT","FieldWrapper","ChangeFieldWrapper","rootDiff","showFromValue","documentContext","HistorySelector","showList","listHeight","setListHeight","getScrollerRef","FadeInFlex","TABS","isValidTab","tab","ChangesTabs","isReady","paneRouterTab","setPaneRouterTab","changesInspector","getPathTitles","f","itemType","_key","MARKER_ICON","InfoOutlineIcon","MARKER_TONE","ValidationInspector","marker","ValidationCard","errorInfo","setErrorInfo","level","DocumentNodePathBreadcrumbs","pathTitles","Fragment","fontWeight","validationMarkers","hasErrors","isValidationError","hasWarnings","isValidationWarning","CheckmarkCircleIcon","validationInspector","legacyEditParamsToState","decodeURIComponent","encodePanesSegment","encodeChunks","encodeURIComponent","legacyEditParamsToPath","toState","parsePanesSegment","toPath","router","route","intents","transform","panePattern","isParam","isPayloadLike","exclusiveParams","isTruthy","parseChunks","sibling","tryParseBase64Payload","firstSibling","paneIsFirstSibling","sameAsFirst","encodedPayload","encodeJsonParams","encodedParams","valueFromFirstSibling","flat","parseOldPanesSegment","restOfSiblings","buffer","payloadChunk","tryParsePayload","decodeJsonParams","definePlugin","MasterDetailIcon","prevActions","prevBadges","prevInspectors","tools","lazy","canHandleCreateIntent","canHandleEditIntent","controlsDocumentTitle","bundles","StructureToolProvider","structure","resolveStructure","setLayoutCollapsed","useConfigContextFromSource","S","rootPaneNode","structureContext"],"mappings":"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SAASyf;AAAAA,IACT5yB,YAAY+xB;AAAAA,IACZgB,gBAAgB3D;AAAAA,IAChBlG,eAAemG;AAAAA,IACfhmB,gBAAgBgnB;AAAAA,IAChBxP,cAAciP;AAAAA,IACdhP,aAAayO;AAAAA,IACbxO,aAAa0O;AAAAA,IACblc,uBAAuBud;AAAAA,IACvBzd,oBAAoBqd;AAAAA,IACpBpd,wBAAwBud;AAAAA,IACxB3wB;AAAAA,IACAsT;AAAAA,IACAvzB;AAAAA,IACAgpC;AAAAA,IACAhW;AAAAA,IACA7b,gBAAgBA,kBAAkB,CAAE;AAAA,IACpC4G;AAAAA,IACAgqB;AAAAA,IACA1hC;AAAAA,IACA/P;AAAAA,IACA4/B;AAAAA,IACAgT;AAAAA,IACAvvB;AAAAA,IACAyzB;AAAAA,IACAkB;AAAAA,IACApT;AAAAA,IACA/E;AAAAA,IACAC;AAAAA,IACAiX;AAAAA,IACAF;AAAAA,IACA9W;AAAAA,IACAp/B;AAAAA,IACAP;AAAAA,IACAu/B,OAAAA;AAAAA,IACAhD;AAAAA,IACA8N,yBAAyBiM;AAAAA,EAC3B,IACA,CACE3N,kBACA3vB,SACAsmB,cACApY,QACAmgB,aACArY,gBACAoN,oBACAC,gBACAsb,cACAvuB,iBACA2nB,kBACAjW,WACA90B,YACA+vC,eACA9vC,cACAomB,WACA9L,cACAwd,WACAxB,WACAwb,YACAxlB,cACA0pB,aACAxD,oBACAC,mBACAgB,0BACAP,kBACAe,8BACAH,0BACAnB,iBACAE,iBACAqB,2BACA7wC,OACAgpC,aACAhnB,aACAoU,WACAD,YACAD,sBACAgT,uBACA8D,gBACA71B,gBACA8I,eACAsT,UACAxV,SACApE,aACAouB,YACA1hC,OACA/P,YACAw7C,aACAxD,kBACAjB,eACAF,cACA9W,eACAp/B,OACA+7B,YACAt8B,OACAu/B,MAAK,CAET;AAEAvvB,YAAU,MAAM;AACVqsC,QAAAA;AACJ,WAAIjzB,oBAAoB,mBACtBizB,UAAUvsC,WAAW,MAAM;AACf,gBAAA;AAAA,QACRrL,IAAI;AAAA,QACJvB,QAAQ;AAAA,QACR3C,OAAOV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"}