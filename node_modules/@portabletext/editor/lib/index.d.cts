import {Patch} from '@portabletext/patches'
import type {
  ArrayDefinition,
  ArraySchemaType,
  BlockListDefinition,
  BlockStyleDefinition,
  KeyedSegment,
  ObjectSchemaType,
  PortableTextListBlock,
  PortableTextObject,
  TypedObject,
} from '@sanity/types'
import {
  BlockDecoratorDefinition,
  Path,
  PortableTextBlock,
  PortableTextChild,
  PortableTextSpan,
  PortableTextTextBlock,
} from '@sanity/types'
import type {
  BaseSyntheticEvent,
  ClipboardEvent as ClipboardEvent_2,
  FocusEvent as FocusEvent_2,
  KeyboardEvent as KeyboardEvent_2,
  ReactElement,
  RefObject,
} from 'react'
import {
  Component,
  ForwardRefExoticComponent,
  JSX,
  MutableRefObject,
  PropsWithChildren,
  default as React_2,
  RefAttributes,
  TextareaHTMLAttributes,
} from 'react'
import type {Observable, Subject} from 'rxjs'
import {Descendant} from 'slate'
import type {Node as Node_2, Operation, TextUnit} from 'slate'
import type {DOMNode} from 'slate-dom'
import type {ReactEditor} from 'slate-react'
import type {TextInsertTextOptions} from 'slate/dist/interfaces/transforms/text'
import {
  ActionArgs,
  ActionFunction,
  ActorRef,
  ActorRefFrom,
  ActorRefFromLogic,
  AnyActorLogic,
  AnyActorRef,
  AnyEventObject,
  EventObject,
  InputFrom,
  MachineSnapshot,
  MetaObject,
  NonReducibleUnknown,
  Snapshot,
  StateMachine,
  StateValue,
  Values,
} from 'xstate'
import {GuardArgs} from 'xstate/guards'

/**
 * @public
 */
export declare type AddedAnnotationPaths = {
  /**
   * @deprecated An annotation may be applied to multiple blocks, resulting
   * in multiple `markDef`'s being created. Use `markDefPaths` instead.
   */
  markDefPath: Path
  markDefPaths: Array<Path>
  /**
   * @deprecated Does not return anything meaningful since an annotation
   * can span multiple blocks and spans. If references the span closest
   * to the focus point of the selection.
   */
  spanPath: Path
}

/**
 * @alpha
 */
export declare type BaseDefinition = {
  name: string
  title?: string
  icon?: BlockDecoratorDefinition['icon']
}

/**
 * @alpha
 */
export declare type Behavior<
  TBehaviorEventType extends BehaviorEvent['type'] = BehaviorEvent['type'],
  TGuardResponse = true,
> = {
  /**
   * The internal editor event that triggers this behavior.
   */
  on: TBehaviorEventType
  /**
   * Predicate function that determines if the behavior should be executed.
   * Returning a non-nullable value from the guard will pass the value to the
   * actions and execute them.
   */
  guard?: BehaviorGuard<
    PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>,
    TGuardResponse
  >
  /**
   * Array of behavior action sets.
   */
  actions: Array<BehaviorActionIntendSet<TBehaviorEventType, TGuardResponse>>
}

/**
 * @alpha
 */
export declare type BehaviorActionIntend =
  | SyntheticBehaviorEvent
  | {
      type: 'insert.span'
      text: string
      annotations?: Array<{
        name: string
        value: {
          [prop: string]: unknown
        }
      }>
      decorators?: Array<string>
    }
  | {
      type: 'insert.text block'
      placement: 'auto' | 'after' | 'before'
      textBlock?: {
        children?: PortableTextTextBlock['children']
      }
    }
  | {
      type: 'list item.add'
      listItem: string
    }
  | {
      type: 'list item.remove'
      listItem: string
    }
  | {
      type: 'move.block'
      at: [KeyedSegment]
      to: [KeyedSegment]
    }
  | {
      type: 'move.block down'
      at: [KeyedSegment]
    }
  | {
      type: 'move.block up'
      at: [KeyedSegment]
    }
  | {
      type: 'noop'
    }
  | {
      type: 'delete.block'
      blockPath: [KeyedSegment]
    }
  | {
      type: 'delete.text'
      anchor: BlockOffset
      focus: BlockOffset
    }
  | {
      type: 'effect'
      effect: () => void
    }
  | {
      type: 'reselect'
    }
  | {
      type: 'select'
      selection: EditorSelection
    }
  | {
      type: 'select.previous block'
    }
  | {
      type: 'select.next block'
    }
  | {
      type: 'style.add'
      style: string
    }
  | {
      type: 'style.remove'
      style: string
    }
  | {
      type: 'text block.set'
      at: [KeyedSegment]
      level?: number
      listItem?: string
      style?: string
    }
  | {
      type: 'text block.unset'
      at: [KeyedSegment]
      props: Array<'level' | 'listItem' | 'style'>
    }

/**
 * @alpha
 */
export declare type BehaviorActionIntendSet<
  TBehaviorEventType extends BehaviorEvent['type'] = BehaviorEvent['type'],
  TGuardResponse = true,
> = (
  {
    context,
    event,
  }: {
    context: EditorContext
    event: PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>
  },
  guardResponse: TGuardResponse,
) => Array<BehaviorActionIntend>

/**
 * @alpha
 */
export declare type BehaviorEvent = SyntheticBehaviorEvent | NativeBehaviorEvent

/**
 * @alpha
 */
export declare type BehaviorGuard<
  TBehaviorEvent extends BehaviorEvent,
  TGuardResponse,
> = ({
  context,
  event,
}: {
  context: EditorContext
  event: TBehaviorEvent
}) => TGuardResponse | false

/** @beta */
export declare interface BlockAnnotationRenderProps {
  block: PortableTextBlock
  children: ReactElement<any>
  editorElementRef: RefObject<HTMLElement | null>
  focused: boolean
  path: Path
  schemaType: ObjectSchemaType
  selected: boolean
  /** @deprecated Use `schemaType` instead */
  type: ObjectSchemaType
  value: PortableTextObject
}

/** @beta */
export declare interface BlockChildRenderProps {
  annotations: PortableTextObject[]
  children: ReactElement<any>
  editorElementRef: RefObject<HTMLElement | null>
  focused: boolean
  path: Path
  selected: boolean
  schemaType: ObjectSchemaType
  /** @deprecated Use `schemaType` instead */
  type: ObjectSchemaType
  value: PortableTextChild
}

/** @beta */
export declare interface BlockDecoratorRenderProps {
  children: ReactElement<any>
  editorElementRef: RefObject<HTMLElement | null>
  focused: boolean
  path: Path
  schemaType: BlockDecoratorDefinition
  selected: boolean
  /** @deprecated Use `schemaType` instead */
  type: BlockDecoratorDefinition
  value: string
}

/** @beta */
export declare interface BlockListItemRenderProps {
  block: PortableTextTextBlock
  children: ReactElement<any>
  editorElementRef: RefObject<HTMLElement | null>
  focused: boolean
  level: number
  path: Path
  schemaType: BlockListDefinition
  selected: boolean
  value: string
}

/**
 * @alpha
 */
export declare type BlockOffset = {
  path: [KeyedSegment]
  offset: number
}

/** @beta */
export declare interface BlockRenderProps {
  children: ReactElement<any>
  editorElementRef: RefObject<HTMLElement | null>
  focused: boolean
  level?: number
  listItem?: string
  path: Path
  selected: boolean
  style?: string
  schemaType: ObjectSchemaType
  /** @deprecated Use `schemaType` instead */
  type: ObjectSchemaType
  value: PortableTextBlock
}

/** @beta */
export declare interface BlockStyleRenderProps {
  block: PortableTextTextBlock
  children: ReactElement<any>
  editorElementRef: RefObject<HTMLElement | null>
  focused: boolean
  path: Path
  selected: boolean
  schemaType: BlockStyleDefinition
  value: string
}

/**
 * The editor blurred
 * @beta */
export declare type BlurChange = {
  type: 'blur'
  event: FocusEvent_2<HTMLDivElement, Element>
}

/**
 * The editor was either connected or disconnected to the network
 * To show out of sync warnings etc when in collaborative mode.
 * @beta */
export declare type ConnectionChange = {
  type: 'connection'
  value: 'online' | 'offline'
}

/**
 * @alpha
 */
export declare function defineSchema<
  const TSchemaDefinition extends SchemaDefinition,
>(definition: TSchemaDefinition): TSchemaDefinition

/** @beta */
export declare interface EditableAPI {
  activeAnnotations: () => PortableTextObject[]
  isAnnotationActive: (annotationType: PortableTextObject['_type']) => boolean
  addAnnotation: <
    TSchemaType extends {
      name: string
    },
  >(
    type: TSchemaType,
    value?: {
      [prop: string]: unknown
    },
  ) =>
    | {
        markDefPath: Path
        markDefPaths: Array<Path>
        spanPath: Path
      }
    | undefined
  blur: () => void
  delete: (
    selection: EditorSelection,
    options?: EditableAPIDeleteOptions,
  ) => void
  findByPath: (
    path: Path,
  ) => [PortableTextBlock | PortableTextChild | undefined, Path | undefined]
  findDOMNode: (
    element: PortableTextBlock | PortableTextChild,
  ) => DOMNode | undefined
  focus: () => void
  focusBlock: () => PortableTextBlock | undefined
  focusChild: () => PortableTextChild | undefined
  getSelection: () => EditorSelection
  getFragment: () => PortableTextBlock[] | undefined
  getValue: () => PortableTextBlock[] | undefined
  hasBlockStyle: (style: string) => boolean
  hasListStyle: (listStyle: string) => boolean
  insertBlock: <
    TSchemaType extends {
      name: string
    },
  >(
    type: TSchemaType,
    value?: {
      [prop: string]: unknown
    },
  ) => Path
  insertChild: <
    TSchemaType extends {
      name: string
    },
  >(
    type: TSchemaType,
    value?: {
      [prop: string]: unknown
    },
  ) => Path
  insertBreak: () => void
  isCollapsedSelection: () => boolean
  isExpandedSelection: () => boolean
  isMarkActive: (mark: string) => boolean
  isSelectionsOverlapping: (
    selectionA: EditorSelection,
    selectionB: EditorSelection,
  ) => boolean
  isVoid: (element: PortableTextBlock | PortableTextChild) => boolean
  marks: () => string[]
  redo: () => void
  removeAnnotation: <
    TSchemaType extends {
      name: string
    },
  >(
    type: TSchemaType,
  ) => void
  select: (selection: EditorSelection) => void
  toggleBlockStyle: (blockStyle: string) => void
  toggleList: (listStyle: string) => void
  toggleMark: (mark: string) => void
  undo: () => void
}

/** @beta */
export declare interface EditableAPIDeleteOptions {
  mode?: 'blocks' | 'children' | 'selected'
}

/**
 * @alpha
 */
export declare type Editor = {
  send: (event: EditorEvent) => void
  on: ActorRef<Snapshot<unknown>, EventObject, EditorEmittedEvent>['on']
  _internal: {
    editable: EditableAPI
    editorActor: EditorActor
    slateEditor: SlateEditor
  }
}

/**
 * @internal
 */
export declare type EditorActor = ActorRefFrom<typeof editorMachine>

/**
 * When the editor changes, it will emit a change item describing the change
 * @beta */
export declare type EditorChange =
  | BlurChange
  | ConnectionChange
  | ErrorChange
  | FocusChange
  | InvalidValue
  | LoadingChange
  | MutationChange
  | PatchChange
  | ReadyChange
  | RedoChange
  | SelectionChange
  | UndoChange
  | UnsetChange
  | ValueChange

/**
 * @beta
 */
export declare type EditorChanges = Subject<EditorChange>

/**
 * @alpha
 */
export declare type EditorConfig = {
  behaviors?: Array<Behavior>
  keyGenerator?: () => string
  maxBlocks?: number
  readOnly?: boolean
  initialValue?: Array<PortableTextBlock>
} & (
  | {
      schemaDefinition: SchemaDefinition
      schema?: undefined
    }
  | {
      schemaDefinition?: undefined
      schema: ArraySchemaType<PortableTextBlock> | ArrayDefinition
    }
)

/**
 * @alpha
 */
export declare type EditorContext = {
  keyGenerator: () => string
  schema: EditorSchema
  selection: EditorSelection
  value: Array<PortableTextBlock>
}

/**
 * @alpha
 */
export declare type EditorEmittedEvent = PickFromUnion<
  InternalEditorEmittedEvent,
  'type',
  | 'blurred'
  | 'done loading'
  | 'error'
  | 'focused'
  | 'invalid value'
  | 'loading'
  | 'mutation'
  | 'patch'
  | 'readOnly toggled'
  | 'ready'
  | 'selection'
  | 'value changed'
>

/**
 * @alpha
 */
export declare type EditorEvent = PickFromUnion<
  InternalEditorEvent,
  'type',
  | 'annotation.toggle'
  | 'blur'
  | 'decorator.add'
  | 'decorator.remove'
  | 'decorator.toggle'
  | 'focus'
  | 'insert.block object'
  | 'insert.inline object'
  | 'list item.toggle'
  | 'style.toggle'
  | 'patches'
  | 'toggle readOnly'
  | 'update behaviors'
  | 'update value'
>

/**
 * @alpha
 */
export declare function EditorEventListener(props: {
  on: (event: EditorEmittedEvent) => void
}): null

/**
 * @internal
 */
export declare const editorMachine: StateMachine<
  {
    behaviors: Array<Behavior>
    keyGenerator: () => string
    pendingEvents: Array<PatchEvent | MutationEvent_2>
    schema: EditorSchema
    readOnly: boolean
    maxBlocks: number | undefined
    selection: EditorSelection
    value: Array<PortableTextBlock> | undefined
  },
  | {
      type: 'annotation.add'
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'annotation.remove'
      annotation: {
        name: string
      }
    }
  | {
      type: 'annotation.toggle'
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'blur'
    }
  | {
      type: 'decorator.add'
      decorator: string
    }
  | {
      type: 'decorator.remove'
      decorator: string
    }
  | {
      type: 'decorator.toggle'
      decorator: string
    }
  | {
      type: 'focus'
    }
  | {
      type: 'insert.block object'
      placement: 'auto' | 'after' | 'before'
      blockObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'insert.inline object'
      inlineObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'list item.toggle'
      listItem: string
    }
  | {
      type: 'style.toggle'
      style: string
    }
  | PatchEvent
  | MutationEvent_2
  | {
      type: 'normalizing'
    }
  | {
      type: 'done normalizing'
    }
  | {
      type: 'behavior event'
      behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
      editor: PortableTextSlateEditor
      nativeEvent?: {
        preventDefault: () => void
      }
    }
  | {
      type: 'behavior action intends'
      editor: PortableTextSlateEditor
      actionIntends: Array<BehaviorActionIntend>
    }
  | {
      type: 'update schema'
      schema: EditorSchema
    }
  | {
      type: 'update behaviors'
      behaviors: Array<Behavior>
    }
  | {
      type: 'update value'
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'toggle readOnly'
    }
  | {
      type: 'update maxBlocks'
      maxBlocks: number | undefined
    }
  | {
      type: 'ready'
    }
  | PatchesEvent
  | {
      type: 'unset'
      previousValue: Array<PortableTextBlock>
    }
  | {
      type: 'value changed'
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'invalid value'
      resolution: InvalidValueResolution | null
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'error'
      name: string
      description: string
      data: unknown
    }
  | {
      type: 'selection'
      selection: EditorSelection
    }
  | {
      type: 'blurred'
      event: FocusEvent_2<HTMLDivElement, Element>
    }
  | {
      type: 'focused'
      event: FocusEvent_2<HTMLDivElement, Element>
    }
  | {
      type: 'loading'
    }
  | {
      type: 'done loading'
    },
  {},
  never,
  Values<{
    'assign behaviors': {
      type: 'assign behaviors'
      params: NonReducibleUnknown
    }
    'assign schema': {
      type: 'assign schema'
      params: NonReducibleUnknown
    }
    'emit patch event': {
      type: 'emit patch event'
      params: NonReducibleUnknown
    }
    'emit mutation event': {
      type: 'emit mutation event'
      params: NonReducibleUnknown
    }
    'defer event': {
      type: 'defer event'
      params: NonReducibleUnknown
    }
    'emit pending events': {
      type: 'emit pending events'
      params: NonReducibleUnknown
    }
    'clear pending events': {
      type: 'clear pending events'
      params: NonReducibleUnknown
    }
    'handle behavior event': {
      type: 'handle behavior event'
      params: NonReducibleUnknown
    }
  }>,
  never,
  never,
  | 'dirty'
  | {
      pristine: 'normalizing' | 'idle'
    },
  string,
  {
    behaviors?: Array<Behavior>
    keyGenerator: () => string
    maxBlocks?: number
    readOnly?: boolean
    schema: EditorSchema
    value?: Array<PortableTextBlock>
  },
  NonReducibleUnknown,
  | {
      type: 'annotation.add'
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'annotation.remove'
      annotation: {
        name: string
      }
    }
  | {
      type: 'annotation.toggle'
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'blur'
    }
  | {
      type: 'decorator.add'
      decorator: string
    }
  | {
      type: 'decorator.remove'
      decorator: string
    }
  | {
      type: 'decorator.toggle'
      decorator: string
    }
  | {
      type: 'focus'
    }
  | {
      type: 'insert.block object'
      placement: 'auto' | 'after' | 'before'
      blockObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'insert.inline object'
      inlineObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'list item.toggle'
      listItem: string
    }
  | {
      type: 'style.toggle'
      style: string
    }
  | PatchEvent
  | MutationEvent_2
  | {
      type: 'ready'
    }
  | PatchesEvent
  | {
      type: 'unset'
      previousValue: Array<PortableTextBlock>
    }
  | {
      type: 'value changed'
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'invalid value'
      resolution: InvalidValueResolution | null
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'error'
      name: string
      description: string
      data: unknown
    }
  | {
      type: 'selection'
      selection: EditorSelection
    }
  | {
      type: 'blurred'
      event: FocusEvent_2<HTMLDivElement, Element>
    }
  | {
      type: 'focused'
      event: FocusEvent_2<HTMLDivElement, Element>
    }
  | {
      type: 'loading'
    }
  | {
      type: 'done loading'
    }
  | {
      type: 'readOnly toggled'
      readOnly: boolean
    },
  MetaObject,
  {
    readonly id: 'editor'
    readonly context: ({
      input,
    }: {
      spawn: {
        <TSrc extends never>(
          logic: TSrc,
          ...[options]: never
        ): ActorRefFromLogic<never>
        <TLogic extends AnyActorLogic>(
          src: TLogic,
          options?:
            | {
                id?: never
                systemId?: string
                input?: InputFrom<TLogic> | undefined
                syncSnapshot?: boolean
              }
            | undefined,
        ): ActorRefFromLogic<TLogic>
      }
      input: {
        behaviors?: Array<Behavior>
        keyGenerator: () => string
        maxBlocks?: number
        readOnly?: boolean
        schema: EditorSchema
        value?: Array<PortableTextBlock>
      }
      self: ActorRef<
        MachineSnapshot<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          Record<string, AnyActorRef | undefined>,
          StateValue,
          string,
          unknown,
          any,
          any
        >,
        | {
            type: 'annotation.add'
            annotation: {
              name: string
              value: {
                [prop: string]: unknown
              }
            }
          }
        | {
            type: 'annotation.remove'
            annotation: {
              name: string
            }
          }
        | {
            type: 'annotation.toggle'
            annotation: {
              name: string
              value: {
                [prop: string]: unknown
              }
            }
          }
        | {
            type: 'blur'
          }
        | {
            type: 'decorator.add'
            decorator: string
          }
        | {
            type: 'decorator.remove'
            decorator: string
          }
        | {
            type: 'decorator.toggle'
            decorator: string
          }
        | {
            type: 'focus'
          }
        | {
            type: 'insert.block object'
            placement: 'auto' | 'after' | 'before'
            blockObject: {
              name: string
              value?: {
                [prop: string]: unknown
              }
            }
          }
        | {
            type: 'insert.inline object'
            inlineObject: {
              name: string
              value?: {
                [prop: string]: unknown
              }
            }
          }
        | {
            type: 'list item.toggle'
            listItem: string
          }
        | {
            type: 'style.toggle'
            style: string
          }
        | PatchEvent
        | MutationEvent_2
        | {
            type: 'normalizing'
          }
        | {
            type: 'done normalizing'
          }
        | {
            type: 'behavior event'
            behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
            editor: PortableTextSlateEditor
            nativeEvent?: {
              preventDefault: () => void
            }
          }
        | {
            type: 'behavior action intends'
            editor: PortableTextSlateEditor
            actionIntends: Array<BehaviorActionIntend>
          }
        | {
            type: 'update schema'
            schema: EditorSchema
          }
        | {
            type: 'update behaviors'
            behaviors: Array<Behavior>
          }
        | {
            type: 'update value'
            value: Array<PortableTextBlock> | undefined
          }
        | {
            type: 'toggle readOnly'
          }
        | {
            type: 'update maxBlocks'
            maxBlocks: number | undefined
          }
        | {
            type: 'ready'
          }
        | PatchesEvent
        | {
            type: 'unset'
            previousValue: Array<PortableTextBlock>
          }
        | {
            type: 'value changed'
            value: Array<PortableTextBlock> | undefined
          }
        | {
            type: 'invalid value'
            resolution: InvalidValueResolution | null
            value: Array<PortableTextBlock> | undefined
          }
        | {
            type: 'error'
            name: string
            description: string
            data: unknown
          }
        | {
            type: 'selection'
            selection: EditorSelection
          }
        | {
            type: 'blurred'
            event: FocusEvent_2<HTMLDivElement, Element>
          }
        | {
            type: 'focused'
            event: FocusEvent_2<HTMLDivElement, Element>
          }
        | {
            type: 'loading'
          }
        | {
            type: 'done loading'
          },
        AnyEventObject
      >
    }) => {
      behaviors: Behavior[]
      keyGenerator: () => string
      pendingEvents: never[]
      schema: PortableTextMemberSchemaTypes
      selection: null
      readOnly: boolean
      maxBlocks: number | undefined
      value: PortableTextBlock[] | undefined
    }
    readonly on: {
      readonly 'annotation.add': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'annotation.add'
            annotation: {
              name: string
              value: {
                [prop: string]: unknown
              }
            }
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
        readonly guard: ({
          context,
        }: GuardArgs<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'annotation.add'
            annotation: {
              name: string
              value: {
                [prop: string]: unknown
              }
            }
          }
        >) => boolean
      }
      readonly 'annotation.remove': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'annotation.remove'
            annotation: {
              name: string
            }
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
        readonly guard: ({
          context,
        }: GuardArgs<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'annotation.remove'
            annotation: {
              name: string
            }
          }
        >) => boolean
      }
      readonly 'annotation.toggle': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'annotation.toggle'
            annotation: {
              name: string
              value: {
                [prop: string]: unknown
              }
            }
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
        readonly guard: ({
          context,
        }: GuardArgs<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'annotation.toggle'
            annotation: {
              name: string
              value: {
                [prop: string]: unknown
              }
            }
          }
        >) => boolean
      }
      readonly 'blur': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'blur'
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
        readonly guard: ({
          context,
        }: GuardArgs<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'blur'
          }
        >) => boolean
      }
      readonly 'decorator.*': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
        readonly guard: ({
          context,
        }: GuardArgs<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
        >) => boolean
      }
      readonly 'focus': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'focus'
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
        readonly guard: ({
          context,
        }: GuardArgs<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'focus'
          }
        >) => boolean
      }
      readonly 'insert.*': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
        readonly guard: ({
          context,
        }: GuardArgs<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
        >) => boolean
      }
      readonly 'list item.*': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'list item.toggle'
            listItem: string
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
        readonly guard: ({
          context,
        }: GuardArgs<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'list item.toggle'
            listItem: string
          }
        >) => boolean
      }
      readonly 'style.*': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'style.toggle'
            style: string
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
        readonly guard: ({
          context,
        }: GuardArgs<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'style.toggle'
            style: string
          }
        >) => boolean
      }
      readonly 'ready': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'ready'
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
      }
      readonly 'unset': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'unset'
            previousValue: Array<PortableTextBlock>
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
      }
      readonly 'value changed': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'value changed'
            value: Array<PortableTextBlock> | undefined
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
      }
      readonly 'invalid value': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'invalid value'
            resolution: InvalidValueResolution | null
            value: Array<PortableTextBlock> | undefined
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
      }
      readonly 'error': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'error'
            name: string
            description: string
            data: unknown
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
      }
      readonly 'selection': {
        readonly actions: readonly [
          ActionFunction<
            {
              behaviors: Array<Behavior>
              keyGenerator: () => string
              pendingEvents: Array<PatchEvent | MutationEvent_2>
              schema: EditorSchema
              readOnly: boolean
              maxBlocks: number | undefined
              selection: EditorSelection
              value: Array<PortableTextBlock> | undefined
            },
            {
              type: 'selection'
              selection: EditorSelection
            },
            | {
                type: 'annotation.add'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'annotation.remove'
                annotation: {
                  name: string
                }
              }
            | {
                type: 'annotation.toggle'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'blur'
              }
            | {
                type: 'decorator.add'
                decorator: string
              }
            | {
                type: 'decorator.remove'
                decorator: string
              }
            | {
                type: 'decorator.toggle'
                decorator: string
              }
            | {
                type: 'focus'
              }
            | {
                type: 'insert.block object'
                placement: 'auto' | 'after' | 'before'
                blockObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'insert.inline object'
                inlineObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'list item.toggle'
                listItem: string
              }
            | {
                type: 'style.toggle'
                style: string
              }
            | PatchEvent
            | MutationEvent_2
            | {
                type: 'normalizing'
              }
            | {
                type: 'done normalizing'
              }
            | {
                type: 'behavior event'
                behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
                editor: PortableTextSlateEditor
                nativeEvent?: {
                  preventDefault: () => void
                }
              }
            | {
                type: 'behavior action intends'
                editor: PortableTextSlateEditor
                actionIntends: Array<BehaviorActionIntend>
              }
            | {
                type: 'update schema'
                schema: EditorSchema
              }
            | {
                type: 'update behaviors'
                behaviors: Array<Behavior>
              }
            | {
                type: 'update value'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'toggle readOnly'
              }
            | {
                type: 'update maxBlocks'
                maxBlocks: number | undefined
              }
            | {
                type: 'ready'
              }
            | PatchesEvent
            | {
                type: 'unset'
                previousValue: Array<PortableTextBlock>
              }
            | {
                type: 'value changed'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'invalid value'
                resolution: InvalidValueResolution | null
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'error'
                name: string
                description: string
                data: unknown
              }
            | {
                type: 'selection'
                selection: EditorSelection
              }
            | {
                type: 'blurred'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'focused'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'loading'
              }
            | {
                type: 'done loading'
              },
            undefined,
            never,
            never,
            never,
            never,
            never
          >,
          ActionFunction<
            {
              behaviors: Array<Behavior>
              keyGenerator: () => string
              pendingEvents: Array<PatchEvent | MutationEvent_2>
              schema: EditorSchema
              readOnly: boolean
              maxBlocks: number | undefined
              selection: EditorSelection
              value: Array<PortableTextBlock> | undefined
            },
            {
              type: 'selection'
              selection: EditorSelection
            },
            | {
                type: 'annotation.add'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'annotation.remove'
                annotation: {
                  name: string
                }
              }
            | {
                type: 'annotation.toggle'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'blur'
              }
            | {
                type: 'decorator.add'
                decorator: string
              }
            | {
                type: 'decorator.remove'
                decorator: string
              }
            | {
                type: 'decorator.toggle'
                decorator: string
              }
            | {
                type: 'focus'
              }
            | {
                type: 'insert.block object'
                placement: 'auto' | 'after' | 'before'
                blockObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'insert.inline object'
                inlineObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'list item.toggle'
                listItem: string
              }
            | {
                type: 'style.toggle'
                style: string
              }
            | PatchEvent
            | MutationEvent_2
            | {
                type: 'normalizing'
              }
            | {
                type: 'done normalizing'
              }
            | {
                type: 'behavior event'
                behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
                editor: PortableTextSlateEditor
                nativeEvent?: {
                  preventDefault: () => void
                }
              }
            | {
                type: 'behavior action intends'
                editor: PortableTextSlateEditor
                actionIntends: Array<BehaviorActionIntend>
              }
            | {
                type: 'update schema'
                schema: EditorSchema
              }
            | {
                type: 'update behaviors'
                behaviors: Array<Behavior>
              }
            | {
                type: 'update value'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'toggle readOnly'
              }
            | {
                type: 'update maxBlocks'
                maxBlocks: number | undefined
              }
            | {
                type: 'ready'
              }
            | PatchesEvent
            | {
                type: 'unset'
                previousValue: Array<PortableTextBlock>
              }
            | {
                type: 'value changed'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'invalid value'
                resolution: InvalidValueResolution | null
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'error'
                name: string
                description: string
                data: unknown
              }
            | {
                type: 'selection'
                selection: EditorSelection
              }
            | {
                type: 'blurred'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'focused'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'loading'
              }
            | {
                type: 'done loading'
              },
            undefined,
            never,
            never,
            never,
            never,
            | {
                type: 'annotation.add'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'annotation.remove'
                annotation: {
                  name: string
                }
              }
            | {
                type: 'annotation.toggle'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'blur'
              }
            | {
                type: 'decorator.add'
                decorator: string
              }
            | {
                type: 'decorator.remove'
                decorator: string
              }
            | {
                type: 'decorator.toggle'
                decorator: string
              }
            | {
                type: 'focus'
              }
            | {
                type: 'insert.block object'
                placement: 'auto' | 'after' | 'before'
                blockObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'insert.inline object'
                inlineObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'list item.toggle'
                listItem: string
              }
            | {
                type: 'style.toggle'
                style: string
              }
            | PatchEvent
            | MutationEvent_2
            | {
                type: 'ready'
              }
            | PatchesEvent
            | {
                type: 'unset'
                previousValue: Array<PortableTextBlock>
              }
            | {
                type: 'value changed'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'invalid value'
                resolution: InvalidValueResolution | null
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'error'
                name: string
                description: string
                data: unknown
              }
            | {
                type: 'selection'
                selection: EditorSelection
              }
            | {
                type: 'blurred'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'focused'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'loading'
              }
            | {
                type: 'done loading'
              }
            | {
                type: 'readOnly toggled'
                readOnly: boolean
              }
          >,
        ]
      }
      readonly 'blurred': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'blurred'
            event: FocusEvent_2<HTMLDivElement, Element>
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
      }
      readonly 'focused': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'focused'
            event: FocusEvent_2<HTMLDivElement, Element>
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
      }
      readonly 'loading': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'loading'
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
      }
      readonly 'patches': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          PatchesEvent,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
      }
      readonly 'done loading': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'done loading'
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'readOnly toggled'
              readOnly: boolean
            }
        >
      }
      readonly 'update behaviors': {
        readonly actions: 'assign behaviors'
      }
      readonly 'update schema': {
        readonly actions: 'assign schema'
      }
      readonly 'update value': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'update value'
            value: Array<PortableTextBlock> | undefined
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          never
        >
      }
      readonly 'toggle readOnly': {
        readonly actions: readonly [
          ActionFunction<
            {
              behaviors: Array<Behavior>
              keyGenerator: () => string
              pendingEvents: Array<PatchEvent | MutationEvent_2>
              schema: EditorSchema
              readOnly: boolean
              maxBlocks: number | undefined
              selection: EditorSelection
              value: Array<PortableTextBlock> | undefined
            },
            {
              type: 'toggle readOnly'
            },
            | {
                type: 'annotation.add'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'annotation.remove'
                annotation: {
                  name: string
                }
              }
            | {
                type: 'annotation.toggle'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'blur'
              }
            | {
                type: 'decorator.add'
                decorator: string
              }
            | {
                type: 'decorator.remove'
                decorator: string
              }
            | {
                type: 'decorator.toggle'
                decorator: string
              }
            | {
                type: 'focus'
              }
            | {
                type: 'insert.block object'
                placement: 'auto' | 'after' | 'before'
                blockObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'insert.inline object'
                inlineObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'list item.toggle'
                listItem: string
              }
            | {
                type: 'style.toggle'
                style: string
              }
            | PatchEvent
            | MutationEvent_2
            | {
                type: 'normalizing'
              }
            | {
                type: 'done normalizing'
              }
            | {
                type: 'behavior event'
                behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
                editor: PortableTextSlateEditor
                nativeEvent?: {
                  preventDefault: () => void
                }
              }
            | {
                type: 'behavior action intends'
                editor: PortableTextSlateEditor
                actionIntends: Array<BehaviorActionIntend>
              }
            | {
                type: 'update schema'
                schema: EditorSchema
              }
            | {
                type: 'update behaviors'
                behaviors: Array<Behavior>
              }
            | {
                type: 'update value'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'toggle readOnly'
              }
            | {
                type: 'update maxBlocks'
                maxBlocks: number | undefined
              }
            | {
                type: 'ready'
              }
            | PatchesEvent
            | {
                type: 'unset'
                previousValue: Array<PortableTextBlock>
              }
            | {
                type: 'value changed'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'invalid value'
                resolution: InvalidValueResolution | null
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'error'
                name: string
                description: string
                data: unknown
              }
            | {
                type: 'selection'
                selection: EditorSelection
              }
            | {
                type: 'blurred'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'focused'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'loading'
              }
            | {
                type: 'done loading'
              },
            undefined,
            never,
            never,
            never,
            never,
            never
          >,
          ActionFunction<
            {
              behaviors: Array<Behavior>
              keyGenerator: () => string
              pendingEvents: Array<PatchEvent | MutationEvent_2>
              schema: EditorSchema
              readOnly: boolean
              maxBlocks: number | undefined
              selection: EditorSelection
              value: Array<PortableTextBlock> | undefined
            },
            {
              type: 'toggle readOnly'
            },
            | {
                type: 'annotation.add'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'annotation.remove'
                annotation: {
                  name: string
                }
              }
            | {
                type: 'annotation.toggle'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'blur'
              }
            | {
                type: 'decorator.add'
                decorator: string
              }
            | {
                type: 'decorator.remove'
                decorator: string
              }
            | {
                type: 'decorator.toggle'
                decorator: string
              }
            | {
                type: 'focus'
              }
            | {
                type: 'insert.block object'
                placement: 'auto' | 'after' | 'before'
                blockObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'insert.inline object'
                inlineObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'list item.toggle'
                listItem: string
              }
            | {
                type: 'style.toggle'
                style: string
              }
            | PatchEvent
            | MutationEvent_2
            | {
                type: 'normalizing'
              }
            | {
                type: 'done normalizing'
              }
            | {
                type: 'behavior event'
                behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
                editor: PortableTextSlateEditor
                nativeEvent?: {
                  preventDefault: () => void
                }
              }
            | {
                type: 'behavior action intends'
                editor: PortableTextSlateEditor
                actionIntends: Array<BehaviorActionIntend>
              }
            | {
                type: 'update schema'
                schema: EditorSchema
              }
            | {
                type: 'update behaviors'
                behaviors: Array<Behavior>
              }
            | {
                type: 'update value'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'toggle readOnly'
              }
            | {
                type: 'update maxBlocks'
                maxBlocks: number | undefined
              }
            | {
                type: 'ready'
              }
            | PatchesEvent
            | {
                type: 'unset'
                previousValue: Array<PortableTextBlock>
              }
            | {
                type: 'value changed'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'invalid value'
                resolution: InvalidValueResolution | null
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'error'
                name: string
                description: string
                data: unknown
              }
            | {
                type: 'selection'
                selection: EditorSelection
              }
            | {
                type: 'blurred'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'focused'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'loading'
              }
            | {
                type: 'done loading'
              },
            undefined,
            never,
            never,
            never,
            never,
            | {
                type: 'annotation.add'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'annotation.remove'
                annotation: {
                  name: string
                }
              }
            | {
                type: 'annotation.toggle'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'blur'
              }
            | {
                type: 'decorator.add'
                decorator: string
              }
            | {
                type: 'decorator.remove'
                decorator: string
              }
            | {
                type: 'decorator.toggle'
                decorator: string
              }
            | {
                type: 'focus'
              }
            | {
                type: 'insert.block object'
                placement: 'auto' | 'after' | 'before'
                blockObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'insert.inline object'
                inlineObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'list item.toggle'
                listItem: string
              }
            | {
                type: 'style.toggle'
                style: string
              }
            | PatchEvent
            | MutationEvent_2
            | {
                type: 'ready'
              }
            | PatchesEvent
            | {
                type: 'unset'
                previousValue: Array<PortableTextBlock>
              }
            | {
                type: 'value changed'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'invalid value'
                resolution: InvalidValueResolution | null
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'error'
                name: string
                description: string
                data: unknown
              }
            | {
                type: 'selection'
                selection: EditorSelection
              }
            | {
                type: 'blurred'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'focused'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'loading'
              }
            | {
                type: 'done loading'
              }
            | {
                type: 'readOnly toggled'
                readOnly: boolean
              }
          >,
        ]
      }
      readonly 'update maxBlocks': {
        readonly actions: ActionFunction<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'update maxBlocks'
            maxBlocks: number | undefined
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'blur'
            }
          | {
              type: 'decorator.add'
              decorator: string
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'focus'
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | PatchEvent
          | MutationEvent_2
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'toggle readOnly'
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | {
              type: 'ready'
            }
          | PatchesEvent
          | {
              type: 'unset'
              previousValue: Array<PortableTextBlock>
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'loading'
            }
          | {
              type: 'done loading'
            },
          undefined,
          never,
          never,
          never,
          never,
          never
        >
      }
      readonly 'behavior event': {
        readonly actions: 'handle behavior event'
        readonly guard: ({
          context,
        }: GuardArgs<
          {
            behaviors: Array<Behavior>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent_2>
            schema: EditorSchema
            readOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'behavior event'
            behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
            editor: PortableTextSlateEditor
            nativeEvent?: {
              preventDefault: () => void
            }
          }
        >) => boolean
      }
      readonly 'behavior action intends': {
        readonly actions: readonly [
          ({
            context,
            event,
          }: ActionArgs<
            {
              behaviors: Array<Behavior>
              keyGenerator: () => string
              pendingEvents: Array<PatchEvent | MutationEvent_2>
              schema: EditorSchema
              readOnly: boolean
              maxBlocks: number | undefined
              selection: EditorSelection
              value: Array<PortableTextBlock> | undefined
            },
            {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            },
            | {
                type: 'annotation.add'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'annotation.remove'
                annotation: {
                  name: string
                }
              }
            | {
                type: 'annotation.toggle'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'blur'
              }
            | {
                type: 'decorator.add'
                decorator: string
              }
            | {
                type: 'decorator.remove'
                decorator: string
              }
            | {
                type: 'decorator.toggle'
                decorator: string
              }
            | {
                type: 'focus'
              }
            | {
                type: 'insert.block object'
                placement: 'auto' | 'after' | 'before'
                blockObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'insert.inline object'
                inlineObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'list item.toggle'
                listItem: string
              }
            | {
                type: 'style.toggle'
                style: string
              }
            | PatchEvent
            | MutationEvent_2
            | {
                type: 'normalizing'
              }
            | {
                type: 'done normalizing'
              }
            | {
                type: 'behavior event'
                behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
                editor: PortableTextSlateEditor
                nativeEvent?: {
                  preventDefault: () => void
                }
              }
            | {
                type: 'behavior action intends'
                editor: PortableTextSlateEditor
                actionIntends: Array<BehaviorActionIntend>
              }
            | {
                type: 'update schema'
                schema: EditorSchema
              }
            | {
                type: 'update behaviors'
                behaviors: Array<Behavior>
              }
            | {
                type: 'update value'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'toggle readOnly'
              }
            | {
                type: 'update maxBlocks'
                maxBlocks: number | undefined
              }
            | {
                type: 'ready'
              }
            | PatchesEvent
            | {
                type: 'unset'
                previousValue: Array<PortableTextBlock>
              }
            | {
                type: 'value changed'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'invalid value'
                resolution: InvalidValueResolution | null
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'error'
                name: string
                description: string
                data: unknown
              }
            | {
                type: 'selection'
                selection: EditorSelection
              }
            | {
                type: 'blurred'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'focused'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'loading'
              }
            | {
                type: 'done loading'
              }
          >) => void,
          ActionFunction<
            {
              behaviors: Array<Behavior>
              keyGenerator: () => string
              pendingEvents: Array<PatchEvent | MutationEvent_2>
              schema: EditorSchema
              readOnly: boolean
              maxBlocks: number | undefined
              selection: EditorSelection
              value: Array<PortableTextBlock> | undefined
            },
            {
              type: 'behavior action intends'
              editor: PortableTextSlateEditor
              actionIntends: Array<BehaviorActionIntend>
            },
            | {
                type: 'annotation.add'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'annotation.remove'
                annotation: {
                  name: string
                }
              }
            | {
                type: 'annotation.toggle'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'blur'
              }
            | {
                type: 'decorator.add'
                decorator: string
              }
            | {
                type: 'decorator.remove'
                decorator: string
              }
            | {
                type: 'decorator.toggle'
                decorator: string
              }
            | {
                type: 'focus'
              }
            | {
                type: 'insert.block object'
                placement: 'auto' | 'after' | 'before'
                blockObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'insert.inline object'
                inlineObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'list item.toggle'
                listItem: string
              }
            | {
                type: 'style.toggle'
                style: string
              }
            | PatchEvent
            | MutationEvent_2
            | {
                type: 'normalizing'
              }
            | {
                type: 'done normalizing'
              }
            | {
                type: 'behavior event'
                behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
                editor: PortableTextSlateEditor
                nativeEvent?: {
                  preventDefault: () => void
                }
              }
            | {
                type: 'behavior action intends'
                editor: PortableTextSlateEditor
                actionIntends: Array<BehaviorActionIntend>
              }
            | {
                type: 'update schema'
                schema: EditorSchema
              }
            | {
                type: 'update behaviors'
                behaviors: Array<Behavior>
              }
            | {
                type: 'update value'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'toggle readOnly'
              }
            | {
                type: 'update maxBlocks'
                maxBlocks: number | undefined
              }
            | {
                type: 'ready'
              }
            | PatchesEvent
            | {
                type: 'unset'
                previousValue: Array<PortableTextBlock>
              }
            | {
                type: 'value changed'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'invalid value'
                resolution: InvalidValueResolution | null
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'error'
                name: string
                description: string
                data: unknown
              }
            | {
                type: 'selection'
                selection: EditorSelection
              }
            | {
                type: 'blurred'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'focused'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'loading'
              }
            | {
                type: 'done loading'
              },
            undefined,
            never,
            Values<{
              'assign behaviors': {
                type: 'assign behaviors'
                params: NonReducibleUnknown
              }
              'assign schema': {
                type: 'assign schema'
                params: NonReducibleUnknown
              }
              'emit patch event': {
                type: 'emit patch event'
                params: NonReducibleUnknown
              }
              'emit mutation event': {
                type: 'emit mutation event'
                params: NonReducibleUnknown
              }
              'defer event': {
                type: 'defer event'
                params: NonReducibleUnknown
              }
              'emit pending events': {
                type: 'emit pending events'
                params: NonReducibleUnknown
              }
              'clear pending events': {
                type: 'clear pending events'
                params: NonReducibleUnknown
              }
              'handle behavior event': {
                type: 'handle behavior event'
                params: NonReducibleUnknown
              }
            }>,
            never,
            never,
            | {
                type: 'annotation.add'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'annotation.remove'
                annotation: {
                  name: string
                }
              }
            | {
                type: 'annotation.toggle'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'blur'
              }
            | {
                type: 'decorator.add'
                decorator: string
              }
            | {
                type: 'decorator.remove'
                decorator: string
              }
            | {
                type: 'decorator.toggle'
                decorator: string
              }
            | {
                type: 'focus'
              }
            | {
                type: 'insert.block object'
                placement: 'auto' | 'after' | 'before'
                blockObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'insert.inline object'
                inlineObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'list item.toggle'
                listItem: string
              }
            | {
                type: 'style.toggle'
                style: string
              }
            | PatchEvent
            | MutationEvent_2
            | {
                type: 'ready'
              }
            | PatchesEvent
            | {
                type: 'unset'
                previousValue: Array<PortableTextBlock>
              }
            | {
                type: 'value changed'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'invalid value'
                resolution: InvalidValueResolution | null
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'error'
                name: string
                description: string
                data: unknown
              }
            | {
                type: 'selection'
                selection: EditorSelection
              }
            | {
                type: 'blurred'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'focused'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'loading'
              }
            | {
                type: 'done loading'
              }
            | {
                type: 'readOnly toggled'
                readOnly: boolean
              }
          >,
        ]
      }
    }
    readonly initial: 'pristine'
    readonly states: {
      readonly pristine: {
        readonly initial: 'idle'
        readonly states: {
          readonly idle: {
            readonly on: {
              readonly normalizing: {
                readonly target: 'normalizing'
              }
              readonly patch: {
                readonly actions: 'defer event'
                readonly target: '#editor.dirty'
              }
              readonly mutation: {
                readonly actions: 'defer event'
                readonly target: '#editor.dirty'
              }
            }
          }
          readonly normalizing: {
            readonly on: {
              readonly 'done normalizing': {
                readonly target: 'idle'
              }
              readonly 'patch': {
                readonly actions: 'defer event'
              }
              readonly 'mutation': {
                readonly actions: 'defer event'
              }
            }
          }
        }
      }
      readonly dirty: {
        readonly entry: readonly ['emit pending events', 'clear pending events']
        readonly on: {
          readonly patch: {
            readonly actions: 'emit patch event'
          }
          readonly mutation: {
            readonly actions: 'emit mutation event'
          }
        }
      }
    }
  }
>

/** @internal */
export declare type EditorNode = Node_2 & {
  _key: string
  _type: string
}

/**
 * @alpha
 */
export declare function EditorProvider(
  props: EditorProviderProps,
): React_2.JSX.Element

/**
 * @alpha
 */
export declare type EditorProviderProps = {
  initialConfig: EditorConfig
  children?: React_2.ReactNode
}

/**
 * @alpha
 */
export declare type EditorSchema = PortableTextMemberSchemaTypes

/** @beta */
export declare type EditorSelection = {
  anchor: EditorSelectionPoint
  focus: EditorSelectionPoint
  backward?: boolean
} | null

/** @beta */
export declare type EditorSelectionPoint = {
  path: Path
  offset: number
}

/**
 * @alpha
 */
export declare type EditorSelector<TSelected> = (
  snapshot: EditorSnapshot,
) => TSelected

/**
 * @alpha
 */
export declare type EditorSnapshot = {
  context: EditorContext
}

/**
 * The editor produced an error
 * @beta */
export declare type ErrorChange = {
  type: 'error'
  name: string
  level: 'warning' | 'error'
  description: string
  data?: unknown
}

/**
 * The editor received focus
 * @beta */
export declare type FocusChange = {
  type: 'focus'
  event: FocusEvent_2<HTMLDivElement, Element>
}

/** @internal */
declare interface History_2 {
  redos: HistoryItem[]
  undos: HistoryItem[]
}
export {History_2 as History}

/** @internal */
export declare type HistoryItem = {
  operations: Operation[]
  timestamp: Date
}

/**
 * @beta
 */
export declare type HotkeyOptions = {
  marks?: Record<string, string>
  custom?: Record<
    string,
    (event: BaseSyntheticEvent, editor: PortableTextEditor) => void
  >
}

/**
 * @internal
 */
export declare type InternalEditorEmittedEvent =
  | {
      type: 'ready'
    }
  | PatchEvent
  | PatchesEvent
  | MutationEvent_2
  | {
      type: 'unset'
      previousValue: Array<PortableTextBlock>
    }
  | {
      type: 'value changed'
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'invalid value'
      resolution: InvalidValueResolution | null
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'error'
      name: string
      description: string
      data: unknown
    }
  | {
      type: 'selection'
      selection: EditorSelection
    }
  | {
      type: 'blurred'
      event: FocusEvent_2<HTMLDivElement, Element>
    }
  | {
      type: 'focused'
      event: FocusEvent_2<HTMLDivElement, Element>
    }
  | {
      type: 'loading'
    }
  | {
      type: 'done loading'
    }
  | {
      type: 'readOnly toggled'
      readOnly: boolean
    }
  | PickFromUnion<
      SyntheticBehaviorEvent,
      'type',
      | 'annotation.add'
      | 'annotation.remove'
      | 'annotation.toggle'
      | 'blur'
      | 'decorator.add'
      | 'decorator.remove'
      | 'decorator.toggle'
      | 'insert.block object'
      | 'insert.inline object'
      | 'list item.toggle'
      | 'focus'
      | 'style.toggle'
    >

/**
 * @internal
 */
export declare type InternalEditorEvent =
  | {
      type: 'normalizing'
    }
  | {
      type: 'done normalizing'
    }
  | {
      type: 'behavior event'
      behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
      editor: PortableTextSlateEditor
      nativeEvent?: {
        preventDefault: () => void
      }
    }
  | {
      type: 'behavior action intends'
      editor: PortableTextSlateEditor
      actionIntends: Array<BehaviorActionIntend>
    }
  | {
      type: 'update schema'
      schema: EditorSchema
    }
  | {
      type: 'update behaviors'
      behaviors: Array<Behavior>
    }
  | {
      type: 'update value'
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'toggle readOnly'
    }
  | {
      type: 'update maxBlocks'
      maxBlocks: number | undefined
    }
  | OmitFromUnion<InternalEditorEmittedEvent, 'type', 'readOnly toggled'>

/**
 * The editor has an invalid value
 * @beta */
export declare type InvalidValue = {
  type: 'invalidValue'
  resolution: InvalidValueResolution | null
  value: PortableTextBlock[] | undefined
}

/**
 * The editor has invalid data in the value that can be resolved by the user
 * @beta */
export declare type InvalidValueResolution = {
  autoResolve?: boolean
  patches: Patch[]
  description: string
  action: string
  item: PortableTextBlock[] | PortableTextBlock | PortableTextChild | undefined
  /**
   * i18n keys for the description and action
   *
   * These are in addition to the description and action properties, to decouple the editor from
   * the i18n system, and allow usage without it. The i18n keys take precedence over the
   * description and action properties, if i18n framework is available.
   */
  i18n: {
    description: `inputs.portable-text.invalid-value.${Lowercase<string>}.description`
    action: `inputs.portable-text.invalid-value.${Lowercase<string>}.action`
    values?: Record<string, string | number | string[]>
  }
}

/**
 * @public
 */
export declare const keyGenerator: () => string

/**
 * The editor is currently loading something
 * Could be used to show a spinner etc.
 * @beta */
export declare type LoadingChange = {
  type: 'loading'
  isLoading: boolean
}

/**
 * The editor has mutated it's content.
 * @beta */
export declare type MutationChange = {
  type: 'mutation'
  patches: Patch[]
  snapshot: PortableTextBlock[] | undefined
}

/**
 * @internal
 */
declare type MutationEvent_2 = {
  type: 'mutation'
  patches: Array<Patch>
  snapshot: Array<PortableTextBlock> | undefined
}
export {MutationEvent_2 as MutationEvent}

/**
 * @alpha
 */
export declare type NativeBehaviorEvent =
  | {
      type: 'copy'
      data: DataTransfer
    }
  | {
      type: 'key.down'
      keyboardEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }
  | {
      type: 'key.up'
      keyboardEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }
  | {
      type: 'paste'
      data: DataTransfer
    }

/**
 * @alpha
 */
export declare type OmitFromUnion<
  TUnion,
  TTagKey extends keyof TUnion,
  TOmittedTags extends TUnion[TTagKey],
> = TUnion extends Record<TTagKey, TOmittedTags> ? never : TUnion

/** @beta */
export declare type OnBeforeInputFn = (event: InputEvent) => void

/** @beta */
export declare type OnCopyFn = (
  event: ClipboardEvent_2<HTMLDivElement | HTMLSpanElement>,
) => undefined | unknown

/**
 * @beta
 * It is encouraged not to return `Promise<undefined>` from the `OnPasteFn` as
 * a mechanism to fall back to the native paste behaviour. This doesn't work in
 * all cases. Always return plain `undefined` if possible.
 **/
export declare type OnPasteFn = (data: PasteData) => OnPasteResultOrPromise

/** @beta */
export declare type OnPasteResult =
  | {
      insert?: TypedObject[]
      path?: Path
    }
  | undefined

/**
 * @beta
 */
export declare type OnPasteResultOrPromise =
  | OnPasteResult
  | Promise<OnPasteResult>

/** @beta */
export declare interface PasteData {
  event: ClipboardEvent_2
  path: Path
  schemaTypes: PortableTextMemberSchemaTypes
  value: PortableTextBlock[] | undefined
}

export {Patch}

/**
 * The editor has produced a patch
 * @beta */
export declare type PatchChange = {
  type: 'patch'
  patch: Patch
}

/**
 * @internal
 */
export declare type PatchesEvent = {
  type: 'patches'
  patches: Array<Patch>
  snapshot: Array<PortableTextBlock> | undefined
}

/**
 * @internal
 */
export declare type PatchEvent = {
  type: 'patch'
  patch: Patch
}

/** @beta */
export declare type PatchObservable = Observable<{
  patches: Patch[]
  snapshot: PortableTextBlock[] | undefined
}>

/**
 * @alpha
 */
export declare type PickFromUnion<
  TUnion,
  TTagKey extends keyof TUnion,
  TPickedTags extends TUnion[TTagKey],
> = TUnion extends Record<TTagKey, TPickedTags> ? TUnion : never

export {PortableTextBlock}

export {PortableTextChild}

/**
 * @public
 */
export declare const PortableTextEditable: ForwardRefExoticComponent<
  Omit<PortableTextEditableProps, 'ref'> &
    RefAttributes<Omit<HTMLDivElement, 'onPaste' | 'onBeforeInput' | 'as'>>
>

/**
 * @public
 */
export declare type PortableTextEditableProps = Omit<
  TextareaHTMLAttributes<HTMLDivElement>,
  'onPaste' | 'onCopy' | 'onBeforeInput'
> & {
  hotkeys?: HotkeyOptions
  onBeforeInput?: (event: InputEvent) => void
  onPaste?: OnPasteFn
  onCopy?: OnCopyFn
  ref: MutableRefObject<HTMLDivElement | null>
  rangeDecorations?: RangeDecoration[]
  renderAnnotation?: RenderAnnotationFunction
  renderBlock?: RenderBlockFunction
  renderChild?: RenderChildFunction
  renderDecorator?: RenderDecoratorFunction
  renderListItem?: RenderListItemFunction
  renderPlaceholder?: RenderPlaceholderFunction
  renderStyle?: RenderStyleFunction
  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction
  selection?: EditorSelection
  spellCheck?: boolean
}

/**
 * The main Portable Text Editor component.
 * @public
 */
export declare class PortableTextEditor extends Component<
  PortableTextEditorProps<Editor | undefined>
> {
  static displayName: string
  /**
   * An observable of all the editor changes.
   */
  change$: EditorChanges
  /**
   * A lookup table for all the relevant schema types for this portable text type.
   */
  schemaTypes: PortableTextMemberSchemaTypes
  /**
   * The editor instance
   */
  private editor
  private editable
  constructor(props: PortableTextEditorProps)
  componentDidUpdate(prevProps: PortableTextEditorProps): void
  setEditable: (editable: EditableAPI) => void
  render(): JSX.Element
  static activeAnnotations: (editor: PortableTextEditor) => PortableTextObject[]
  static isAnnotationActive: (
    editor: PortableTextEditor,
    annotationType: PortableTextObject['_type'],
  ) => boolean
  static addAnnotation: <
    TSchemaType extends {
      name: string
    },
  >(
    editor: PortableTextEditor,
    type: TSchemaType,
    value?: {
      [prop: string]: unknown
    },
  ) => AddedAnnotationPaths | undefined
  static blur: (editor: PortableTextEditor) => void
  static delete: (
    editor: PortableTextEditor,
    selection: EditorSelection,
    options?: EditableAPIDeleteOptions,
  ) => void
  static findDOMNode: (
    editor: PortableTextEditor,
    element: PortableTextBlock | PortableTextChild,
  ) => Node | undefined
  static findByPath: (
    editor: PortableTextEditor,
    path: Path,
  ) => [
    (
      | PortableTextSpan
      | PortableTextObject
      | PortableTextTextBlock<PortableTextSpan | PortableTextObject>
      | undefined
    ),
    Path | undefined,
  ]
  static focus: (editor: PortableTextEditor) => void
  static focusBlock: (
    editor: PortableTextEditor,
  ) => PortableTextBlock | undefined
  static focusChild: (
    editor: PortableTextEditor,
  ) => PortableTextChild | undefined
  static getSelection: (editor: PortableTextEditor) => EditorSelection
  static getValue: (
    editor: PortableTextEditor,
  ) => PortableTextBlock[] | undefined
  static hasBlockStyle: (
    editor: PortableTextEditor,
    blockStyle: string,
  ) => boolean
  static hasListStyle: (
    editor: PortableTextEditor,
    listStyle: string,
  ) => boolean
  static isCollapsedSelection: (editor: PortableTextEditor) => boolean
  static isExpandedSelection: (editor: PortableTextEditor) => boolean
  static isMarkActive: (editor: PortableTextEditor, mark: string) => boolean
  static insertChild: <
    TSchemaType extends {
      name: string
    },
  >(
    editor: PortableTextEditor,
    type: TSchemaType,
    value?: {
      [prop: string]: unknown
    },
  ) => Path | undefined
  static insertBlock: <
    TSchemaType extends {
      name: string
    },
  >(
    editor: PortableTextEditor,
    type: TSchemaType,
    value?: {
      [prop: string]: unknown
    },
  ) => Path | undefined
  static insertBreak: (editor: PortableTextEditor) => void
  static isVoid: (
    editor: PortableTextEditor,
    element: PortableTextBlock | PortableTextChild,
  ) => boolean
  static isObjectPath: (_editor: PortableTextEditor, path: Path) => boolean
  static marks: (editor: PortableTextEditor) => string[]
  static select: (
    editor: PortableTextEditor,
    selection: EditorSelection | null,
  ) => void
  static removeAnnotation: <
    TSchemaType extends {
      name: string
    },
  >(
    editor: PortableTextEditor,
    type: TSchemaType,
  ) => void
  static toggleBlockStyle: (
    editor: PortableTextEditor,
    blockStyle: string,
  ) => void
  static toggleList: (editor: PortableTextEditor, listStyle: string) => void
  static toggleMark: (editor: PortableTextEditor, mark: string) => void
  static getFragment: (
    editor: PortableTextEditor,
  ) => PortableTextBlock[] | undefined
  static undo: (editor: PortableTextEditor) => void
  static redo: (editor: PortableTextEditor) => void
  static isSelectionsOverlapping: (
    editor: PortableTextEditor,
    selectionA: EditorSelection,
    selectionB: EditorSelection,
  ) => boolean
}

/**
 * Props for the PortableTextEditor component
 *
 * @public
 */
export declare type PortableTextEditorProps<
  TEditor extends Editor | undefined = undefined,
> = PropsWithChildren<
  TEditor extends Editor
    ? {
        /**
         * @alpha
         */
        editor: TEditor
      }
    : {
        editor?: undefined
        /**
         * Function that gets called when the editor changes the value
         */
        onChange: (change: EditorChange) => void
        /**
         * Schema type for the portable text field
         */
        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition
        /**
         * Maximum number of blocks to allow within the editor
         */
        maxBlocks?: number | string
        /**
         * Function used to generate keys for array items (`_key`)
         */
        keyGenerator?: () => string
        /**
         * Observable of local and remote patches for the edited value.
         */
        patches$?: PatchObservable
        /**
         * Backward compatibility (renamed to patches$).
         */
        incomingPatches$?: PatchObservable
        /**
         * Whether or not the editor should be in read-only mode
         */
        readOnly?: boolean
        /**
         * The current value of the portable text field
         */
        value?: PortableTextBlock[]
        /**
         * A ref to the editor instance
         */
        editorRef?: MutableRefObject<PortableTextEditor | null>
      }
>

/** @internal */
export declare type PortableTextMemberSchemaTypes = {
  annotations: (ObjectSchemaType & {
    i18nTitleKey?: string
  })[]
  block: ObjectSchemaType
  blockObjects: ObjectSchemaType[]
  decorators: BlockDecoratorDefinition[]
  inlineObjects: ObjectSchemaType[]
  portableText: ArraySchemaType<PortableTextBlock>
  span: ObjectSchemaType
  styles: BlockStyleDefinition[]
  lists: BlockListDefinition[]
}

/** @internal */
export declare interface PortableTextSlateEditor extends ReactEditor {
  _key: 'editor'
  _type: 'editor'
  createPlaceholderBlock: () => Descendant
  editable: EditableAPI
  history: History_2
  insertPortableTextData: (data: DataTransfer) => boolean
  insertTextOrHTMLData: (data: DataTransfer) => boolean
  isTextBlock: (value: unknown) => value is PortableTextTextBlock
  isTextSpan: (value: unknown) => value is PortableTextSpan
  isListBlock: (value: unknown) => value is PortableTextListBlock
  /**
   * Try to expand the current selection to a word
   */
  pteExpandToWord: () => void
  /**
   * Use hotkeys
   */
  pteWithHotKeys: (event: KeyboardEvent_2<HTMLDivElement>) => void
  /**
   * Helper function that creates a text block
   */
  pteCreateTextBlock: (options: {
    decorators: Array<string>
    listItem?: string
    level?: number
  }) => Descendant
  /**
   * Undo
   */
  undo: () => void
  /**
   * Redo
   */
  redo: () => void
}

/**
 * A range decoration is a UI affordance that wraps a given selection range in the editor
 * with a custom component. This can be used to highlight search results,
 * mark validation errors on specific words, draw user presence and similar.
 * @alpha */
export declare interface RangeDecoration {
  /**
   * A component for rendering the range decoration.
   * The component will receive the children (text) of the range decoration as its children.
   *
   * @example
   * ```ts
   * (rangeComponentProps: PropsWithChildren) => (
   *    <SearchResultHighlight>
   *      {rangeComponentProps.children}
   *    </SearchResultHighlight>
   *  )
   * ```
   */
  component: (props: PropsWithChildren) => ReactElement<any>
  /**
   * The editor content selection range
   */
  selection: EditorSelection
  /**
   * A optional callback that will be called when the range decoration potentially moves according to user edits.
   */
  onMoved?: (details: RangeDecorationOnMovedDetails) => void
  /**
   * A custom payload that can be set on the range decoration
   */
  payload?: Record<string, unknown>
}

/**
 * Parameters for the callback that will be called for a RangeDecoration's onMoved.
 * @alpha */
export declare interface RangeDecorationOnMovedDetails {
  rangeDecoration: RangeDecoration
  newSelection: EditorSelection
  origin: 'remote' | 'local'
}

/**
 * The editor content is ready to be edited by the user
 * @beta */
export declare type ReadyChange = {
  type: 'ready'
}

/**
 * The editor performed redo history step
 * @beta */
export declare type RedoChange = {
  type: 'redo'
  patches: Patch[]
  timestamp: Date
}

/** @beta */
export declare type RenderAnnotationFunction = (
  props: BlockAnnotationRenderProps,
) => JSX.Element

/** @beta */
export declare type RenderBlockFunction = (
  props: BlockRenderProps,
) => JSX.Element

/** @beta */
export declare type RenderChildFunction = (
  props: BlockChildRenderProps,
) => JSX.Element

/** @beta */
export declare type RenderDecoratorFunction = (
  props: BlockDecoratorRenderProps,
) => JSX.Element

/** @beta */
export declare type RenderEditableFunction = (
  props: PortableTextEditableProps,
) => JSX.Element

/** @beta */
export declare type RenderListItemFunction = (
  props: BlockListItemRenderProps,
) => JSX.Element

/** @beta */
export declare type RenderPlaceholderFunction = () => React.ReactNode

/** @beta */
export declare type RenderStyleFunction = (
  props: BlockStyleRenderProps,
) => JSX.Element

/**
 * @alpha
 */
export declare type SchemaDefinition<
  TBaseDefinition extends BaseDefinition = BaseDefinition,
> = {
  decorators?: ReadonlyArray<TBaseDefinition>
  blockObjects?: ReadonlyArray<TBaseDefinition>
  inlineObjects?: ReadonlyArray<TBaseDefinition>
  annotations?: ReadonlyArray<TBaseDefinition>
  lists?: ReadonlyArray<TBaseDefinition>
  styles?: ReadonlyArray<TBaseDefinition>
}

/** @beta */
export declare type ScrollSelectionIntoViewFunction = (
  editor: PortableTextEditor,
  domRange: globalThis.Range,
) => void

/**
 * The editor has a new selection
 * @beta */
export declare type SelectionChange = {
  type: 'selection'
  selection: EditorSelection
}

/**
 * @internal
 */
export declare type SlateEditor = {
  instance: PortableTextSlateEditor
  initialValue: Array<Descendant>
}

/**
 * @alpha
 */
export declare type SyntheticBehaviorEvent =
  | {
      type: 'annotation.add'
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'annotation.remove'
      annotation: {
        name: string
      }
    }
  | {
      type: 'annotation.toggle'
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'blur'
    }
  | {
      type: 'decorator.add'
      decorator: string
    }
  | {
      type: 'decorator.remove'
      decorator: string
    }
  | {
      type: 'decorator.toggle'
      decorator: string
    }
  | {
      type: 'delete.backward'
      unit: TextUnit
    }
  | {
      type: 'delete.forward'
      unit: TextUnit
    }
  | {
      type: 'focus'
    }
  | {
      type: 'insert.block object'
      placement: 'auto' | 'after' | 'before'
      blockObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'insert.inline object'
      inlineObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'insert.break'
    }
  | {
      type: 'insert.soft break'
    }
  | {
      type: 'insert.text'
      text: string
      options?: TextInsertTextOptions
    }
  | {
      type: 'list item.toggle'
      listItem: string
    }
  | {
      type: 'style.toggle'
      style: string
    }

/**
 * The editor performed a undo history step
 * @beta */
export declare type UndoChange = {
  type: 'undo'
  patches: Patch[]
  timestamp: Date
}

/** @beta */
export declare type UnsetChange = {
  type: 'unset'
  previousValue: PortableTextBlock[]
}

/**
 * @alpha
 */
export declare function useEditor(): Editor

/**
 * @alpha
 */
export declare function useEditorSelector<TSelected>(
  editor: Editor,
  selector: EditorSelector<TSelected>,
  compare?: (a: TSelected, b: TSelected) => boolean,
): TSelected

/**
 * @public
 * Get the current editor object from the React context.
 */
export declare const usePortableTextEditor: () => PortableTextEditor

/**
 * @public
 * Get the current editor selection from the React context.
 */
export declare const usePortableTextEditorSelection: () => EditorSelection

/**
 * The editor has received a new (props) value
 * @beta */
export declare type ValueChange = {
  type: 'value'
  value: PortableTextBlock[] | undefined
}

export {}
