{"version":3,"file":"selector.get-text-before.cjs","sources":["../../src/editor/utils/utils.get-start-point.ts","../../src/editor/utils/utils.is-keyed-segment.ts","../../src/editor/utils/utils.reverse-selection.ts","../../src/selectors/selector.get-selection-text.ts","../../src/selectors/selector.get-text-before.ts"],"sourcesContent":["import {\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {EditorSelectionPoint} from '../../types/editor'\n\nexport function getStartPoint({\n  node,\n  path,\n}: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelectionPoint {\n  if (isPortableTextTextBlock(node)) {\n    return {\n      path: [...path, 'children', {_key: node.children[0]._key}],\n      offset: 0,\n    }\n  }\n\n  return {\n    path,\n    offset: 0,\n  }\n}\n","import type {KeyedSegment, PathSegment} from '@sanity/types'\n\nexport function isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && segment !== null && '_key' in segment\n}\n","import type {EditorSelection} from '../../types/editor'\n\nexport function reverseSelection(\n  selection: NonNullable<EditorSelection>,\n): NonNullable<EditorSelection> {\n  if (selection.backward) {\n    return {\n      anchor: selection.focus,\n      focus: selection.anchor,\n      backward: false,\n    }\n  }\n\n  return {\n    anchor: selection.focus,\n    focus: selection.anchor,\n    backward: true,\n  }\n}\n","import {isPortableTextSpan, isPortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isKeyedSegment} from '../editor/utils/utils.is-keyed-segment'\nimport {reverseSelection} from '../editor/utils/utils.reverse-selection'\n\n/**\n * @alpha\n */\nexport const getSelectionText: EditorSelector<string> = ({context}) => {\n  let text = ''\n\n  const {value, selection} = context\n\n  if (!value || !selection) {\n    return text\n  }\n\n  const forwardSelection = selection.backward\n    ? reverseSelection(selection)\n    : selection\n\n  if (!forwardSelection) {\n    return text\n  }\n\n  for (const block of value) {\n    if (\n      isKeyedSegment(forwardSelection.anchor.path[0]) &&\n      block._key !== forwardSelection.anchor.path[0]._key\n    ) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (isPortableTextSpan(child)) {\n        if (\n          isKeyedSegment(forwardSelection.anchor.path[2]) &&\n          child._key === forwardSelection.anchor.path[2]._key &&\n          isKeyedSegment(forwardSelection.focus.path[2]) &&\n          child._key === forwardSelection.focus.path[2]._key\n        ) {\n          text =\n            text +\n            child.text.slice(\n              forwardSelection.anchor.offset,\n              forwardSelection.focus.offset,\n            )\n\n          break\n        }\n\n        if (\n          isKeyedSegment(forwardSelection.anchor.path[2]) &&\n          child._key === forwardSelection.anchor.path[2]._key\n        ) {\n          text = text + child.text.slice(forwardSelection.anchor.offset)\n          continue\n        }\n\n        if (\n          isKeyedSegment(forwardSelection.focus.path[2]) &&\n          child._key === forwardSelection.focus.path[2]._key\n        ) {\n          text = text + child.text.slice(0, forwardSelection.focus.offset)\n          break\n        }\n\n        if (text.length > 0) {\n          text + child.text\n        }\n      }\n    }\n\n    if (\n      isKeyedSegment(forwardSelection.focus.path[0]) &&\n      block._key === forwardSelection.focus.path[0]._key\n    ) {\n      break\n    }\n  }\n\n  return text\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getStartPoint} from '../editor/utils/utils.get-start-point'\nimport {isKeyedSegment} from '../editor/utils/utils.is-keyed-segment'\nimport {reverseSelection} from '../editor/utils/utils.reverse-selection'\nimport {getSelectionText} from './selector.get-selection-text'\n\n/**\n * @alpha\n */\nexport const getBlockTextBefore: EditorSelector<string> = ({context}) => {\n  if (!context.selection) {\n    return ''\n  }\n\n  const selection = context.selection.backward\n    ? reverseSelection(context.selection)\n    : context.selection\n  const point = selection.anchor\n  const key = isKeyedSegment(point.path[0]) ? point.path[0]._key : undefined\n\n  const block = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  if (!block) {\n    return ''\n  }\n\n  const startOfBlock = getStartPoint({node: block, path: [{_key: block._key}]})\n\n  return getSelectionText({\n    context: {\n      ...context,\n      value: context.value,\n      selection: {\n        anchor: startOfBlock,\n        focus: point,\n      },\n    },\n  })\n}\n"],"names":["getStartPoint","node","path","isPortableTextTextBlock","_key","children","offset","isKeyedSegment","segment","reverseSelection","selection","backward","anchor","focus","getSelectionText","context","text","value","forwardSelection","block","child","isPortableTextSpan","slice","getBlockTextBefore","point","key","undefined","find","startOfBlock"],"mappings":"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"}