"use strict";
Object.defineProperty(exports, "__esModule", { value: !0 });
var selectors = require("../_chunks-cjs/selectors.cjs"), behavior_core = require("../_chunks-cjs/behavior.core.cjs"), types = require("@sanity/types"), selector_getTextBefore = require("../_chunks-cjs/selector.get-text-before.cjs");
function createCodeEditorBehaviors(config) {
  return [behavior_core.defineBehavior({
    on: "key.down",
    guard: ({
      context,
      event
    }) => {
      var _a;
      const isMoveUpShortcut = behavior_core.isHotkey(config.moveBlockUpShortcut, event.keyboardEvent), firstBlock = selectors.getFirstBlock({
        context
      }), selectedBlocks = selectors.getSelectedBlocks({
        context
      }), blocksAbove = (firstBlock == null ? void 0 : firstBlock.node._key) !== ((_a = selectedBlocks[0]) == null ? void 0 : _a.node._key);
      return !isMoveUpShortcut || !blocksAbove ? !1 : {
        paths: selectedBlocks.map((block) => block.path)
      };
    },
    actions: [(_, {
      paths
    }) => paths.map((at) => ({
      type: "move.block up",
      at
    }))]
  }), behavior_core.defineBehavior({
    on: "key.down",
    guard: ({
      context,
      event
    }) => {
      var _a;
      const isMoveDownShortcut = behavior_core.isHotkey(config.moveBlockDownShortcut, event.keyboardEvent), lastBlock = selectors.getLastBlock({
        context
      }), selectedBlocks = selectors.getSelectedBlocks({
        context
      }), blocksBelow = (lastBlock == null ? void 0 : lastBlock.node._key) !== ((_a = selectedBlocks[selectedBlocks.length - 1]) == null ? void 0 : _a.node._key);
      return !isMoveDownShortcut || !blocksBelow ? !1 : {
        paths: selectedBlocks.map((block) => block.path).reverse()
      };
    },
    actions: [(_, {
      paths
    }) => paths.map((at) => ({
      type: "move.block down",
      at
    }))]
  })];
}
function createLinkBehaviors(config) {
  const pasteLinkOnSelection = behavior_core.defineBehavior({
    on: "paste",
    guard: ({
      context,
      event
    }) => {
      var _a;
      const selectionCollapsed = selectors.selectionIsCollapsed({
        context
      }), text = event.data.getData("text/plain"), url = looksLikeUrl(text) ? text : void 0, annotation = url !== void 0 ? (_a = config.linkAnnotation) == null ? void 0 : _a.call(config, {
        url,
        schema: context.schema
      }) : void 0;
      return annotation && !selectionCollapsed ? {
        annotation
      } : !1;
    },
    actions: [(_, {
      annotation
    }) => [{
      type: "annotation.add",
      annotation
    }]]
  }), pasteLinkAtCaret = behavior_core.defineBehavior({
    on: "paste",
    guard: ({
      context,
      event
    }) => {
      var _a;
      const focusSpan = selectors.getFocusSpan({
        context
      }), selectionCollapsed = selectors.selectionIsCollapsed({
        context
      });
      if (!focusSpan || !selectionCollapsed)
        return !1;
      const text = event.data.getData("text/plain"), url = looksLikeUrl(text) ? text : void 0, annotation = url !== void 0 ? (_a = config.linkAnnotation) == null ? void 0 : _a.call(config, {
        url,
        schema: context.schema
      }) : void 0;
      return url && annotation && selectionCollapsed ? {
        focusSpan,
        annotation,
        url
      } : !1;
    },
    actions: [(_, {
      annotation,
      url
    }) => [{
      type: "insert.span",
      text: url,
      annotations: [annotation]
    }]]
  });
  return [pasteLinkOnSelection, pasteLinkAtCaret];
}
function looksLikeUrl(text) {
  let looksLikeUrl2 = !1;
  try {
    new URL(text), looksLikeUrl2 = !0;
  } catch (e) {
  }
  return looksLikeUrl2;
}
var __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b))
      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);
  return a;
};
function createMarkdownBehaviors(config) {
  const automaticBlockquoteOnSpace = behavior_core.defineBehavior({
    on: "insert.text",
    guard: ({
      context,
      event
    }) => {
      var _a, _b, _c;
      if (event.text !== " ")
        return !1;
      const selectionCollapsed = selectors.selectionIsCollapsed({
        context
      }), focusTextBlock = selectors.getFocusTextBlock({
        context
      }), focusSpan = selectors.getFocusSpan({
        context
      });
      if (!selectionCollapsed || !focusTextBlock || !focusSpan)
        return !1;
      const blockOffset = behavior_core.spanSelectionPointToBlockOffset({
        value: context.value,
        selectionPoint: {
          path: [{
            _key: focusTextBlock.node._key
          }, "children", {
            _key: focusSpan.node._key
          }],
          offset: (_b = (_a = context.selection) == null ? void 0 : _a.focus.offset) != null ? _b : 0
        }
      });
      if (!blockOffset)
        return !1;
      const blockText = behavior_core.getTextBlockText(focusTextBlock.node), caretAtTheEndOfQuote = blockOffset.offset === 1, looksLikeMarkdownQuote = /^>/.test(blockText), blockquoteStyle = (_c = config.blockquoteStyle) == null ? void 0 : _c.call(config, context);
      return caretAtTheEndOfQuote && looksLikeMarkdownQuote && blockquoteStyle !== void 0 ? {
        focusTextBlock,
        style: blockquoteStyle
      } : !1;
    },
    actions: [() => [{
      type: "insert.text",
      text: " "
    }], (_, {
      focusTextBlock,
      style
    }) => [{
      type: "text block.unset",
      props: ["listItem", "level"],
      at: focusTextBlock.path
    }, {
      type: "text block.set",
      style,
      at: focusTextBlock.path
    }, {
      type: "delete.text",
      anchor: {
        path: focusTextBlock.path,
        offset: 0
      },
      focus: {
        path: focusTextBlock.path,
        offset: 2
      }
    }]]
  }), automaticHr = behavior_core.defineBehavior({
    on: "insert.text",
    guard: ({
      context,
      event
    }) => {
      var _a;
      const hrCharacter = event.text === "-" ? "-" : event.text === "*" ? "*" : event.text === "_" ? "_" : void 0;
      if (hrCharacter === void 0)
        return !1;
      const hrObject = (_a = config.horizontalRuleObject) == null ? void 0 : _a.call(config, context), focusBlock = selectors.getFocusTextBlock({
        context
      }), selectionCollapsed = selectors.selectionIsCollapsed({
        context
      });
      if (!hrObject || !focusBlock || !selectionCollapsed)
        return !1;
      const textBefore = selector_getTextBefore.getBlockTextBefore({
        context
      }), hrBlockOffsets = {
        anchor: {
          path: focusBlock.path,
          offset: 0
        },
        focus: {
          path: focusBlock.path,
          offset: 3
        }
      };
      return textBefore === `${hrCharacter}${hrCharacter}` ? {
        hrObject,
        focusBlock,
        hrCharacter,
        hrBlockOffsets
      } : !1;
    },
    actions: [(_, {
      hrCharacter
    }) => [{
      type: "insert.text",
      text: hrCharacter
    }], (_, {
      hrObject,
      hrBlockOffsets
    }) => [{
      type: "insert.block object",
      placement: "before",
      blockObject: hrObject
    }, __spreadValues({
      type: "delete.text"
    }, hrBlockOffsets)]]
  }), automaticHrOnPaste = behavior_core.defineBehavior({
    on: "paste",
    guard: ({
      context,
      event
    }) => {
      var _a, _b;
      const text = event.data.getData("text/plain"), hrRegExp = /^(---)$|(___)$|(\*\*\*)$/gm, hrCharacters = (_a = text.match(hrRegExp)) == null ? void 0 : _a[0], hrObject = (_b = config.horizontalRuleObject) == null ? void 0 : _b.call(config, context), focusBlock = selectors.getFocusBlock({
        context
      });
      return !hrCharacters || !hrObject || !focusBlock ? !1 : {
        hrCharacters,
        hrObject,
        focusBlock
      };
    },
    actions: [(_, {
      hrCharacters
    }) => [{
      type: "insert.text",
      text: hrCharacters
    }], (_, {
      hrObject,
      focusBlock
    }) => types.isPortableTextTextBlock(focusBlock.node) ? [{
      type: "insert.text block",
      textBlock: {
        children: focusBlock.node.children
      },
      placement: "after"
    }, {
      type: "insert.block object",
      blockObject: hrObject,
      placement: "after"
    }, {
      type: "delete.block",
      blockPath: focusBlock.path
    }] : [{
      type: "insert.block object",
      blockObject: hrObject,
      placement: "after"
    }]]
  }), automaticHeadingOnSpace = behavior_core.defineBehavior({
    on: "insert.text",
    guard: ({
      context,
      event
    }) => {
      var _a, _b, _c;
      if (event.text !== " ")
        return !1;
      const selectionCollapsed = selectors.selectionIsCollapsed({
        context
      }), focusTextBlock = selectors.getFocusTextBlock({
        context
      }), focusSpan = selectors.getFocusSpan({
        context
      });
      if (!selectionCollapsed || !focusTextBlock || !focusSpan)
        return !1;
      const blockOffset = behavior_core.spanSelectionPointToBlockOffset({
        value: context.value,
        selectionPoint: {
          path: [{
            _key: focusTextBlock.node._key
          }, "children", {
            _key: focusSpan.node._key
          }],
          offset: (_b = (_a = context.selection) == null ? void 0 : _a.focus.offset) != null ? _b : 0
        }
      });
      if (!blockOffset)
        return !1;
      const blockText = behavior_core.getTextBlockText(focusTextBlock.node), markdownHeadingSearch = /^#+/.exec(blockText), level = markdownHeadingSearch ? markdownHeadingSearch[0].length : void 0;
      if (blockOffset.offset !== level)
        return !1;
      const style = level !== void 0 ? (_c = config.headingStyle) == null ? void 0 : _c.call(config, {
        schema: context.schema,
        level
      }) : void 0;
      return level !== void 0 && style !== void 0 ? {
        focusTextBlock,
        style,
        level
      } : !1;
    },
    actions: [({
      event
    }) => [event], (_, {
      focusTextBlock,
      style,
      level
    }) => [{
      type: "text block.unset",
      props: ["listItem", "level"],
      at: focusTextBlock.path
    }, {
      type: "text block.set",
      style,
      at: focusTextBlock.path
    }, {
      type: "delete.text",
      anchor: {
        path: focusTextBlock.path,
        offset: 0
      },
      focus: {
        path: focusTextBlock.path,
        offset: level + 1
      }
    }]]
  }), clearStyleOnBackspace = behavior_core.defineBehavior({
    on: "delete.backward",
    guard: ({
      context
    }) => {
      var _a, _b;
      const selectionCollapsed = selectors.selectionIsCollapsed({
        context
      }), focusTextBlock = selectors.getFocusTextBlock({
        context
      }), focusSpan = selectors.getFocusSpan({
        context
      });
      if (!selectionCollapsed || !focusTextBlock || !focusSpan)
        return !1;
      const atTheBeginningOfBLock = focusTextBlock.node.children[0]._key === focusSpan.node._key && ((_a = context.selection) == null ? void 0 : _a.focus.offset) === 0, defaultStyle = (_b = config.defaultStyle) == null ? void 0 : _b.call(config, context);
      return atTheBeginningOfBLock && defaultStyle && focusTextBlock.node.style !== defaultStyle ? {
        defaultStyle,
        focusTextBlock
      } : !1;
    },
    actions: [(_, {
      defaultStyle,
      focusTextBlock
    }) => [{
      type: "text block.set",
      style: defaultStyle,
      at: focusTextBlock.path
    }]]
  }), automaticListOnSpace = behavior_core.defineBehavior({
    on: "insert.text",
    guard: ({
      context,
      event
    }) => {
      var _a, _b, _c, _d, _e;
      if (event.text !== " ")
        return !1;
      const selectionCollapsed = selectors.selectionIsCollapsed({
        context
      }), focusTextBlock = selectors.getFocusTextBlock({
        context
      }), focusSpan = selectors.getFocusSpan({
        context
      });
      if (!selectionCollapsed || !focusTextBlock || !focusSpan)
        return !1;
      const blockOffset = behavior_core.spanSelectionPointToBlockOffset({
        value: context.value,
        selectionPoint: {
          path: [{
            _key: focusTextBlock.node._key
          }, "children", {
            _key: focusSpan.node._key
          }],
          offset: (_b = (_a = context.selection) == null ? void 0 : _a.focus.offset) != null ? _b : 0
        }
      });
      if (!blockOffset)
        return !1;
      const blockText = behavior_core.getTextBlockText(focusTextBlock.node), defaultStyle = (_c = config.defaultStyle) == null ? void 0 : _c.call(config, context), looksLikeUnorderedList = /^(-|\*)/.test(blockText), unorderedListStyle = (_d = config.unorderedListStyle) == null ? void 0 : _d.call(config, context), caretAtTheEndOfUnorderedList = blockOffset.offset === 1;
      if (defaultStyle && caretAtTheEndOfUnorderedList && looksLikeUnorderedList && unorderedListStyle !== void 0)
        return {
          focusTextBlock,
          listItem: unorderedListStyle,
          listItemLength: 1,
          style: defaultStyle
        };
      const looksLikeOrderedList = /^1\./.test(blockText), orderedListStyle = (_e = config.orderedListStyle) == null ? void 0 : _e.call(config, context), caretAtTheEndOfOrderedList = blockOffset.offset === 2;
      return defaultStyle && caretAtTheEndOfOrderedList && looksLikeOrderedList && orderedListStyle !== void 0 ? {
        focusTextBlock,
        listItem: orderedListStyle,
        listItemLength: 2,
        style: defaultStyle
      } : !1;
    },
    actions: [({
      event
    }) => [event], (_, {
      focusTextBlock,
      style,
      listItem,
      listItemLength
    }) => [{
      type: "text block.set",
      listItem,
      level: 1,
      style,
      at: focusTextBlock.path
    }, {
      type: "delete.text",
      anchor: {
        path: focusTextBlock.path,
        offset: 0
      },
      focus: {
        path: focusTextBlock.path,
        offset: listItemLength + 1
      }
    }]]
  });
  return [automaticBlockquoteOnSpace, automaticHeadingOnSpace, automaticHr, automaticHrOnPaste, clearStyleOnBackspace, automaticListOnSpace];
}
exports.coreBehavior = behavior_core.coreBehavior;
exports.coreBehaviors = behavior_core.coreBehaviors;
exports.defineBehavior = behavior_core.defineBehavior;
exports.createCodeEditorBehaviors = createCodeEditorBehaviors;
exports.createLinkBehaviors = createLinkBehaviors;
exports.createMarkdownBehaviors = createMarkdownBehaviors;
//# sourceMappingURL=index.cjs.map
