import type {
  ArraySchemaType,
  BlockDecoratorDefinition,
  BlockListDefinition,
  BlockStyleDefinition,
  ObjectSchemaType,
  Path,
} from '@sanity/types'
import {
  KeyedSegment,
  PortableTextBlock,
  PortableTextListBlock,
  PortableTextObject,
  PortableTextSpan,
  PortableTextTextBlock,
} from '@sanity/types'

/**
 * @alpha
 */
export declare type EditorContext = {
  keyGenerator: () => string
  schema: EditorSchema
  selection: EditorSelection
  value: Array<PortableTextBlock>
}

/**
 * @alpha
 */
export declare type EditorSchema = PortableTextMemberSchemaTypes

/** @beta */
export declare type EditorSelection = {
  anchor: EditorSelectionPoint
  focus: EditorSelectionPoint
  backward?: boolean
} | null

/** @beta */
export declare type EditorSelectionPoint = {
  path: Path
  offset: number
}

/**
 * @alpha
 */
export declare type EditorSelector<TSelected> = (
  snapshot: EditorSnapshot,
) => TSelected

/**
 * @alpha
 */
export declare type EditorSnapshot = {
  context: EditorContext
}

/**
 * @alpha
 */
export declare const getActiveListItem: EditorSelector<
  PortableTextListBlock['listItem'] | undefined
>

/**
 * @alpha
 */
export declare const getBlockTextBefore: EditorSelector<string>

/**
 * @alpha
 */
export declare const getFirstBlock: EditorSelector<
  | {
      node: PortableTextBlock
      path: [KeyedSegment]
    }
  | undefined
>

/**
 * @alpha
 */
export declare const getFocusBlock: EditorSelector<
  | {
      node: PortableTextBlock
      path: [KeyedSegment]
    }
  | undefined
>

/**
 * @alpha
 */
export declare const getFocusBlockObject: EditorSelector<
  | {
      node: PortableTextObject
      path: [KeyedSegment]
    }
  | undefined
>

/**
 * @alpha
 */
export declare const getFocusChild: EditorSelector<
  | {
      node: PortableTextObject | PortableTextSpan
      path: [KeyedSegment, 'children', KeyedSegment]
    }
  | undefined
>

/**
 * @alpha
 */
export declare const getFocusListBlock: EditorSelector<
  | {
      node: PortableTextListBlock
      path: [KeyedSegment]
    }
  | undefined
>

/**
 * @alpha
 */
export declare const getFocusSpan: EditorSelector<
  | {
      node: PortableTextSpan
      path: [KeyedSegment, 'children', KeyedSegment]
    }
  | undefined
>

/**
 * @alpha
 */
export declare const getFocusTextBlock: EditorSelector<
  | {
      node: PortableTextTextBlock
      path: [KeyedSegment]
    }
  | undefined
>

/**
 * @alpha
 */
export declare const getLastBlock: EditorSelector<
  | {
      node: PortableTextBlock
      path: [KeyedSegment]
    }
  | undefined
>

/**
 * @alpha
 */
export declare const getNextBlock: EditorSelector<
  | {
      node: PortableTextBlock
      path: [KeyedSegment]
    }
  | undefined
>

/**
 * @alpha
 */
export declare const getPreviousBlock: EditorSelector<
  | {
      node: PortableTextBlock
      path: [KeyedSegment]
    }
  | undefined
>

/**
 * @alpha
 */
export declare const getSelectedBlocks: EditorSelector<
  Array<{
    node: PortableTextBlock
    path: [KeyedSegment]
  }>
>

/**
 * @alpha
 */
export declare const getSelectionEndBlock: EditorSelector<
  | {
      node: PortableTextBlock
      path: [KeyedSegment]
    }
  | undefined
>

/**
 * @alpha
 */
export declare const getSelectionStartBlock: EditorSelector<
  | {
      node: PortableTextBlock
      path: [KeyedSegment]
    }
  | undefined
>

/**
 * @alpha
 */
export declare const getSelectionText: EditorSelector<string>

/** @internal */
export declare type PortableTextMemberSchemaTypes = {
  annotations: (ObjectSchemaType & {
    i18nTitleKey?: string
  })[]
  block: ObjectSchemaType
  blockObjects: ObjectSchemaType[]
  decorators: BlockDecoratorDefinition[]
  inlineObjects: ObjectSchemaType[]
  portableText: ArraySchemaType<PortableTextBlock>
  span: ObjectSchemaType
  styles: BlockStyleDefinition[]
  lists: BlockListDefinition[]
}

/**
 * @alpha
 */
export declare const selectionIsCollapsed: EditorSelector<boolean>

export {}
