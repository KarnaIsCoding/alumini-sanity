{"version":3,"file":"index.js","sources":["../src/editor/create-editor-schema.ts","../src/editor/define-schema.ts","../src/utils/debug.ts","../src/utils/paths.ts","../src/utils/ranges.ts","../src/utils/selection.ts","../src/utils/values.ts","../src/utils/weakMaps.ts","../src/editor/nodes/DefaultObject.tsx","../src/editor/nodes/index.ts","../src/editor/components/DraggableBlock.tsx","../src/editor/components/Element.tsx","../src/editor/hooks/usePortableTextEditor.ts","../src/editor/nodes/DefaultAnnotation.tsx","../src/utils/schema.ts","../src/utils/validateValue.ts","../src/utils/withChanges.ts","../src/utils/withoutPatching.ts","../../../node_modules/.pnpm/@sanity+diff-match-patch@3.1.1/node_modules/@sanity/diff-match-patch/dist/index.js","../src/utils/withUndoRedo.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/editor/hooks/useSyncValue.ts","../src/editor/components/Synchronizer.tsx","../src/utils/operationToPatches.ts","../src/editor/plugins/create-with-event-listeners.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/utils/applyPatch.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithPortableTextBlockStyle.ts","../../../node_modules/.pnpm/@portabletext+toolkit@2.0.16/node_modules/@portabletext/toolkit/dist/index.js","../src/utils/sibling-utils.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../src/editor/plugins/createWithPortableTextSelections.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/editor/plugins/with-plugins.ts","../src/editor/create-slate-editor.tsx","../src/behavior-actions/behavior.action.list-item.ts","../src/behavior-actions/behavior.action.style.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/behavior-actions/behavior.action-utils.insert-block.ts","../src/behavior-actions/behavior.action.insert-block-object.ts","../src/behavior-actions/behavior.action.insert-break.ts","../src/behavior-actions/behavior.action.insert-inline-object.ts","../src/behavior-actions/behavior.action.insert-span.ts","../src/behavior-actions/behavior.action.text-block.set.ts","../src/behavior-actions/behavior.action.text-block.unset.ts","../src/behavior-actions/behavior.actions.ts","../src/editor/editor-machine.ts","../src/editor/key-generator.ts","../src/editor/create-editor.ts","../src/editor/editor-actor-context.ts","../src/editor/hooks/usePortableTextEditorSelection.tsx","../src/editor/PortableTextEditor.tsx","../src/editor/components/Leaf.tsx","../src/editor/plugins/createWithHotKeys.ts","../src/editor/plugins/createWithInsertData.ts","../src/editor/withSyncRangeDecorations.ts","../src/editor/Editable.tsx","../src/editor/editor-provider.tsx","../src/editor/editor-event-listener.tsx","../src/editor/get-value.ts","../src/editor/editor-selector.ts"],"sourcesContent":["import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {EditorSchema} from './define-schema'\n\nexport function createEditorSchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): EditorSchema {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {\n  defineField,\n  defineType,\n  type BlockDecoratorDefinition,\n  type ObjectSchemaType,\n} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {createEditorSchema} from './create-editor-schema'\n\n/**\n * @alpha\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n  icon?: BlockDecoratorDefinition['icon']\n}\n\n/**\n * @alpha\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<TBaseDefinition>\n  inlineObjects?: ReadonlyArray<TBaseDefinition>\n  annotations?: ReadonlyArray<TBaseDefinition>\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @alpha\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\n/**\n * @alpha\n */\nexport type EditorSchema = PortableTextMemberSchemaTypes\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition) {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with the name `image`\n        name: blockObject.name === 'image' ? 'tmp-image' : blockObject.name,\n        title: blockObject.title,\n        icon: blockObject.icon,\n        fields: [],\n      }),\n    ) ?? []\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        name: inlineObject.name,\n        title: inlineObject.title,\n        icon: inlineObject.icon,\n        fields: [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n              icon: decorator.icon,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n              icon: annotation.icon,\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n            icon: list.icon,\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n            icon: style.icon,\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createEditorSchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      blockObject.name === 'tmp-image'\n        ? ({\n            ...blockObject,\n            name: 'image',\n            type: {\n              ...blockObject.type,\n              name: 'image',\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n  } satisfies EditorSchema\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {\n  Editor,\n  Element,\n  type Descendant,\n  type Point,\n  type Path as SlatePath,\n} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport type {ObjectWithKeyAndType} from './ranges'\n\nexport function createKeyedPath(\n  point: Point,\n  value: ObjectWithKeyAndType[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath: Path | undefined\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (\n    keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath\n  ) as Path\n}\n\nexport function toSlatePath(path: Path, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(path[0]) && (n as Descendant)._key === path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n  const childPath = [path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n  return blockPath\n}\n","import {Point, Range, type BaseRange, type Editor, type Operation} from 'slate'\nimport type {\n  EditorSelection,\n  EditorSelectionPoint,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createKeyedPath, toSlatePath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toPortableTextRange(\n  value: ObjectWithKeyAndType[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes,\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  const backward = Boolean(\n    Range.isRange(range) ? Range.isBackward(range) : undefined,\n  )\n  return anchor && focus ? {anchor, focus, backward} : null\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [\n        {_key: VOID_CHILD_KEY, _type: 'span', text: '', marks: []},\n      ]\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: voidChildren,\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {Editor, Element, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n// Is the editor currently producing local changes that are not yet submitted?\nexport const IS_PROCESSING_LOCAL_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\n\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> =\n  new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<\n  Editor,\n  'top' | 'bottom'\n> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import type {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport type {JSX} from 'react'\n\ntype Props = {\n  value: PortableTextBlock | PortableTextChild\n}\n\nconst DefaultObject = (props: Props): JSX.Element => {\n  return (\n    <div>\n      <pre>{JSON.stringify(props.value, null, 2)}</pre>\n    </div>\n  )\n}\n\nDefaultObject.displayName = 'DefaultObject'\n\nexport default DefaultObject\n","import {styled} from 'styled-components'\n\nexport const DefaultBlockObject = styled.div<{selected: boolean}>`\n  user-select: none;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\nexport const DefaultInlineObject = styled.span<{selected: boolean}>`\n  background: #999;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\ntype ListItemProps = {listLevel: number; listStyle: string}\n\nexport const DefaultListItem = styled.div<ListItemProps>`\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ${(props: ListItemProps) => getLeftPositionForListLevel(props.listLevel)};\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '${(props: ListItemProps) =>\n        getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ${(props: {listLevel: number}) =>\n      getCounterIncrementForListLevel(props.listLevel)};\n    counter-reset: ${(props: {listLevel: number}) => getCounterResetForListLevel(props.listLevel)};\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ${(props) => getCounterContentForListLevel(props.listLevel)};\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n`\n\nexport const DefaultListItemInner = styled.div``\n\nfunction getLeftPositionForListLevel(level: number) {\n  switch (Number(level)) {\n    case 1:\n      return '1.5em'\n    case 2:\n      return '3em'\n    case 3:\n      return '4.5em'\n    case 4:\n      return '6em'\n    case 5:\n      return '7.5em'\n    case 6:\n      return '9em'\n    case 7:\n      return '10.5em'\n    case 8:\n      return '12em'\n    case 9:\n      return '13.5em'\n    case 10:\n      return '15em'\n    default:\n      return '0em'\n  }\n}\n\nconst bullets = ['●', '○', '■']\n\nfunction getContentForListLevelAndStyle(level: number, style: string) {\n  const normalizedLevel = (level - 1) % 3\n  if (style === 'bullet') {\n    return bullets[normalizedLevel]\n  }\n  return '*'\n}\n\nfunction getCounterIncrementForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemNumber'\n    case 2:\n      return 'listItemAlpha'\n    case 3:\n      return 'listItemRoman'\n    case 4:\n      return 'listItemNumberNext'\n    case 5:\n      return 'listItemLetterNext'\n    case 6:\n      return 'listItemRomanNext'\n    case 7:\n      return 'listItemNumberNextNext'\n    case 8:\n      return 'listItemAlphaNextNext'\n    case 9:\n      return 'listItemRomanNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterResetForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemAlpha'\n    case 2:\n      return 'listItemRoman'\n    case 3:\n      return 'listItemNumberNext'\n    case 4:\n      return 'listItemLetterNext'\n    case 5:\n      return 'listItemRomanNext'\n    case 6:\n      return 'listItemNumberNextNext'\n    case 7:\n      return 'listItemAlphaNextNext'\n    case 8:\n      return 'listItemRomanNextNext'\n    case 9:\n      return 'listItemNumberNextNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterContentForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return `counter(listItemNumber) '. '`\n    case 2:\n      return `counter(listItemAlpha, lower-alpha) '. '`\n    case 3:\n      return `counter(listItemRoman, lower-roman) '. '`\n    case 4:\n      return `counter(listItemNumberNext) '. '`\n    case 5:\n      return `counter(listItemLetterNext, lower-alpha) '. '`\n    case 6:\n      return `counter(listItemRomanNext, lower-roman) '. '`\n    case 7:\n      return `counter(listItemNumberNextNext) '. '`\n    case 8:\n      return `counter(listItemAlphaNextNext, lower-alpha) '. '`\n    case 9:\n      return `counter(listItemRomanNextNext, lower-roman) '. '`\n    default:\n      return `counter(listItemNumberNextNextNext) '. '`\n  }\n}\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type DragEvent,\n  type MutableRefObject,\n  type ReactNode,\n} from 'react'\nimport {Editor, Path, Transforms, type Element as SlateElement} from 'slate'\nimport {ReactEditor, useSlateStatic} from 'slate-react'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n  IS_DRAGGING_ELEMENT_TARGET,\n} from '../../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\n/**\n * @internal\n */\nexport interface DraggableBlockProps {\n  children: ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * Implements drag and drop functionality on editor block nodes\n * @internal\n */\nexport const DraggableBlock = ({\n  children,\n  element,\n  readOnly,\n  blockRef,\n}: DraggableBlockProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef = useRef<HTMLElement>(undefined)\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(\n    () => Editor.isVoid(editor, element),\n    [editor, element],\n  )\n  const isInline = useMemo(\n    () => Editor.isInline(editor, element),\n    [editor, element],\n  )\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () =>\n      setBlockElement(\n        blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element),\n      ),\n    [editor, element, blockRef],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (\n          dragPosition === 'top' &&\n          isBefore &&\n          targetPath[0] !== editor.children.length - 1\n        ) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath,\n          )} (${dragPosition})`,\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element],\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element],\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid],\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid],\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] ===\n      IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    [],\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n\nDraggableBlock.displayName = 'DraggableBlock'\n","import type {\n  Path,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  useMemo,\n  useRef,\n  type FunctionComponent,\n  type JSX,\n  type ReactElement,\n} from 'react'\nimport {Editor, Range, Element as SlateElement} from 'slate'\nimport {\n  ReactEditor,\n  useSelected,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport ObjectNode from '../nodes/DefaultObject'\nimport {\n  DefaultBlockObject,\n  DefaultListItem,\n  DefaultListItemInner,\n} from '../nodes/index'\nimport {DraggableBlock} from './DraggableBlock'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement<any>\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused =\n    (selected && editor.selection && Range.isCollapsed(editor.selection)) ||\n    false\n\n  const value = useMemo(\n    () =>\n      fromSlateValue(\n        [element],\n        schemaTypes.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )[0],\n    [editor, element, schemaTypes.block.name],\n  )\n\n  let renderedBlock = children\n\n  let className: string | undefined\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find(\n      (_type) => _type.name === element._type,\n    )\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [\n        {_key: block._key},\n        'children',\n        {_key: element._key},\n      ]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            data-testid=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <ObjectNode value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <ObjectNode value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find(\n      (item) => item.value === style,\n    )\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level: number | undefined\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find(\n        (item) => item.value === element.listItem,\n      )\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      } else {\n        renderedBlock = (\n          <DefaultListItem\n            listStyle={value.listItem || schemaTypes.lists[0].value}\n            listLevel={value.level || 1}\n          >\n            <DefaultListItemInner>{renderedBlock}</DefaultListItemInner>\n          </DefaultListItem>\n        )\n      }\n    }\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaTypes.block\n        },\n      },\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n    return (\n      <div\n        key={element._key}\n        {...attributes}\n        className={className}\n        spellCheck={spellCheck}\n      >\n        <DraggableBlock\n          element={element}\n          readOnly={readOnly}\n          blockRef={blockRef}\n        >\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n  const schemaType = schemaTypes.blockObjects.find(\n    (_type) => _type.name === element._type,\n  )\n  if (!schemaType) {\n    throw new Error(\n      `Could not find schema type for block element of _type ${element._type}`,\n    )\n  }\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n  className = 'pt-block pt-object-block'\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )[0]\n  let renderedBlockFromProps: JSX.Element | undefined\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <ObjectNode value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaType\n        },\n      },\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        {renderedBlockFromProps && (\n          <div ref={blockRef} contentEditable={false}>\n            {renderedBlockFromProps}\n          </div>\n        )}\n        {!renderedBlockFromProps && (\n          <DefaultBlockObject selected={selected}>\n            <ObjectNode value={value} />\n          </DefaultBlockObject>\n        )}\n      </DraggableBlock>\n    </div>\n  )\n}\n\nElement.displayName = 'Element'\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useCallback, type ReactNode} from 'react'\n\ntype Props = {\n  annotation: PortableTextObject\n  children: ReactNode\n}\nexport function DefaultAnnotation(props: Props) {\n  const handleClick = useCallback(\n    () => alert(JSON.stringify(props.annotation)),\n    [props.annotation],\n  )\n  return (\n    <span style={{color: 'blue'}} onClick={handleClick}>\n      {props.children}\n    </span>\n  )\n}\n\nDefaultAnnotation.displayName = 'DefaultAnnotation'\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport {\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {\n  InvalidValueResolution,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isPortableTextTextBlock({...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Editor} from 'slate'\nimport {\n  IS_PROCESSING_LOCAL_CHANGES,\n  IS_PROCESSING_REMOTE_CHANGES,\n} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n\nexport function isChangingLocally(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_LOCAL_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","function isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction cloneDiff(diff) {\n  const [type, patch] = diff;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA;\n  let text2 = textB;\n  const text1Length = text1.length;\n  const text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0) {\n    return 0;\n  }\n  if (text1Length > text2Length) {\n    text1 = text1.substring(text1Length - text2Length);\n  } else if (text1Length < text2Length) {\n    text2 = text2.substring(0, text1Length);\n  }\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2) {\n    return textLength;\n  }\n  let best = 0;\n  let length = 1;\n  for (let found = 0; found !== -1;) {\n    const pattern = text1.substring(textLength - length);\n    found = text2.indexOf(pattern);\n    if (found === -1) {\n      return best;\n    }\n    length += found;\n    if (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0]) {\n    return 0;\n  }\n  let pointerMin = 0;\n  let pointerMax = Math.min(text1.length, text2.length);\n  let pointerMid = pointerMax;\n  let pointerStart = 0;\n  while (pointerMin < pointerMid) {\n    if (text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid)) {\n      pointerMin = pointerMid;\n      pointerStart = pointerMin;\n    } else {\n      pointerMax = pointerMid;\n    }\n    pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  }\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1]) {\n    return 0;\n  }\n  let pointerMin = 0;\n  let pointerMax = Math.min(text1.length, text2.length);\n  let pointerMid = pointerMax;\n  let pointerEnd = 0;\n  while (pointerMin < pointerMid) {\n    if (text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd)) {\n      pointerMin = pointerMid;\n      pointerEnd = pointerMin;\n    } else {\n      pointerMax = pointerMid;\n    }\n    pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  }\n  return pointerMid;\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  let hasChanges = false;\n  const equalities = [];\n  let equalitiesLength = 0;\n  let lastEquality = null;\n  let pointer = 0;\n  let lengthInsertions1 = 0;\n  let lengthDeletions1 = 0;\n  let lengthInsertions2 = 0;\n  let lengthDeletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] === DIFF_EQUAL) {\n      equalities[equalitiesLength++] = pointer;\n      lengthInsertions1 = lengthInsertions2;\n      lengthDeletions1 = lengthDeletions2;\n      lengthInsertions2 = 0;\n      lengthDeletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {\n      if (diffs[pointer][0] === DIFF_INSERT) {\n        lengthInsertions2 += diffs[pointer][1].length;\n      } else {\n        lengthDeletions2 += diffs[pointer][1].length;\n      }\n      if (lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2)) {\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]);\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        lengthInsertions1 = 0;\n        lengthDeletions1 = 0;\n        lengthInsertions2 = 0;\n        lengthDeletions2 = 0;\n        lastEquality = null;\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  diffs = cleanupSemanticLossless(diffs);\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1];\n      const insertion = diffs[pointer][1];\n      const overlapLength1 = getCommonOverlap(deletion, insertion);\n      const overlapLength2 = getCommonOverlap(insertion, deletion);\n      if (overlapLength1 >= overlapLength2) {\n        if (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) {\n          diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]);\n          diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1);\n          diffs[pointer + 1][1] = insertion.substring(overlapLength1);\n          pointer++;\n        }\n      } else if (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) {\n        diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]);\n        diffs[pointer - 1][0] = DIFF_INSERT;\n        diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2);\n        diffs[pointer + 1][0] = DIFF_DELETE;\n        diffs[pointer + 1][1] = deletion.substring(overlapLength2);\n        pointer++;\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/;\nconst whitespaceRegex = /\\s/;\nconst linebreakRegex = /[\\r\\n]/;\nconst blanklineEndRegex = /\\n\\r?\\n$/;\nconst blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map(diff => cloneDiff(diff));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two) {\n      return 6;\n    }\n    const char1 = one.charAt(one.length - 1);\n    const char2 = two.charAt(0);\n    const nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex);\n    const nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex);\n    const whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex);\n    const whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex);\n    const lineBreak1 = whitespace1 && char1.match(linebreakRegex);\n    const lineBreak2 = whitespace2 && char2.match(linebreakRegex);\n    const blankLine1 = lineBreak1 && one.match(blanklineEndRegex);\n    const blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    if (blankLine1 || blankLine2) {\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      return 1;\n    }\n    return 0;\n  }\n  let pointer = 1;\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1];\n      let edit = diffs[pointer][1];\n      let equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1;\n      let bestEdit = edit;\n      let bestEquality2 = equality2;\n      let bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n      if (diffs[pointer - 1][1] !== bestEquality1) {\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0;\n  let countDelete = 0;\n  let countInsert = 0;\n  let textDelete = \"\";\n  let textInsert = \"\";\n  let commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++;\n        textInsert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++;\n        textDelete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        if (countDelete + countInsert > 1) {\n          if (countDelete !== 0 && countInsert !== 0) {\n            commonlength = getCommonPrefix(textInsert, textDelete);\n            if (commonlength !== 0) {\n              if (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL) {\n                diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]);\n                pointer++;\n              }\n              textInsert = textInsert.substring(commonlength);\n              textDelete = textDelete.substring(commonlength);\n            }\n            commonlength = getCommonSuffix(textInsert, textDelete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1];\n              textInsert = textInsert.substring(0, textInsert.length - commonlength);\n              textDelete = textDelete.substring(0, textDelete.length - commonlength);\n            }\n          }\n          pointer -= countDelete + countInsert;\n          diffs.splice(pointer, countDelete + countInsert);\n          if (textDelete.length) {\n            diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]);\n            pointer++;\n          }\n          if (textInsert.length) {\n            diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]);\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        countInsert = 0;\n        countDelete = 0;\n        textDelete = \"\";\n        textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  }\n  if (diffs[diffs.length - 1][1] === \"\") {\n    diffs.pop();\n  }\n  let hasChanges = false;\n  pointer = 1;\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {\n        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        hasChanges = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1]) {\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  return diffs;\n}\nfunction trueCount() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs) {\n  let editCost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  let hasChanges = false;\n  const equalities = [];\n  let equalitiesLength = 0;\n  let lastEquality = null;\n  let pointer = 0;\n  let preIns = false;\n  let preDel = false;\n  let postIns = false;\n  let postDel = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] === DIFF_EQUAL) {\n      if (diffs[pointer][1].length < editCost && (postIns || postDel)) {\n        equalities[equalitiesLength++] = pointer;\n        preIns = postIns;\n        preDel = postDel;\n        lastEquality = diffs[pointer][1];\n      } else {\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      postIns = false;\n      postDel = false;\n    } else {\n      if (diffs[pointer][0] === DIFF_DELETE) {\n        postDel = true;\n      } else {\n        postIns = true;\n      }\n      if (lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3)) {\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]);\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;\n        lastEquality = null;\n        if (preIns && preDel) {\n          postIns = true;\n          postDel = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;\n          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n          postIns = false;\n          postDel = false;\n        }\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  return diffs;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length;\n  const text2Length = text2.length;\n  const maxD = Math.ceil((text1Length + text2Length) / 2);\n  const vOffset = maxD;\n  const vLength = 2 * maxD;\n  const v1 = new Array(vLength);\n  const v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[vOffset + 1] = 0;\n  v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length;\n  const front = delta % 2 !== 0;\n  let k1start = 0;\n  let k1end = 0;\n  let k2start = 0;\n  let k2end = 0;\n  for (let d = 0; d < maxD; d++) {\n    if (Date.now() > deadline) {\n      break;\n    }\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      if (k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1]) {\n        x1 = v1[k1Offset + 1];\n      } else {\n        x1 = v1[k1Offset - 1] + 1;\n      }\n      let y1 = x1 - k1;\n      while (x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1Offset] = x1;\n      if (x1 > text1Length) {\n        k1end += 2;\n      } else if (y1 > text2Length) {\n        k1start += 2;\n      } else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2) {\n            return bisectSplit(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      if (k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1]) {\n        x2 = v2[k2Offset + 1];\n      } else {\n        x2 = v2[k2Offset - 1] + 1;\n      }\n      let y2 = x2 - k2;\n      while (x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2Offset] = x2;\n      if (x2 > text1Length) {\n        k2end += 2;\n      } else if (y2 > text2Length) {\n        k2start += 2;\n      } else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset];\n          const y1 = vOffset + x1 - k1Offset;\n          x2 = text1Length - x2;\n          if (x1 >= x2) {\n            return bisectSplit(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x);\n  const text2a = text2.substring(0, y);\n  const text1b = text1.substring(x);\n  const text2b = text2.substring(y);\n  const diffs = doDiff(text1a, text2a, {\n    checkLines: false,\n    deadline\n  });\n  const diffsb = doDiff(text1b, text2b, {\n    checkLines: false,\n    deadline\n  });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (timeout <= 0) {\n    return null;\n  }\n  const longText = text1.length > text2.length ? text1 : text2;\n  const shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length) {\n    return null;\n  }\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4));\n  const halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2) {\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  } else if (!halfMatch1 && !halfMatch2) {\n    return null;\n  } else if (!halfMatch2) {\n    halfMatch = halfMatch1;\n  } else if (!halfMatch1) {\n    halfMatch = halfMatch2;\n  }\n  if (!halfMatch) {\n    throw new Error(\"Unable to find a half match.\");\n  }\n  let text1A;\n  let text1B;\n  let text2A;\n  let text2B;\n  if (text1.length > text2.length) {\n    text1A = halfMatch[0];\n    text1B = halfMatch[1];\n    text2A = halfMatch[2];\n    text2B = halfMatch[3];\n  } else {\n    text2A = halfMatch[0];\n    text2B = halfMatch[1];\n    text1A = halfMatch[2];\n    text1B = halfMatch[3];\n  }\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1;\n  let bestCommon = \"\";\n  let bestLongTextA;\n  let bestLongTextB;\n  let bestShortTextA;\n  let bestShortTextB;\n  while ((j = shortText.indexOf(seed, j + 1)) !== -1) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j));\n    const suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    if (bestCommon.length < suffixLength + prefixLength) {\n      bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength);\n      bestLongTextA = longText.slice(0, i - suffixLength);\n      bestLongTextB = longText.slice(i + prefixLength);\n      bestShortTextA = shortText.slice(0, j - suffixLength);\n      bestShortTextB = shortText.slice(j + prefixLength);\n    }\n  }\n  if (bestCommon.length * 2 >= longText.length) {\n    return [bestLongTextA || \"\", bestLongTextB || \"\", bestShortTextA || \"\", bestShortTextB || \"\", bestCommon || \"\"];\n  }\n  return null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1];\n    const text = [];\n    for (let y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [];\n  const lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\";\n    let lineStart = 0;\n    let lineEnd = -1;\n    let lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf(\"\\n\", lineStart);\n      if (lineEnd === -1) {\n        lineEnd = text.length - 1;\n      }\n      let line = text.slice(lineStart, lineEnd + 1);\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength === maxLines) {\n          line = text.slice(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return {\n    chars1,\n    chars2,\n    lineArray\n  };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA;\n  let text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: false,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray);\n  diffs = cleanupSemantic(diffs);\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0;\n  let countDelete = 0;\n  let countInsert = 0;\n  let textDelete = \"\";\n  let textInsert = \"\";\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++;\n        textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++;\n        textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert);\n          pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: false,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, aa[j]);\n          }\n          pointer += aa.length;\n        }\n        countInsert = 0;\n        countDelete = 0;\n        textDelete = \"\";\n        textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  diffs.pop();\n  return diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1) {\n    return [[DIFF_INSERT, text2]];\n  }\n  if (!text2) {\n    return [[DIFF_DELETE, text1]];\n  }\n  const longtext = text1.length > text2.length ? text1 : text2;\n  const shorttext = text1.length > text2.length ? text2 : text1;\n  const i = longtext.indexOf(shorttext);\n  if (i !== -1) {\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    if (text1.length > text2.length) {\n      diffs[0][0] = DIFF_DELETE;\n      diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n  if (shorttext.length === 1) {\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0];\n    const text1B = halfMatch[1];\n    const text2A = halfMatch[2];\n    const text2B = halfMatch[3];\n    const midCommon = halfMatch[4];\n    const diffsA = doDiff(text1A, text2A, opts);\n    const diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  if (opts.checkLines && text1.length > 100 && text2.length > 100) {\n    return doLineModeDiff(text1, text2, opts);\n  }\n  return bisect(text1, text2, opts.deadline);\n}\nconst DIFF_DELETE = -1;\nconst DIFF_INSERT = 1;\nconst DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null) {\n    throw new Error(\"Null input. (diff)\");\n  }\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  adjustDiffForSurrogatePairs(diffs);\n  return diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA;\n  let text2 = textB;\n  if (text1 === text2) {\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  }\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n  commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diffs = cleanupMerge(diffs);\n  return diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  if (typeof timeout !== \"undefined\") {\n    t = timeout <= 0 ? Number.MAX_VALUE : timeout;\n  }\n  return Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return {\n    checkLines: true,\n    deadline: createDeadLine(opts.timeout || 1),\n    ...opts\n  };\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null;\n  let deleteIdx = null;\n  let j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length === 0) {\n      continue;\n    }\n    if (op === DIFF_INSERT) {\n      if (insertIdx === null) {\n        insertIdx = j;\n      }\n      continue;\n    } else if (op === DIFF_DELETE) {\n      if (deleteIdx === null) {\n        deleteIdx = j;\n      }\n      continue;\n    } else if (op === DIFF_EQUAL) {\n      if (insertIdx === null && deleteIdx === null) {\n        const [rest, char2] = splitChar(diffs[i][1], dir);\n        diffs[i][1] = rest;\n        diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n        return;\n      }\n      break;\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv);\n    const [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText;\n    diffs[deleteIdx][1] = deleteText;\n    diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text;\n  if (insertIdx === null) {\n    diffs.splice(j, 0, [DIFF_INSERT, char]);\n    if (deleteIdx !== null && deleteIdx >= j) deleteIdx++;\n  } else {\n    diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv);\n  }\n  if (deleteIdx === null) {\n    diffs.splice(j, 0, [DIFF_DELETE, char]);\n  } else {\n    diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n  }\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0];\n    const lastChar = diffText[diffText.length - 1];\n    if (isHighSurrogate(lastChar) && diffType === DIFF_EQUAL) {\n      deisolateChar(diffs, i, 1);\n    }\n    if (isLowSurrogate(firstChar) && diffType === DIFF_EQUAL) {\n      deisolateChar(diffs, i, -1);\n    }\n  }\n  for (let i = 0; i < diffs.length; i++) {\n    if (diffs[i][1].length === 0) {\n      diffs.splice(i, 1);\n    }\n  }\n}\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return {\n    ...DEFAULT_OPTIONS,\n    ...options\n  };\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (pattern.length > MAX_BITS$1) {\n    throw new Error(\"Pattern too long for this browser.\");\n  }\n  const options = applyDefaults(opts);\n  const s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length;\n    const proximity = Math.abs(loc - x);\n    if (!options.distance) {\n      return proximity ? 1 : accuracy;\n    }\n    return accuracy + proximity / options.distance;\n  }\n  let scoreThreshold = options.threshold;\n  let bestLoc = text.indexOf(pattern, loc);\n  if (bestLoc !== -1) {\n    scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold);\n    bestLoc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (bestLoc !== -1) {\n      scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold);\n    }\n  }\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin;\n  let binMid;\n  let binMax = pattern.length + text.length;\n  let lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    binMin = 0;\n    binMid = binMax;\n    while (binMin < binMid) {\n      if (getBitapScore(d, loc + binMid) <= scoreThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length;\n    const rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch;\n      } else {\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold) {\n          scoreThreshold = score;\n          bestLoc = j - 1;\n          if (bestLoc > loc) {\n            start = Math.max(1, 2 * loc - bestLoc);\n          } else {\n            break;\n          }\n        }\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold) {\n      break;\n    }\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (let i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  }\n  return s;\n}\nfunction match(text, pattern, searchLocation) {\n  if (text === null || pattern === null || searchLocation === null) {\n    throw new Error(\"Null input. (match())\");\n  }\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern) {\n    return 0;\n  } else if (!text.length) {\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) === pattern) {\n    return loc;\n  }\n  return bitap(text, pattern, loc);\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join(\"\");\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint === \"undefined\") {\n      throw new Error(\"Failed to get codepoint\");\n    }\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let byteOffset = 0;\n  let idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target;) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint === \"undefined\") {\n        return idx;\n      }\n      byteOffset += utf8len(codePoint);\n      if (codePoint > 65535) {\n        idx += 2;\n      } else {\n        idx += 1;\n      }\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target) {\n      throw new Error(\"Failed to determine byte offset\");\n    }\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches) {\n    adjusted.push({\n      diffs: patch.diffs.map(diff => cloneDiff(diff)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  }\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  if (codePoint <= 127) return 1;\n  if (codePoint <= 2047) return 2;\n  if (codePoint <= 65535) return 3;\n  return 4;\n}\nconst MAX_BITS = 32;\nconst DEFAULT_MARGIN = 4;\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    ...DEFAULT_OPTS,\n    ...opts\n  };\n}\nfunction make(a, b, options) {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    let diffs = diff(a, b, {\n      checkLines: true\n    });\n    if (diffs.length > 2) {\n      diffs = cleanupSemantic(diffs);\n      diffs = cleanupEfficiency(diffs);\n    }\n    return _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b === \"undefined\") {\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  }\n  if (typeof a === \"string\" && b && Array.isArray(b)) {\n    return _make(a, b, getDefaultOpts(options));\n  }\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0) {\n    return [];\n  }\n  const patches = [];\n  let patch = createPatchObject(0, 0);\n  let patchDiffLength = 0;\n  let charCount1 = 0;\n  let charCount2 = 0;\n  let utf8Count1 = 0;\n  let utf8Count2 = 0;\n  let prepatchText = textA;\n  let postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x];\n    const [diffType, diffText] = currentDiff;\n    const diffTextLength = diffText.length;\n    const diffByteLength = countUtf8Bytes(diffText);\n    if (!patchDiffLength && diffType !== DIFF_EQUAL) {\n      patch.start1 = charCount1;\n      patch.start2 = charCount2;\n      patch.utf8Start1 = utf8Count1;\n      patch.utf8Start2 = utf8Count2;\n    }\n    switch (diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff;\n        patch.length2 += diffTextLength;\n        patch.utf8Length2 += diffByteLength;\n        postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength;\n        patch.utf8Length1 += diffByteLength;\n        patch.diffs[patchDiffLength++] = currentDiff;\n        postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        if (diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1) {\n          patch.diffs[patchDiffLength++] = currentDiff;\n          patch.length1 += diffTextLength;\n          patch.length2 += diffTextLength;\n          patch.utf8Length1 += diffByteLength;\n          patch.utf8Length2 += diffByteLength;\n        } else if (diffTextLength >= 2 * options.margin) {\n          if (patchDiffLength) {\n            addContext(patch, prepatchText, options);\n            patches.push(patch);\n            patch = createPatchObject(-1, -1);\n            patchDiffLength = 0;\n            prepatchText = postpatchText;\n            charCount1 = charCount2;\n            utf8Count1 = utf8Count2;\n          }\n        }\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    if (diffType !== DIFF_INSERT) {\n      charCount1 += diffTextLength;\n      utf8Count1 += diffByteLength;\n    }\n    if (diffType !== DIFF_DELETE) {\n      charCount2 += diffTextLength;\n      utf8Count2 += diffByteLength;\n    }\n  }\n  if (patchDiffLength) {\n    addContext(patch, prepatchText, options);\n    patches.push(patch);\n  }\n  return patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0) {\n    return;\n  }\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  let padding = 0;\n  while (text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin) {\n    padding += opts.margin;\n    pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  }\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  if (prefixStart >= 1 && isLowSurrogate(text[prefixStart])) {\n    prefixStart--;\n  }\n  const prefix = text.substring(prefixStart, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  }\n  const prefixLength = prefix.length;\n  const prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  if (suffixEnd < text.length && isLowSurrogate(text[suffixEnd])) {\n    suffixEnd++;\n  }\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  if (suffix) {\n    patch.diffs.push([DIFF_EQUAL, suffix]);\n  }\n  const suffixLength = suffix.length;\n  const suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength;\n  patch.start2 -= prefixLength;\n  patch.utf8Start1 -= prefixUtf8Length;\n  patch.utf8Start2 -= prefixUtf8Length;\n  patch.length1 += prefixLength + suffixLength;\n  patch.length2 += prefixLength + suffixLength;\n  patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length;\n  patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nfunction levenshtein(diffs) {\n  let leven = 0;\n  let insertions = 0;\n  let deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0];\n    const data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  leven += Math.max(insertions, deletions);\n  return leven;\n}\nfunction xIndex(diffs, loc) {\n  let chars1 = 0;\n  let chars2 = 0;\n  let lastChars1 = 0;\n  let lastChars2 = 0;\n  let x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {\n      break;\n    }\n    lastChars1 = chars1;\n    lastChars2 = chars2;\n  }\n  if (diffs.length !== x && diffs[x][0] === DIFF_DELETE) {\n    return lastChars2;\n  }\n  return lastChars2 + (loc - lastChars1);\n}\nfunction addPadding(patches) {\n  let margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MARGIN;\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n  for (const p of patches) {\n    p.start1 += paddingLength;\n    p.start2 += paddingLength;\n    p.utf8Start1 += paddingLength;\n    p.utf8Start2 += paddingLength;\n  }\n  let patch = patches[0];\n  let diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL) {\n    diffs.unshift([DIFF_EQUAL, nullPadding]);\n    patch.start1 -= paddingLength;\n    patch.start2 -= paddingLength;\n    patch.utf8Start1 -= paddingLength;\n    patch.utf8Start2 -= paddingLength;\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n    patch.utf8Length1 += paddingLength;\n    patch.utf8Length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length;\n    const extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.utf8Start1 -= extraLength;\n    patch.utf8Start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n    patch.utf8Length1 += extraLength;\n    patch.utf8Length2 += extraLength;\n  }\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL) {\n    diffs.push([DIFF_EQUAL, nullPadding]);\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n    patch.utf8Length1 += paddingLength;\n    patch.utf8Length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n    patch.utf8Length1 += extraLength;\n    patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction splitMax(patches) {\n  let margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MARGIN;\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize) {\n      continue;\n    }\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1;\n    let start2 = bigpatch.start2;\n    let preContext = \"\";\n    while (bigpatch.diffs.length !== 0) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = true;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length;\n        patch.utf8Length1 = precontextByteCount;\n        patch.length2 = preContext.length;\n        patch.utf8Length2 = precontextByteCount;\n        patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      while (bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1];\n        let diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length;\n          patch.utf8Length2 += diffTextByteCount;\n          start2 += diffText.length;\n          const diff = bigpatch.diffs.shift();\n          if (diff) {\n            patch.diffs.push(diff);\n          }\n          empty = false;\n        } else if (diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize) {\n          patch.length1 += diffText.length;\n          patch.utf8Length1 += diffTextByteCount;\n          start1 += diffText.length;\n          empty = false;\n          patch.diffs.push([diffType, diffText]);\n          bigpatch.diffs.shift();\n        } else {\n          diffText = diffText.substring(0, patchSize - patch.length1 - margin);\n          diffTextByteCount = countUtf8Bytes(diffText);\n          patch.length1 += diffText.length;\n          patch.utf8Length1 += diffTextByteCount;\n          start1 += diffText.length;\n          if (diffType === DIFF_EQUAL) {\n            patch.length2 += diffText.length;\n            patch.utf8Length2 += diffTextByteCount;\n            start2 += diffText.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push([diffType, diffText]);\n          if (diffText === bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length);\n          }\n        }\n      }\n      preContext = diffText2(patch.diffs);\n      preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin);\n      const postContextByteCount = countUtf8Bytes(postContext);\n      if (postContext !== \"\") {\n        patch.length1 += postContext.length;\n        patch.length2 += postContext.length;\n        patch.utf8Length1 += postContextByteCount;\n        patch.utf8Length2 += postContextByteCount;\n        if (patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postContext;\n        } else {\n          patch.diffs.push([DIFF_EQUAL, postContext]);\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n}\nfunction apply(patches, originalText) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (typeof patches === \"string\") {\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  }\n  let text = originalText;\n  if (patches.length === 0) {\n    return [text, []];\n  }\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  });\n  const margin = opts.margin || DEFAULT_MARGIN;\n  const deleteThreshold = opts.deleteThreshold || 0.4;\n  const nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding;\n  splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta;\n    const text1 = diffText1(parsed[x].diffs);\n    let startLoc;\n    let endLoc = -1;\n    if (text1.length > MAX_BITS) {\n      startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc);\n      if (startLoc !== -1) {\n        endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS);\n        if (endLoc === -1 || startLoc >= endLoc) {\n          startLoc = -1;\n        }\n      }\n    } else {\n      startLoc = match(text, text1, expectedLoc);\n    }\n    if (startLoc === -1) {\n      results[x] = false;\n      delta -= parsed[x].length2 - parsed[x].length1;\n    } else {\n      results[x] = true;\n      delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1) {\n        text2 = text.substring(startLoc, startLoc + text1.length);\n      } else {\n        text2 = text.substring(startLoc, endLoc + MAX_BITS);\n      }\n      if (text1 === text2) {\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      } else {\n        let diffs = diff(text1, text2, {\n          checkLines: false\n        });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold) {\n          results[x] = false;\n        } else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0;\n          let index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {\n              text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2);\n            } else if (mod[0] === DIFF_DELETE) {\n              text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const {\n    utf8Length1,\n    utf8Length2,\n    utf8Start1,\n    utf8Start2,\n    diffs\n  } = patch;\n  let coords1;\n  if (utf8Length1 === 0) {\n    coords1 = \"\".concat(utf8Start1, \",0\");\n  } else if (utf8Length1 === 1) {\n    coords1 = \"\".concat(utf8Start1 + 1);\n  } else {\n    coords1 = \"\".concat(utf8Start1 + 1, \",\").concat(utf8Length1);\n  }\n  let coords2;\n  if (utf8Length2 === 0) {\n    coords2 = \"\".concat(utf8Start2, \",0\");\n  } else if (utf8Length2 === 1) {\n    coords2 = \"\".concat(utf8Start2 + 1);\n  } else {\n    coords2 = \"\".concat(utf8Start2 + 1, \",\").concat(utf8Length2);\n  }\n  const text = [\"@@ -\".concat(coords1, \" +\").concat(coords2, \" @@\\n\")];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = \"\".concat(op + encodeURI(diffs[x][1]), \"\\n\");\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline) {\n    return [];\n  }\n  const patches = [];\n  const lines = textline.split(\"\\n\");\n  let textPointer = 0;\n  while (textPointer < lines.length) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error(\"Invalid patch string: \".concat(lines[textPointer]));\n    }\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    patches.push(patch);\n    if (m[2] === \"\") {\n      patch.start1--;\n      patch.utf8Start1--;\n      patch.length1 = 1;\n      patch.utf8Length1 = 1;\n    } else if (m[2] === \"0\") {\n      patch.length1 = 0;\n      patch.utf8Length1 = 0;\n    } else {\n      patch.start1--;\n      patch.utf8Start1--;\n      patch.utf8Length1 = toInt(m[2]);\n      patch.length1 = patch.utf8Length1;\n    }\n    if (m[4] === \"\") {\n      patch.start2--;\n      patch.utf8Start2--;\n      patch.length2 = 1;\n      patch.utf8Length2 = 1;\n    } else if (m[4] === \"0\") {\n      patch.length2 = 0;\n      patch.utf8Length2 = 0;\n    } else {\n      patch.start2--;\n      patch.utf8Start2--;\n      patch.utf8Length2 = toInt(m[4]);\n      patch.length2 = patch.utf8Length2;\n    }\n    textPointer++;\n    while (textPointer < lines.length) {\n      const currentLine = lines[textPointer];\n      const sign = currentLine.charAt(0);\n      if (sign === \"@\") {\n        break;\n      }\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(\"Illegal escape in parse: \".concat(currentLine));\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\") {\n        patch.diffs.push([DIFF_DELETE, line]);\n        patch.length1 -= utf8Diff;\n      } else if (sign === \"+\") {\n        patch.diffs.push([DIFF_INSERT, line]);\n        patch.length2 -= utf8Diff;\n      } else if (sign === \" \") {\n        patch.diffs.push([DIFF_EQUAL, line]);\n        patch.length1 -= utf8Diff;\n        patch.length2 -= utf8Diff;\n      } else {\n        throw new Error(\"Invalid patch mode \\\"\".concat(sign, \"\\\" in: \").concat(line));\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nexport { DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, adjustIndiciesToUcs2, apply as applyPatches, cleanupEfficiency, cleanupSemantic, diff as makeDiff, make as makePatches, match, parse as parsePatch, stringifyPatch, stringify as stringifyPatches };\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {ObjectSchemaType, PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  blockSchemaType: ObjectSchemaType\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor, blockSchemaType} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      blockSchemaType.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n    const {apply} = editor\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      let merge = true\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge = shouldMerge(op, lastOp) || overwrite\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n      apply(op)\n    }\n\n    editor.undo = () => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        return\n      }\n      const {undos} = editor.history\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1]\n        debug('Undoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          const reversedOperations = transformedOperations\n            .map(Operation.inverse)\n            .reverse()\n\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withUndoing(editor, () => {\n                withoutSaving(editor, () => {\n                  reversedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform undo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsUndoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.redos.push(step)\n          editor.history.undos.pop()\n        }\n      }\n    }\n\n    editor.redo = () => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        return\n      }\n      const {redos} = editor.history\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1]\n        debug('Redoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withRedoing(editor, () => {\n                withoutSaving(editor, () => {\n                  transformedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform redo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsRedoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.undos.push(step)\n          editor.history.redos.pop()\n        }\n      }\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {debounce, isEqual} from 'lodash'\nimport {useCallback, useMemo, useRef} from 'react'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {validateValue} from '../../utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../../utils/values'\nimport {\n  isChangingLocally,\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../../utils/withChanges'\nimport {withoutPatching} from '../../utils/withoutPatching'\nimport type {EditorActor} from '../editor-machine'\nimport {withoutSaving} from '../plugins/createWithUndoRedo'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('hook:useSyncValue')\n\n/**\n * @internal\n */\nexport interface UseSyncValueProps {\n  editorActor: EditorActor\n  portableTextEditor: PortableTextEditor\n  readOnly: boolean\n  slateEditor: PortableTextSlateEditor\n}\n\nconst CURRENT_VALUE = new WeakMap<\n  PortableTextEditor,\n  PortableTextBlock[] | undefined\n>()\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport function useSyncValue(\n  props: UseSyncValueProps,\n): (\n  value: PortableTextBlock[] | undefined,\n  userCallbackFn?: () => void,\n) => void {\n  const {editorActor, portableTextEditor, readOnly, slateEditor} = props\n  const schemaTypes = editorActor.getSnapshot().context.schema\n  const previousValue = useRef<PortableTextBlock[]>(undefined)\n  const updateValueFunctionRef =\n    useRef<(value: PortableTextBlock[] | undefined) => void>(undefined)\n\n  const updateFromCurrentValue = useCallback(() => {\n    const currentValue = CURRENT_VALUE.get(portableTextEditor)\n    if (previousValue.current === currentValue) {\n      debug('Value is the same object as previous, not need to sync')\n      return\n    }\n    if (updateValueFunctionRef.current && currentValue) {\n      debug('Updating the value debounced')\n      updateValueFunctionRef.current(currentValue)\n    }\n  }, [portableTextEditor])\n  const updateValueDebounced = useMemo(\n    () =>\n      debounce(updateFromCurrentValue, 1000, {trailing: true, leading: false}),\n    [updateFromCurrentValue],\n  )\n\n  return useMemo(() => {\n    const updateFunction = (value: PortableTextBlock[] | undefined) => {\n      CURRENT_VALUE.set(portableTextEditor, value)\n      const isProcessingLocalChanges = isChangingLocally(slateEditor)\n      const isProcessingRemoteChanges = isChangingRemotely(slateEditor)\n      if (!readOnly) {\n        if (isProcessingLocalChanges) {\n          debug('Has local changes, not syncing value right now')\n          updateValueDebounced()\n          return\n        }\n        if (isProcessingRemoteChanges) {\n          debug('Has remote changes, not syncing value right now')\n          updateValueDebounced()\n          return\n        }\n      }\n\n      let isChanged = false\n      let isValid = true\n\n      const hadSelection = !!slateEditor.selection\n\n      // If empty value, remove everything in the editor and insert a placeholder block\n      if (!value || value.length === 0) {\n        debug('Value is empty')\n        Editor.withoutNormalizing(slateEditor, () => {\n          withoutSaving(slateEditor, () => {\n            withoutPatching(slateEditor, () => {\n              if (hadSelection) {\n                Transforms.deselect(slateEditor)\n              }\n              const childrenLength = slateEditor.children.length\n              slateEditor.children.forEach((_, index) => {\n                Transforms.removeNodes(slateEditor, {\n                  at: [childrenLength - 1 - index],\n                })\n              })\n              Transforms.insertNodes(\n                slateEditor,\n                slateEditor.pteCreateTextBlock({decorators: []}),\n                {at: [0]},\n              )\n              // Add a new selection in the top of the document\n              if (hadSelection) {\n                Transforms.select(slateEditor, [0, 0])\n              }\n            })\n          })\n        })\n        isChanged = true\n      }\n      // Remove, replace or add nodes according to what is changed.\n      if (value && value.length > 0) {\n        const slateValueFromProps = toSlateValue(value, {\n          schemaTypes,\n        })\n        Editor.withoutNormalizing(slateEditor, () => {\n          withRemoteChanges(slateEditor, () => {\n            withoutSaving(slateEditor, () => {\n              withoutPatching(slateEditor, () => {\n                const childrenLength = slateEditor.children.length\n                // Remove blocks that have become superfluous\n                if (slateValueFromProps.length < childrenLength) {\n                  for (\n                    let i = childrenLength - 1;\n                    i > slateValueFromProps.length - 1;\n                    i--\n                  ) {\n                    Transforms.removeNodes(slateEditor, {\n                      at: [i],\n                    })\n                  }\n                  isChanged = true\n                }\n                // Go through all of the blocks and see if they need to be updated\n                slateValueFromProps.forEach(\n                  (currentBlock, currentBlockIndex) => {\n                    const oldBlock = slateEditor.children[currentBlockIndex]\n                    const hasChanges =\n                      oldBlock && !isEqual(currentBlock, oldBlock)\n                    if (hasChanges && isValid) {\n                      const validationValue = [value[currentBlockIndex]]\n                      const validation = validateValue(\n                        validationValue,\n                        schemaTypes,\n                        editorActor.getSnapshot().context.keyGenerator,\n                      )\n                      // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n                      if (\n                        !validation.valid &&\n                        validation.resolution?.autoResolve &&\n                        validation.resolution?.patches.length > 0\n                      ) {\n                        // Only apply auto resolution if the value has been populated before and is different from the last one.\n                        if (\n                          !readOnly &&\n                          previousValue.current &&\n                          previousValue.current !== value\n                        ) {\n                          // Give a console warning about the fact that it did an auto resolution\n                          console.warn(\n                            `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n                          )\n                          validation.resolution.patches.forEach((patch) => {\n                            editorActor.send({type: 'patch', patch})\n                          })\n                        }\n                      }\n                      if (\n                        validation.valid ||\n                        validation.resolution?.autoResolve\n                      ) {\n                        if (oldBlock._key === currentBlock._key) {\n                          if (debug.enabled)\n                            debug('Updating block', oldBlock, currentBlock)\n                          _updateBlock(\n                            slateEditor,\n                            currentBlock,\n                            oldBlock,\n                            currentBlockIndex,\n                          )\n                        } else {\n                          if (debug.enabled)\n                            debug('Replacing block', oldBlock, currentBlock)\n                          _replaceBlock(\n                            slateEditor,\n                            currentBlock,\n                            currentBlockIndex,\n                          )\n                        }\n                        isChanged = true\n                      } else {\n                        editorActor.send({\n                          type: 'invalid value',\n                          resolution: validation.resolution,\n                          value,\n                        })\n                        isValid = false\n                      }\n                    }\n                    if (!oldBlock && isValid) {\n                      const validationValue = [value[currentBlockIndex]]\n                      const validation = validateValue(\n                        validationValue,\n                        schemaTypes,\n                        editorActor.getSnapshot().context.keyGenerator,\n                      )\n                      if (debug.enabled)\n                        debug(\n                          'Validating and inserting new block in the end of the value',\n                          currentBlock,\n                        )\n                      if (\n                        validation.valid ||\n                        validation.resolution?.autoResolve\n                      ) {\n                        Transforms.insertNodes(slateEditor, currentBlock, {\n                          at: [currentBlockIndex],\n                        })\n                      } else {\n                        debug('Invalid', validation)\n                        editorActor.send({\n                          type: 'invalid value',\n                          resolution: validation.resolution,\n                          value,\n                        })\n                        isValid = false\n                      }\n                    }\n                  },\n                )\n              })\n            })\n          })\n        })\n      }\n\n      if (!isValid) {\n        debug('Invalid value, returning')\n        return\n      }\n      if (isChanged) {\n        debug('Server value changed, syncing editor')\n        try {\n          slateEditor.onChange()\n        } catch (err) {\n          console.error(err)\n          editorActor.send({\n            type: 'invalid value',\n            resolution: null,\n            value,\n          })\n          return\n        }\n        if (hadSelection && !slateEditor.selection) {\n          Transforms.select(slateEditor, {\n            anchor: {path: [0, 0], offset: 0},\n            focus: {path: [0, 0], offset: 0},\n          })\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'value changed', value})\n      } else {\n        debug('Server value and editor value is equal, no need to sync.')\n      }\n      previousValue.current = value\n    }\n    updateValueFunctionRef.current = updateFunction\n    return updateFunction\n  }, [\n    editorActor,\n    portableTextEditor,\n    readOnly,\n    schemaTypes,\n    slateEditor,\n    updateValueDebounced,\n  ])\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              Transforms.delete(slateEditor, {\n                at: {\n                  focus: {path, offset: 0},\n                  anchor: {path, offset: oldBlockChild.text.length},\n                },\n              })\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {throttle} from 'lodash'\nimport {useCallback, useEffect, useRef} from 'react'\nimport {Editor} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {IS_PROCESSING_LOCAL_CHANGES} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport {useSyncValue} from '../hooks/useSyncValue'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\nconst debugVerbose = debug.enabled && false\n\n// The editor will commit changes in a throttled fashion in order\n// not to overload the network and degrade performance while typing.\nconst FLUSH_PATCHES_THROTTLED_MS = process.env.NODE_ENV === 'test' ? 500 : 1000\n\n/**\n * @internal\n */\nexport interface SynchronizerProps {\n  editorActor: EditorActor\n  getValue: () => Array<PortableTextBlock> | undefined\n  portableTextEditor: PortableTextEditor\n  slateEditor: PortableTextSlateEditor\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const readOnly = useSelector(props.editorActor, (s) => s.context.readOnly)\n  const value = useSelector(props.editorActor, (s) => s.context.value)\n  const {editorActor, getValue, portableTextEditor, slateEditor} = props\n  const pendingPatches = useRef<Patch[]>([])\n\n  const syncValue = useSyncValue({\n    editorActor,\n    portableTextEditor,\n    readOnly,\n    slateEditor,\n  })\n\n  useEffect(() => {\n    IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, false)\n  }, [slateEditor])\n\n  const onFlushPendingPatches = useCallback(() => {\n    if (pendingPatches.current.length > 0) {\n      debug('Flushing pending patches')\n      if (debugVerbose) {\n        debug(`Patches:\\n${JSON.stringify(pendingPatches.current, null, 2)}`)\n      }\n      const snapshot = getValue()\n      editorActor.send({\n        type: 'mutation',\n        patches: pendingPatches.current,\n        snapshot,\n      })\n      pendingPatches.current = []\n    }\n    IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, false)\n  }, [editorActor, slateEditor, getValue])\n\n  // Flush pending patches immediately on unmount\n  useEffect(() => {\n    return () => {\n      onFlushPendingPatches()\n    }\n  }, [onFlushPendingPatches])\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    const onFlushPendingPatchesThrottled = throttle(\n      () => {\n        // If the editor is normalizing (each operation) it means that it's not in the middle of a bigger transform,\n        // and we can flush these changes immediately.\n        if (Editor.isNormalizing(slateEditor)) {\n          onFlushPendingPatches()\n          return\n        }\n        // If it's in the middle of something, try again.\n        onFlushPendingPatchesThrottled()\n      },\n      FLUSH_PATCHES_THROTTLED_MS,\n      {\n        leading: false,\n        trailing: true,\n      },\n    )\n\n    debug('Subscribing to patch events')\n    const sub = editorActor.on('patch', (event) => {\n      IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, true)\n      pendingPatches.current.push(event.patch)\n      onFlushPendingPatchesThrottled()\n    })\n    return () => {\n      debug('Unsubscribing to patch events')\n      sub.unsubscribe()\n    }\n  }, [editorActor, onFlushPendingPatches, slateEditor])\n\n  // This hook must be set up after setting up the subscription above, or it will not pick up validation errors from the useSyncValue hook.\n  // This will cause the editor to not be able to signal a validation error and offer invalid value resolution of the initial value.\n  const isInitialValueFromProps = useRef(true)\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncValue(value)\n    // Signal that we have our first value, and are ready to roll.\n    if (isInitialValueFromProps.current) {\n      editorActor.send({type: 'ready'})\n      isInitialValueFromProps.current = false\n    }\n  }, [editorActor, syncValue, value])\n\n  return null\n}\n\nSynchronizer.displayName = 'Synchronizer'\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {fromSlateValue} from './values'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(\n  types: PortableTextMemberSchemaTypes,\n): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    if (debug.enabled) {\n      debug('Operation', JSON.stringify(operation, null, 2))\n    }\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) &&\n      editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild =\n      editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child =\n      (editor.isTextBlock(block) && block.children[operation.path[1]]) ||\n      undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child)\n      ? child\n      : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild =\n      editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n  ) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined,\n      ) as unknown as Descendant\n      return [\n        set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}]),\n      ]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          const keys = Object.keys(operation.newProperties)\n          keys.forEach((keyName) => {\n            // Special case for setting _key on a child. We have to target it by index and not the _key.\n            if (keys.length === 1 && keyName === '_key') {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  block.children.indexOf(child),\n                  keyName,\n                ]),\n              )\n            } else {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  {_key: childKey},\n                  keyName,\n                ]),\n              )\n            }\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(\n        `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n      )\n    }\n  }\n\n  function insertNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[],\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey =\n        operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert(\n            [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n            position,\n            [{_key: targetKey}],\n          ),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert(\n          [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n          'before',\n          [operation.path[0]],\n        ),\n      ]\n    } else if (\n      isTextBlock &&\n      operation.path.length === 2 &&\n      editor.children[operation.path[0]]\n    ) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1]\n          ? 'before'\n          : 'after'\n      const node = {...operation.node} as Descendant\n      if (!node._type && Text.isText(node)) {\n        node._type = 'span'\n        node.marks = []\n      }\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [node],\n          },\n        ],\n        textBlockName,\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug(\n      'Something was inserted into a void block. Not producing editor patches.',\n    )\n    return []\n  }\n\n  function splitNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0],\n        )} is not a text block and can't be split`,\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName,\n        )[0]\n        if (targetValue) {\n          patches.push(\n            insert([targetValue], 'after', [{_key: splitBlock._key}]),\n          )\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(\n                  operation.path[1] + 1,\n                  operation.path[1] + 2,\n                ),\n              } as Descendant,\n            ],\n            textBlockName,\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ]),\n        )\n        patches.push(\n          set(splitSpan.text, [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n            'text',\n          ]),\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]]\n\n      if (spanToRemove) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === operation.node._key,\n        )\n\n        if (spansMatchingKey.length > 1) {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n          return []\n        }\n\n        return [\n          unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n        ]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const updatedBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue(\n          [editor.children[operation.path[0] - 1]],\n          textBlockName,\n        )[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(updatedBlock) &&\n      operation.path.length === 2\n    ) {\n      const updatedSpan =\n        updatedBlock.children[operation.path[1] - 1] &&\n        editor.isTextSpan(updatedBlock.children[operation.path[1] - 1])\n          ? updatedBlock.children[operation.path[1] - 1]\n          : undefined\n      const removedSpan =\n        block.children[operation.path[1]] &&\n        editor.isTextSpan(block.children[operation.path[1]])\n          ? block.children[operation.path[1]]\n          : undefined\n\n      if (updatedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === updatedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            set(updatedSpan.text, [\n              {_key: block._key},\n              'children',\n              {_key: updatedSpan._key},\n              'text',\n            ]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n\n      if (removedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === removedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n\n    if (!targetBlock) {\n      return patches\n    }\n\n    if (operation.path.length === 1) {\n      const position: InsertPosition =\n        operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [\n          {_key: targetBlock._key},\n        ]),\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position =\n        operation.newPath[1] === targetBlock.children.length\n          ? 'after'\n          : 'before'\n      const childToInsert = (\n        fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock\n      ).children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ]),\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import type {Editor} from 'slate'\nimport type {EditorActor} from '../editor-machine'\n\nexport function createWithEventListeners(\n  editorActor: EditorActor,\n  subscriptions: Array<() => () => void>,\n) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    subscriptions.push(() => {\n      const subscription = editorActor.on('*', (event) => {\n        switch (event.type) {\n          case 'annotation.add': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.add',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'annotation.remove': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.remove',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'annotation.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'annotation.toggle',\n                annotation: event.annotation,\n              },\n              editor,\n            })\n            break\n          }\n          case 'blur': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'blur',\n              },\n              editor,\n            })\n            break\n          }\n          case 'decorator.add': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'decorator.add',\n                decorator: event.decorator,\n              },\n              editor,\n            })\n            break\n          }\n          case 'decorator.remove': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'decorator.remove',\n                decorator: event.decorator,\n              },\n              editor,\n            })\n            break\n          }\n          case 'decorator.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'decorator.toggle',\n                decorator: event.decorator,\n              },\n              editor,\n            })\n            break\n          }\n          case 'focus': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'focus',\n              },\n              editor,\n            })\n            break\n          }\n          case 'insert.block object': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'insert.block object',\n                placement: event.placement,\n                blockObject: event.blockObject,\n              },\n              editor,\n            })\n            break\n          }\n          case 'insert.inline object': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'insert.inline object',\n                inlineObject: event.inlineObject,\n              },\n              editor,\n            })\n            break\n          }\n          case 'list item.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'list item.toggle',\n                listItem: event.listItem,\n              },\n              editor,\n            })\n            break\n          }\n          case 'style.toggle': {\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'style.toggle',\n                style: event.style,\n              },\n              editor,\n            })\n            break\n          }\n        }\n      })\n\n      return () => {\n        subscription.unsubscribe()\n      }\n    })\n\n    editor.addMark = (mark) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.add',\n          decorator: mark,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.removeMark = (mark) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.remove',\n          decorator: mark,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteBackward = (unit) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertSoftBreak = () => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text, options) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n          options,\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import type {PortableTextSlateEditor} from '../../types/editor'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {\n  KeyedSegment,\n  Path,\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n} from '@sanity/types'\nimport {\n  Element,\n  Text,\n  Transforms,\n  type Descendant,\n  type Node,\n  type Path as SlatePath,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schemaTypes: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug(\n        '\\n\\nNEW PATCH =============================================================',\n      )\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schemaTypes)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx =\n    position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    debug('Setting children')\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    const newVal = applyAll([block.value], [patch])[0]\n    Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    return true\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n    editor.children.forEach((_child, i) => {\n      Transforms.removeNodes(editor, {at: [i]})\n    })\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (\n    editor.isTextBlock(block) &&\n    patch.path[1] === 'children' &&\n    patch.path.length === 3\n  ) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify(childPath)}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection'\n  >,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {\n  child?: Descendant\n  childPath?: SlatePath\n  block?: Descendant\n  blockPath?: SlatePath\n} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex) as SlatePath,\n  }\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {\n  Editor,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type Operation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {createApplyPatch} from '../../utils/applyPatch'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../utils/weakMaps'\nimport {withRemoteChanges} from '../../utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../utils/withoutPatching'\nimport type {EditorActor} from '../editor-machine'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n}\n\ninterface Options {\n  editorActor: EditorActor\n  patchFunctions: PatchFunctions\n  schemaTypes: PortableTextMemberSchemaTypes\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  patchFunctions,\n  schemaTypes,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(schemaTypes)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                changed = applyPatch(editor, patch)\n              })\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        apply(operation)\n        return editor\n      }\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        editorActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        patches.forEach((patch) => {\n          editorActor.send({\n            type: 'patch',\n            patch: {...patch, origin: 'local'},\n          })\n        })\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport {debugWithName} from '../../utils/debug'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().context.readOnly) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    return editor\n  }\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a;\n  const {\n    children,\n    markDefs = []\n  } = block;\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../utils/sibling-utils'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = types.decorators.map((decorator) => decorator.value)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = types.decorators.map((decorator) => decorator.value)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = types.decorators.map(\n            (decorator) => decorator.value,\n          )\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        const marks = Editor.marks(editor)\n\n        if (\n          marks &&\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // If the editor has marks and we are not visually moving the\n            // selection then we just abort. Otherwise the marks would be\n            // cleared and we can't use them for the possible subsequent insert\n            // operation.\n            if (movedToNextSpan || movedToPreviousSpan) {\n              return\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        const collapsedSelection = selection\n          ? Range.isCollapsed(selection)\n          : false\n\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: selection.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          const marks = span.marks ?? []\n          const marksWithoutAnnotations = marks.filter((mark) =>\n            decorators.includes(mark),\n          )\n          const spanHasAnnotations =\n            marks.length > marksWithoutAnnotations.length\n\n          const spanIsEmpty = span.text.length === 0\n\n          const atTheBeginningOfSpan = selection.anchor.offset === 0\n          const atTheEndOfSpan = selection.anchor.offset === span.text.length\n\n          const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n          const nextSpan = getNextSpan({editor, blockPath, spanPath})\n          const nextSpanAnnotations =\n            nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n          const spanAnnotations = marks.filter(\n            (mark) => !decorators.includes(mark),\n          )\n\n          const previousSpanHasAnnotations = previousSpan\n            ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n            : false\n          const previousSpanHasSameAnnotations = previousSpan\n            ? previousSpan.marks\n                ?.filter((mark) => !decorators.includes(mark))\n                .every((mark) => marks.includes(mark))\n            : false\n          const previousSpanHasSameAnnotation = previousSpan\n            ? previousSpan.marks?.some(\n                (mark) => !decorators.includes(mark) && marks.includes(mark),\n              )\n            : false\n\n          const previousSpanHasSameMarks = previousSpan\n            ? previousSpan.marks?.every((mark) => marks.includes(mark))\n            : false\n          const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n            nextSpanAnnotations?.includes(mark),\n          )\n\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotations) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotation) {\n                apply(op)\n                return\n              } else if (!previousSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n\n            if (atTheEndOfSpan) {\n              if (\n                (nextSpan &&\n                  nextSpanSharesSomeAnnotations &&\n                  nextSpanAnnotations.length < spanAnnotations.length) ||\n                !nextSpanSharesSomeAnnotations\n              ) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? [],\n                })\n                return\n              }\n\n              if (!nextSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n          }\n\n          if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n            Transforms.insertNodes(editor, {\n              _type: 'span',\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations\n                ? []\n                : (previousSpan.marks ?? []).filter((mark) =>\n                    decorators.includes(mark),\n                  ),\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const marksWithoutAnnotationMarks: string[] = (\n                {\n                  ...(Editor.marks(editor) || {}),\n                }.marks || []\n              ).filter((mark) => decorators.includes(mark))\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: marksWithoutAnnotationMarks},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type === types.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const addDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.add'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n\n  if (editor.selection) {\n    if (Range.isExpanded(editor.selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      // Use new selection\n      const splitTextNodes = Range.isRange(editor.selection)\n        ? [\n            ...Editor.nodes(editor, {\n              at: editor.selection,\n              match: Text.isText,\n            }),\n          ]\n        : []\n      const shouldRemoveMark =\n        splitTextNodes.length > 1 &&\n        splitTextNodes.every((node) => node[0].marks?.includes(mark))\n\n      if (shouldRemoveMark) {\n        editor.removeMark(mark)\n      } else {\n        splitTextNodes.forEach(([node, path]) => {\n          const marks = [\n            ...(Array.isArray(node.marks) ? node.marks : []).filter(\n              (eMark: string) => eMark !== mark,\n            ),\n            mark,\n          ]\n          Transforms.setNodes(\n            editor,\n            {marks},\n            {at: path, match: Text.isText, split: true, hanging: true},\n          )\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, editor.selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks:\n              existingMarks.length === existingMarksWithoutDecorator.length\n                ? [...existingMarks, mark]\n                : existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: [...existingMarks, mark],\n        }\n        editor.marks = marks as Text\n      }\n    }\n    editor.onChange()\n  }\n}\n\nexport const removeDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.remove'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: existingMarks.filter((eMark) => eMark !== mark),\n        } as Text\n        editor.marks = {marks: marks.marks, _type: 'span'} as Text\n      }\n    }\n  }\n}\n\nexport function isDecoratorActive({\n  editor,\n  decorator,\n}: {\n  editor: PortableTextSlateEditor\n  decorator: string\n}) {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedTextNodes = Array.from(\n    Editor.nodes(editor, {match: Text.isText, at: editor.selection}),\n  )\n\n  if (selectedTextNodes.length === 0) {\n    return false\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    return selectedTextNodes.every((n) => {\n      const [node] = n\n\n      return node.marks?.includes(decorator)\n    })\n  }\n\n  return (\n    {\n      ...(Editor.marks(editor) || {}),\n    }.marks || []\n  ).includes(decorator)\n}\n\nexport const toggleDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.toggle'\n> = ({context, action}) => {\n  const isActive = isDecoratorActive({\n    editor: action.editor,\n    decorator: action.decorator,\n  })\n\n  if (isActive) {\n    removeDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.remove',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  } else {\n    addDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.add',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  }\n}\n","import type {BaseRange} from 'slate'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  toPortableTextRange,\n  type ObjectWithKeyAndType,\n} from '../../utils/ranges'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            const value = editor.children satisfies ObjectWithKeyAndType[]\n            ptRange = toPortableTextRange(value, editor.selection, types)\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      const hasChanges = editor.operations.length > 0\n      onChange()\n      if (hasChanges) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {\n  isPortableTextListBlock,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n  schemaTypes,\n}: {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return (\n        isPortableTextTextBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type === schemaTypes.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return (\n        isPortableTextListBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        schemaTypes.block.name !== element._type &&\n        (schemaTypes.blockObjects\n          .map((obj) => obj.name)\n          .includes(element._type) ||\n          schemaTypes.inlineObjects\n            .map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = schemaTypes.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {...span, _type: schemaTypes.span.name, _key: key},\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUtils')\n\ninterface Options {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor, schemaTypes}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Expands the the selection to wrap around the word the focus is at\n    editor.pteExpandToWord = () => {\n      const {selection} = editor\n      if (selection && !Range.isExpanded(selection)) {\n        const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n        if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {\n          debug(`pteExpandToWord: Can't expand to word here`)\n          return\n        }\n        const {focus} = selection\n        const focusOffset = focus.offset\n        const charsBefore = textNode.text.slice(0, focusOffset)\n        const charsAfter = textNode.text.slice(focusOffset, -1)\n        const isEmpty = (str: string) => str.match(/\\s/g)\n        const whiteSpaceBeforeIndex = charsBefore\n          .split('')\n          .reverse()\n          .findIndex((str) => isEmpty(str))\n        const newStartOffset =\n          whiteSpaceBeforeIndex > -1\n            ? charsBefore.length - whiteSpaceBeforeIndex\n            : 0\n        const whiteSpaceAfterIndex = charsAfter\n          .split('')\n          .findIndex((obj) => isEmpty(obj))\n        const newEndOffset =\n          charsBefore.length +\n          (whiteSpaceAfterIndex > -1\n            ? whiteSpaceAfterIndex\n            : charsAfter.length + 1)\n        if (\n          !(\n            newStartOffset === newEndOffset ||\n            Number.isNaN(newStartOffset) ||\n            Number.isNaN(newEndOffset)\n          )\n        ) {\n          debug('pteExpandToWord: Expanding to focused word')\n          Transforms.setSelection(editor, {\n            anchor: {...selection.anchor, offset: newStartOffset},\n            focus: {...selection.focus, offset: newEndOffset},\n          })\n          return\n        }\n        debug(`pteExpandToWord: Can't expand to word here`)\n      }\n    }\n\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: schemaTypes.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style: schemaTypes.styles[0].value || 'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  schemaTypes.decorators.find(({value}) => value === decorator),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {createOperationToPatches} from '../../utils/operationToPatches'\nimport type {EditorActor} from '../editor-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor} = options\n  const schemaTypes = editorActor.getSnapshot().context.schema\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(editorActor, schemaTypes)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n    schemaTypes,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    schemaTypes,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    blockSchemaType: schemaTypes.block,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(\n    editorActor,\n    schemaTypes,\n  )\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(\n    editorActor,\n    schemaTypes,\n  )\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n    schemaTypes,\n  })\n  const withPortableTextSelections = createWithPortableTextSelections(\n    editorActor,\n    schemaTypes,\n  )\n  const withEventListeners = createWithEventListeners(\n    editorActor,\n    options.subscriptions,\n  )\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPlaceholderBlock(\n              withUtils(\n                withMaxBlocks(\n                  withUndoRedo(withPatches(withPortableTextSelections(e))),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {KEY_TO_SLATE_ELEMENT, KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n}\n\n/**\n * @internal\n */\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nconst slateEditors = new WeakMap<EditorActor, SlateEditor>()\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  const existingSlateEditor = slateEditors.get(config.editorActor)\n\n  if (existingSlateEditor) {\n    debug('Reusing existing Slate editor instance', config.editorActor.id)\n    return existingSlateEditor\n  }\n\n  debug('Creating new Slate editor instance', config.editorActor.id)\n\n  const unsubscriptions: Array<() => void> = []\n  const subscriptions: Array<() => () => void> = []\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  for (const subscription of subscriptions) {\n    unsubscriptions.push(subscription())\n  }\n\n  const initialValue = [instance.pteCreateTextBlock({decorators: []})]\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  slateEditors.set(config.editorActor, slateEditor)\n\n  return slateEditor\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\nimport {createGuards} from './behavior.guards'\n\nexport const toggleListItemActionImplementation: BehaviorActionImplementation<\n  'list item.toggle'\n> = ({context, action}) => {\n  const isActive = isListItemActive({\n    editor: action.editor,\n    listItem: action.listItem,\n  })\n\n  if (isActive) {\n    removeListItemActionImplementation({\n      context,\n      action: {...action, type: 'list item.remove'},\n    })\n  } else {\n    addListItemActionImplementation({\n      context,\n      action: {...action, type: 'list item.add'},\n    })\n  }\n}\n\nexport const removeListItemActionImplementation: BehaviorActionImplementation<\n  'list item.remove'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isListBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.unsetNodes(action.editor, ['listItem', 'level'], {at})\n  }\n}\n\nexport const addListItemActionImplementation: BehaviorActionImplementation<\n  'list item.add'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        level: 1,\n        listItem: action.listItem,\n      },\n      {at},\n    )\n  }\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\nimport {createGuards} from './behavior.guards'\n\nexport const toggleStyleActionImplementation: BehaviorActionImplementation<\n  'style.toggle'\n> = ({context, action}) => {\n  const isActive = isStyleActive({\n    editor: action.editor,\n    style: action.style,\n  })\n\n  if (isActive) {\n    removeStyleActionImplementation({\n      context,\n      action: {...action, type: 'style.remove'},\n    })\n  } else {\n    addStyleActionImplementation({\n      context,\n      action: {...action, type: 'style.add'},\n    })\n  }\n}\n\nexport const removeStyleActionImplementation: BehaviorActionImplementation<\n  'style.remove'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const defaultStyle = context.schema.styles[0].value\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        style: defaultStyle,\n      },\n      {\n        at,\n      },\n    )\n  }\n}\n\nexport const addStyleActionImplementation: BehaviorActionImplementation<\n  'style.add'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        style: action.style,\n      },\n      {\n        at,\n      },\n    )\n  }\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n","import {\n  isPortableTextSpan,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Path as SlatePath,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {isListItemActive} from '../../behavior-actions/behavior.action.list-item'\nimport {isStyleActive} from '../../behavior-actions/behavior.action.style'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange, toSlateRange} from '../../utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../../utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport {isDecoratorActive} from './createWithPortableTextMarkModel'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'focus',\n        },\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'blur',\n        },\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      // Try/catch this, as Slate may error because the selection is currently wrong\n      // TODO: catch only relevant error from Slate\n      try {\n        return isDecoratorActive({editor, decorator: mark})\n      } catch (err) {\n        console.warn(err)\n        return false\n      }\n    },\n    marks: (): string[] => {\n      return (\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      )\n    },\n    undo: (): void => editor.undo(),\n    redo: (): void => editor.redo(),\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return (\n          toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            editor.selection,\n            types,\n          )?.focus.path ?? []\n        )\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path || []\n      )\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block object',\n          blockObject: {\n            name: type.name,\n            value,\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path ?? []\n      )\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      return isAnnotationActive({editor, annotation: {name: annotationType}})\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          action: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n\nfunction isAnnotationActive({\n  editor,\n  annotation,\n}: {\n  editor: PortableTextSlateEditor\n  annotation: {\n    name: string\n  }\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2) {\n    return false\n  }\n\n  try {\n    const spans = [\n      ...Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => Text.isText(node),\n      }),\n    ]\n\n    if (spans.length === 0) {\n      return false\n    }\n\n    if (\n      spans.some(\n        ([span]) =>\n          !isPortableTextSpan(span) || !span.marks || span.marks?.length === 0,\n      )\n    )\n      return false\n\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = Editor.node(editor, path, {depth: 1})\n      if (editor.isTextBlock(block) && block.markDefs) {\n        return [...accMarkDefs, ...block.markDefs]\n      }\n      return accMarkDefs\n    }, [] as PortableTextObject[])\n\n    return spans.every(([span]) => {\n      if (!isPortableTextSpan(span)) return false\n\n      const spanMarkDefs = span.marks?.map(\n        (markKey) =>\n          selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n      )\n\n      return spanMarkDefs?.includes(annotation.name)\n    })\n  } catch {\n    return false\n  }\n}\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const editor = action.editor\n  const {selection: originalSelection} = editor\n  let paths: AddedAnnotationPaths | undefined = undefined\n\n  if (originalSelection) {\n    if (Range.isCollapsed(originalSelection)) {\n      editor.pteExpandToWord()\n      editor.onChange()\n    }\n\n    // If we still have a selection, add the annotation to the selected text\n    if (editor.selection) {\n      let spanPath: Path | undefined\n      let markDefPath: Path | undefined\n      const markDefPaths: Path[] = []\n\n      if (!editor.selection) {\n        return\n      }\n\n      const selectedBlocks = Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextBlock(node),\n        reverse: Range.isBackward(editor.selection),\n      })\n\n      for (const [block, blockPath] of selectedBlocks) {\n        if (block.children.length === 0) {\n          continue\n        }\n\n        if (block.children.length === 1 && block.children[0].text === '') {\n          continue\n        }\n\n        const annotationKey = context.keyGenerator()\n        const markDefs = block.markDefs ?? []\n        const existingMarkDef = markDefs.find(\n          (markDef) =>\n            markDef._type === action.annotation.name &&\n            markDef._key === annotationKey,\n        )\n\n        if (existingMarkDef === undefined) {\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: [\n                ...markDefs,\n                {\n                  _type: action.annotation.name,\n                  _key: annotationKey,\n                  ...action.annotation.value,\n                },\n              ],\n            },\n            {at: blockPath},\n          )\n\n          markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n          if (Range.isBackward(editor.selection)) {\n            markDefPaths.unshift(markDefPath)\n          } else {\n            markDefPaths.push(markDefPath)\n          }\n        }\n\n        Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n        const children = Node.children(editor, blockPath)\n\n        for (const [span, path] of children) {\n          if (!editor.isTextSpan(span)) {\n            continue\n          }\n\n          if (!Range.includes(editor.selection, path)) {\n            continue\n          }\n\n          const marks = span.marks ?? []\n          const existingSameTypeAnnotations = marks.filter((mark) =>\n            markDefs.some(\n              (markDef) =>\n                markDef._key === mark &&\n                markDef._type === action.annotation.name,\n            ),\n          )\n\n          Transforms.setNodes(\n            editor,\n            {\n              marks: [\n                ...marks.filter(\n                  (mark) => !existingSameTypeAnnotations.includes(mark),\n                ),\n                annotationKey,\n              ],\n            },\n            {at: path},\n          )\n          spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n        }\n      }\n\n      if (markDefPath && spanPath) {\n        paths = {\n          markDefPath,\n          markDefPaths,\n          spanPath,\n        }\n      }\n    }\n  }\n  return paths\n}\n\nexport const removeAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.remove'\n> = ({action}) => {\n  const editor = action.editor\n\n  debug('Removing annotation', action.annotation.name)\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === action.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== action.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n\nexport const toggleAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.toggle',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const isActive = isAnnotationActive({\n    editor: action.editor,\n    annotation: {name: action.annotation.name},\n  })\n\n  if (isActive) {\n    removeAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.remove',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  } else {\n    return addAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.add',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  }\n}\n","import {Editor, Transforms, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/define-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {isEqualToEmptyEditor} from '../utils/values'\n\nexport function insertBlock({\n  block,\n  placement,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  if (!editor.selection) {\n    const lastBlock = Array.from(\n      Editor.nodes(editor, {\n        match: (n) => !Editor.isEditor(n),\n        at: [],\n        reverse: true,\n      }),\n    )[0]\n\n    // If there is no selection, let's just insert the new block at the\n    // end of the document\n    Editor.insertNode(editor, block)\n\n    if (lastBlock && isEqualToEmptyEditor([lastBlock[0]], schema)) {\n      // And if the last block was an empty text block, let's remove\n      // that too\n      Transforms.removeNodes(editor, {at: lastBlock[1]})\n    }\n  } else {\n    const [focusBlock, focusBlockPath] = Array.from(\n      Editor.nodes(editor, {\n        at: editor.selection.focus.path.slice(0, 1),\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )[0] ?? [undefined, undefined]\n\n    if (placement === 'after') {\n      const nextPath = [focusBlockPath[0] + 1]\n\n      Transforms.insertNodes(editor, block, {at: nextPath})\n      Transforms.select(editor, {\n        anchor: {path: [nextPath[0], 0], offset: 0},\n        focus: {path: [nextPath[0], 0], offset: 0},\n      })\n    } else if (placement === 'before') {\n      Transforms.insertNodes(editor, block, {at: focusBlockPath})\n    } else {\n      Editor.insertNode(editor, block)\n    }\n\n    if (focusBlock && isEqualToEmptyEditor([focusBlock], schema)) {\n      Transforms.removeNodes(editor, {at: focusBlockPath})\n    }\n  }\n}\n","import {toSlateValue} from '../utils/values'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBlockObjectActionImplementation: BehaviorActionImplementation<\n  'insert.block object'\n> = ({context, action}) => {\n  const block = toSlateValue(\n    [\n      {\n        _key: context.keyGenerator(),\n        _type: action.blockObject.name,\n        ...(action.blockObject.value ? action.blockObject.value : {}),\n      },\n    ],\n    {schemaTypes: context.schema},\n  )[0]\n\n  insertBlock({\n    block,\n    placement: action.placement,\n    editor: action.editor,\n    schema: context.schema,\n  })\n}\n","import {isEqual} from 'lodash'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBreakActionImplementation: BehaviorActionImplementation<\n  'insert.break'\n> = ({context, action}) => {\n  const keyGenerator = context.keyGenerator\n  const schema = context.schema\n  const editor = action.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  const [focusSpan] = Array.from(\n    Editor.nodes(editor, {\n      mode: 'lowest',\n      at: editor.selection.focus,\n      match: (n) => editor.isTextSpan(n),\n      voids: false,\n    }),\n  )[0] ?? [undefined]\n  const focusDecorators =\n    focusSpan?.marks?.filter((mark) =>\n      schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n  const focusAnnotations =\n    focusSpan?.marks?.filter(\n      (mark) =>\n        !schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n\n  const anchorBlockPath = editor.selection.anchor.path.slice(0, 1)\n  const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n  const focusBlock = Node.descendant(editor, focusBlockPath) as\n    | SlateTextBlock\n    | VoidElement\n\n  if (editor.isTextBlock(focusBlock)) {\n    const [start, end] = Range.edges(editor.selection)\n    const lastFocusBlockChild =\n      focusBlock.children[focusBlock.children.length - 1]\n    const atTheEndOfBlock = isEqual(start, {\n      path: [...focusBlockPath, focusBlock.children.length - 1],\n      offset: editor.isTextSpan(lastFocusBlockChild)\n        ? lastFocusBlockChild.text.length\n        : 0,\n    })\n    const atTheStartOfBlock = isEqual(end, {\n      path: [...focusBlockPath, 0],\n      offset: 0,\n    })\n\n    if (atTheEndOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      return\n    }\n\n    if (atTheStartOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: focusAnnotations.length === 0 ? focusDecorators : [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      const [nextBlockPath] = Path.next(focusBlockPath)\n\n      Transforms.select(editor, {\n        anchor: {path: [nextBlockPath, 0], offset: 0},\n        focus: {path: [nextBlockPath, 0], offset: 0},\n      })\n\n      return\n    }\n\n    const selectionAcrossBlocks = anchorBlockPath[0] !== focusBlockPath[0]\n\n    const isInTheMiddleOfNode = !atTheStartOfBlock && !atTheEndOfBlock\n\n    if (isInTheMiddleOfNode && !selectionAcrossBlocks) {\n      Editor.withoutNormalizing(editor, () => {\n        if (!editor.selection) {\n          return\n        }\n\n        Transforms.splitNodes(editor, {\n          at: editor.selection,\n        })\n\n        const [nextNode, nextNodePath] = Editor.node(\n          editor,\n          Path.next(focusBlockPath),\n          {depth: 1},\n        )\n\n        Transforms.setSelection(editor, {\n          anchor: {path: [...nextNodePath, 0], offset: 0},\n          focus: {path: [...nextNodePath, 0], offset: 0},\n        })\n\n        /**\n         * Assign new keys to markDefs that are now split across two blocks\n         */\n        if (\n          editor.isTextBlock(nextNode) &&\n          nextNode.markDefs &&\n          nextNode.markDefs.length > 0\n        ) {\n          const newMarkDefKeys = new Map<string, string>()\n\n          const prevNodeSpans = Array.from(\n            Node.children(editor, focusBlockPath),\n          )\n            .map((entry) => entry[0])\n            .filter((node) => editor.isTextSpan(node))\n          const children = Node.children(editor, nextNodePath)\n\n          for (const [child, childPath] of children) {\n            if (!editor.isTextSpan(child)) {\n              continue\n            }\n\n            const marks = child.marks ?? []\n\n            // Go through the marks of the span and figure out if any of\n            // them refer to annotations that are also present in the\n            // previous block\n            for (const mark of marks) {\n              if (\n                schema.decorators.some((decorator) => decorator.value === mark)\n              ) {\n                continue\n              }\n\n              if (\n                prevNodeSpans.some((prevNodeSpan) =>\n                  prevNodeSpan.marks?.includes(mark),\n                ) &&\n                !newMarkDefKeys.has(mark)\n              ) {\n                // This annotation is both present in the previous block\n                // and this block, so let's assign a new key to it\n                newMarkDefKeys.set(mark, keyGenerator())\n              }\n            }\n\n            const newMarks = marks.map(\n              (mark) => newMarkDefKeys.get(mark) ?? mark,\n            )\n\n            // No need to update the marks if they are the same\n            if (!isEqual(marks, newMarks)) {\n              Transforms.setNodes(\n                editor,\n                {marks: newMarks},\n                {\n                  at: childPath,\n                },\n              )\n            }\n          }\n\n          // Time to update all the markDefs that need a new key because\n          // they've been split across blocks\n          const newMarkDefs = nextNode.markDefs.map((markDef) => ({\n            ...markDef,\n            _key: newMarkDefKeys.get(markDef._key) ?? markDef._key,\n          }))\n\n          // No need to update the markDefs if they are the same\n          if (!isEqual(nextNode.markDefs, newMarkDefs)) {\n            Transforms.setNodes(\n              editor,\n              {markDefs: newMarkDefs},\n              {\n                at: nextNodePath,\n                match: (node) => editor.isTextBlock(node),\n              },\n            )\n          }\n        }\n      })\n      editor.onChange()\n      return\n    }\n  }\n\n  Transforms.splitNodes(editor, {always: true})\n}\n\nexport const insertSoftBreakActionImplementation: BehaviorActionImplementation<\n  'insert.soft break'\n> = ({context, action}) => {\n  // This mimics Slate's internal which also just does a regular insert break\n  // when soft-breaking\n  insertBreakActionImplementation({\n    context,\n    action: {...action, type: 'insert.break'},\n  })\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {toSlateValue} from '../utils/values'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertInlineObjectActionImplementation: BehaviorActionImplementation<\n  'insert.inline object'\n> = ({context, action}) => {\n  if (\n    !context.schema.inlineObjects.some(\n      (inlineObject) => inlineObject.name === action.inlineObject.name,\n    )\n  ) {\n    console.error('Unable to insert unknown inline object')\n    return\n  }\n\n  if (!action.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [\n          {\n            _type: action.inlineObject.name,\n            _key: context.keyGenerator(),\n            ...(action.inlineObject.value ?? {}),\n          },\n        ],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(action.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertSpanActionImplementation: BehaviorActionImplementation<\n  'insert.span'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    console.error('Unable to perform action without selection', action)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', action)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = action.annotations\n    ? action.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(action.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(action.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: action.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(action.decorators ?? []),\n    ],\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const textBlockSetActionImplementation: BehaviorActionImplementation<\n  'text block.set'\n> = ({action}) => {\n  const at = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )!\n\n  Transforms.setNodes(\n    action.editor,\n    {\n      ...(action.style ? {style: action.style} : {}),\n      ...(action.listItem ? {listItem: action.listItem} : {}),\n      ...(action.level ? {level: action.level} : {}),\n    },\n    {at},\n  )\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const textBlockUnsetActionImplementation: BehaviorActionImplementation<\n  'text block.unset'\n> = ({action}) => {\n  const at = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )!\n\n  Transforms.unsetNodes(action.editor, action.props, {at})\n}\n","import {\n  deleteBackward,\n  deleteForward,\n  insertText,\n  Path,\n  Transforms,\n} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  BehaviorAction,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {\n  addAnnotationActionImplementation,\n  removeAnnotationActionImplementation,\n  toggleAnnotationActionImplementation,\n} from '../editor/plugins/createWithEditableAPI'\nimport {\n  addDecoratorActionImplementation,\n  removeDecoratorActionImplementation,\n  toggleDecoratorActionImplementation,\n} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {blockOffsetToSpanSelectionPoint} from '../editor/utils/utils.block-offset'\nimport type {PickFromUnion} from '../type-utils'\nimport debug from '../utils/debug'\nimport {toSlatePath} from '../utils/paths'\nimport {toSlateRange} from '../utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport {insertBlockObjectActionImplementation} from './behavior.action.insert-block-object'\nimport {\n  insertBreakActionImplementation,\n  insertSoftBreakActionImplementation,\n} from './behavior.action.insert-break'\nimport {insertInlineObjectActionImplementation} from './behavior.action.insert-inline-object'\nimport {insertSpanActionImplementation} from './behavior.action.insert-span'\nimport {\n  addListItemActionImplementation,\n  removeListItemActionImplementation,\n  toggleListItemActionImplementation,\n} from './behavior.action.list-item'\nimport {\n  addStyleActionImplementation,\n  removeStyleActionImplementation,\n  toggleStyleActionImplementation,\n} from './behavior.action.style'\nimport {textBlockSetActionImplementation} from './behavior.action.text-block.set'\nimport {textBlockUnsetActionImplementation} from './behavior.action.text-block.unset'\n\nexport type BehaviorActionImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorActionImplementation<\n  TBehaviorActionType extends BehaviorAction['type'],\n  TReturnType = void,\n> = ({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<BehaviorAction, 'type', TBehaviorActionType>\n}) => TReturnType\n\ntype BehaviorActionImplementations = {\n  [TBehaviorActionType in BehaviorAction['type']]: BehaviorActionImplementation<TBehaviorActionType>\n}\n\nconst behaviorActionImplementations: BehaviorActionImplementations = {\n  'annotation.add': addAnnotationActionImplementation,\n  'annotation.remove': removeAnnotationActionImplementation,\n  'annotation.toggle': toggleAnnotationActionImplementation,\n  'blur': ({action}) => {\n    ReactEditor.blur(action.editor)\n  },\n  'decorator.add': addDecoratorActionImplementation,\n  'decorator.remove': removeDecoratorActionImplementation,\n  'decorator.toggle': toggleDecoratorActionImplementation,\n  'focus': ({action}) => {\n    ReactEditor.focus(action.editor)\n  },\n  'delete.backward': ({action}) => {\n    deleteBackward(action.editor, action.unit)\n  },\n  'delete.forward': ({action}) => {\n    deleteForward(action.editor, action.unit)\n  },\n  'delete.block': ({action}) => {\n    const range = toSlateRange(\n      {\n        anchor: {path: action.blockPath, offset: 0},\n        focus: {path: action.blockPath, offset: 0},\n      },\n      action.editor,\n    )\n\n    if (!range) {\n      console.error('Unable to find Slate range from selection points')\n      return\n    }\n\n    Transforms.removeNodes(action.editor, {\n      at: range,\n    })\n  },\n  'delete.text': ({context, action}) => {\n    const value = fromSlateValue(\n      action.editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(action.editor),\n    )\n\n    const anchor = blockOffsetToSpanSelectionPoint({\n      value,\n      blockOffset: action.anchor,\n    })\n    const focus = blockOffsetToSpanSelectionPoint({\n      value,\n      blockOffset: action.focus,\n    })\n\n    if (!anchor || !focus) {\n      console.error('Unable to find anchor or focus selection point')\n      return\n    }\n\n    const range = toSlateRange(\n      {\n        anchor,\n        focus,\n      },\n      action.editor,\n    )\n\n    if (!range) {\n      console.error('Unable to find Slate range from selection points')\n      return\n    }\n\n    Transforms.delete(action.editor, {\n      at: range,\n    })\n  },\n  'insert.block object': insertBlockObjectActionImplementation,\n  'insert.break': insertBreakActionImplementation,\n  'insert.inline object': insertInlineObjectActionImplementation,\n  'insert.soft break': insertSoftBreakActionImplementation,\n  'insert.span': insertSpanActionImplementation,\n  'insert.text': ({action}) => {\n    insertText(action.editor, action.text)\n  },\n  'insert.text block': ({context, action}) => {\n    const block = toSlateValue(\n      [\n        {\n          _key: context.keyGenerator(),\n          _type: context.schema.block.name,\n          style: context.schema.styles[0].value ?? 'normal',\n          markDefs: [],\n          children: action.textBlock?.children?.map((child) => ({\n            ...child,\n            _key: context.keyGenerator(),\n          })) ?? [\n            {\n              _type: context.schema.span.name,\n              _key: context.keyGenerator(),\n              text: '',\n            },\n          ],\n        },\n      ],\n      {schemaTypes: context.schema},\n    )[0]\n\n    insertBlock({\n      block,\n      editor: action.editor,\n      schema: context.schema,\n      placement: action.placement,\n    })\n  },\n  'effect': ({action}) => {\n    action.effect()\n  },\n  'list item.add': addListItemActionImplementation,\n  'list item.remove': removeListItemActionImplementation,\n  'list item.toggle': toggleListItemActionImplementation,\n  'move.block': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n    const to = [toSlatePath(action.to, action.editor)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'move.block down': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n    const to = [Path.next(at)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'move.block up': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n\n    if (!Path.hasPrevious(at)) {\n      return\n    }\n\n    const to = [Path.previous(at)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'noop': () => {},\n  'select': ({action}) => {\n    const newSelection = toSlateRange(action.selection, action.editor)\n\n    if (newSelection) {\n      Transforms.select(action.editor, newSelection)\n    } else {\n      Transforms.deselect(action.editor)\n    }\n  },\n  'select.previous block': ({action}) => {\n    if (!action.editor.selection) {\n      console.error('Unable to select previous block without a selection')\n      return\n    }\n\n    const blockPath = action.editor.selection.focus.path.slice(0, 1)\n\n    if (!Path.hasPrevious(blockPath)) {\n      console.error(\"There's no previous block to select\")\n      return\n    }\n\n    const previousBlockPath = Path.previous(blockPath)\n\n    Transforms.select(action.editor, previousBlockPath)\n  },\n  'select.next block': ({action}) => {\n    if (!action.editor.selection) {\n      console.error('Unable to select next block without a selection')\n      return\n    }\n\n    const blockPath = action.editor.selection.focus.path.slice(0, 1)\n    const nextBlockPath = [blockPath[0] + 1]\n\n    Transforms.select(action.editor, nextBlockPath)\n  },\n  'reselect': ({action}) => {\n    const selection = action.editor.selection\n\n    if (selection) {\n      Transforms.select(action.editor, {...selection})\n      action.editor.selection = {...selection}\n    }\n  },\n  'style.toggle': toggleStyleActionImplementation,\n  'style.add': addStyleActionImplementation,\n  'style.remove': removeStyleActionImplementation,\n  'text block.set': textBlockSetActionImplementation,\n  'text block.unset': textBlockUnsetActionImplementation,\n}\n\nexport function performAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: BehaviorAction\n}) {\n  debug('Behavior action', action)\n\n  switch (action.type) {\n    case 'delete.block': {\n      behaviorActionImplementations['delete.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.text': {\n      behaviorActionImplementations['delete.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.span': {\n      behaviorActionImplementations['insert.span']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text block': {\n      behaviorActionImplementations['insert.text block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.add': {\n      behaviorActionImplementations['list item.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.remove': {\n      behaviorActionImplementations['list item.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block': {\n      behaviorActionImplementations['move.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block down': {\n      behaviorActionImplementations['move.block down']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block up': {\n      behaviorActionImplementations['move.block up']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'noop': {\n      behaviorActionImplementations.noop({\n        context,\n        action,\n      })\n      break\n    }\n    case 'effect': {\n      behaviorActionImplementations.effect({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select': {\n      behaviorActionImplementations.select({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select.previous block': {\n      behaviorActionImplementations['select.previous block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select.next block': {\n      behaviorActionImplementations['select.next block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'reselect': {\n      behaviorActionImplementations.reselect({\n        context,\n        action,\n      })\n      break\n    }\n    case 'style.add': {\n      behaviorActionImplementations['style.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'style.remove': {\n      behaviorActionImplementations['style.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'text block.set': {\n      behaviorActionImplementations['text block.set']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'text block.unset': {\n      behaviorActionImplementations['text block.unset']({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      performDefaultAction({context, action})\n    }\n  }\n}\n\nfunction performDefaultAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<BehaviorAction, 'type', SyntheticBehaviorEvent['type']>\n}) {\n  switch (action.type) {\n    case 'annotation.add': {\n      behaviorActionImplementations['annotation.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.remove': {\n      behaviorActionImplementations['annotation.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.toggle': {\n      behaviorActionImplementations['annotation.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'blur': {\n      behaviorActionImplementations.blur({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.add': {\n      behaviorActionImplementations['decorator.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.remove': {\n      behaviorActionImplementations['decorator.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.toggle': {\n      behaviorActionImplementations['decorator.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.backward': {\n      behaviorActionImplementations['delete.backward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.forward': {\n      behaviorActionImplementations['delete.forward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'focus': {\n      behaviorActionImplementations.focus({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.block object': {\n      behaviorActionImplementations['insert.block object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.inline object': {\n      behaviorActionImplementations['insert.inline object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.break': {\n      behaviorActionImplementations['insert.break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.soft break': {\n      behaviorActionImplementations['insert.soft break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text': {\n      behaviorActionImplementations['insert.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.toggle': {\n      behaviorActionImplementations['list item.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      behaviorActionImplementations['style.toggle']({\n        context,\n        action,\n      })\n    }\n  }\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {Editor} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport {performAction} from '../behavior-actions/behavior.actions'\nimport {coreBehaviors} from '../behaviors/behavior.core'\nimport type {\n  Behavior,\n  BehaviorAction,\n  BehaviorActionIntend,\n  NativeBehaviorEvent,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {\n  EditorSelection,\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport debug from '../utils/debug'\nimport {toPortableTextRange} from '../utils/ranges'\nimport {fromSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {EditorSchema} from './define-schema'\nimport type {EditorContext} from './editor-snapshot'\n\nexport * from 'xstate/guards'\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\n\n/**\n * @internal\n */\nexport type PatchEvent = {type: 'patch'; patch: Patch}\n\n/**\n * @internal\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @internal\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | {type: 'normalizing'}\n  | {type: 'done normalizing'}\n  | {\n      type: 'behavior event'\n      behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | {\n      type: 'behavior action intends'\n      editor: PortableTextSlateEditor\n      actionIntends: Array<BehaviorActionIntend>\n    }\n  | {\n      type: 'update schema'\n      schema: EditorSchema\n    }\n  | {\n      type: 'update behaviors'\n      behaviors: Array<Behavior>\n    }\n  | {\n      type: 'update value'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'toggle readOnly'\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | OmitFromUnion<InternalEditorEmittedEvent, 'type', 'readOnly toggled'>\n\n/**\n * @alpha\n */\nexport type EditorEmittedEvent = PickFromUnion<\n  InternalEditorEmittedEvent,\n  'type',\n  | 'blurred'\n  | 'done loading'\n  | 'error'\n  | 'focused'\n  | 'invalid value'\n  | 'loading'\n  | 'mutation'\n  | 'patch'\n  | 'readOnly toggled'\n  | 'ready'\n  | 'selection'\n  | 'value changed'\n>\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | {type: 'ready'}\n  | PatchEvent\n  | PatchesEvent\n  | MutationEvent\n  | {\n      type: 'unset'\n      previousValue: Array<PortableTextBlock>\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'error'\n      name: string\n      description: string\n      data: unknown\n    }\n  | {type: 'selection'; selection: EditorSelection}\n  | {type: 'blurred'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'focused'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'loading'}\n  | {type: 'done loading'}\n  | {type: 'readOnly toggled'; readOnly: boolean}\n  | PickFromUnion<\n      SyntheticBehaviorEvent,\n      'type',\n      | 'annotation.add'\n      | 'annotation.remove'\n      | 'annotation.toggle'\n      | 'blur'\n      | 'decorator.add'\n      | 'decorator.remove'\n      | 'decorator.toggle'\n      | 'insert.block object'\n      | 'insert.inline object'\n      | 'list item.toggle'\n      | 'focus'\n      | 'style.toggle'\n    >\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Array<Behavior>\n      keyGenerator: () => string\n      pendingEvents: Array<PatchEvent | MutationEvent>\n      schema: EditorSchema\n      readOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      value: Array<PortableTextBlock> | undefined\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      behaviors?: Array<Behavior>\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      value?: Array<PortableTextBlock>\n    },\n  },\n  actions: {\n    'assign behaviors': assign({\n      behaviors: ({event}) => {\n        assertEvent(event, 'update behaviors')\n        return event.behaviors\n      },\n    }),\n    'assign schema': assign({\n      schema: ({event}) => {\n        assertEvent(event, 'update schema')\n        return event.schema\n      },\n    }),\n    'emit patch event': emit(({event}) => {\n      assertEvent(event, 'patch')\n      return event\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue(emit(event))\n      }\n    }),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'handle behavior event': enqueueActions(({context, event, enqueue}) => {\n      assertEvent(event, ['behavior event'])\n\n      debug('Behavior event', event)\n\n      const defaultAction =\n        event.behaviorEvent.type === 'copy' ||\n        event.behaviorEvent.type === 'key.down' ||\n        event.behaviorEvent.type === 'key.up' ||\n        event.behaviorEvent.type === 'paste'\n          ? undefined\n          : ({\n              ...event.behaviorEvent,\n              editor: event.editor,\n            } satisfies BehaviorAction)\n\n      const eventBehaviors = context.behaviors.filter(\n        (behavior) => behavior.on === event.behaviorEvent.type,\n      )\n\n      if (eventBehaviors.length === 0) {\n        if (!defaultAction) {\n          return\n        }\n\n        enqueue.raise({\n          type: 'behavior action intends',\n          editor: event.editor,\n          actionIntends: [defaultAction],\n        })\n        return\n      }\n\n      const value = fromSlateValue(\n        event.editor.children,\n        context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(event.editor),\n      )\n      const selection = toPortableTextRange(\n        value,\n        event.editor.selection,\n        context.schema,\n      )\n\n      const editorContext = {\n        keyGenerator: context.keyGenerator,\n        schema: context.schema,\n        selection,\n        value,\n      } satisfies EditorContext\n\n      let behaviorOverwritten = false\n\n      for (const eventBehavior of eventBehaviors) {\n        const shouldRun =\n          eventBehavior.guard === undefined ||\n          eventBehavior.guard({\n            context: editorContext,\n            event: event.behaviorEvent,\n          })\n\n        if (!shouldRun) {\n          continue\n        }\n\n        const actionIntendSets = eventBehavior.actions.map((actionSet) =>\n          actionSet(\n            {context: editorContext, event: event.behaviorEvent},\n            shouldRun,\n          ),\n        )\n\n        for (const actionIntends of actionIntendSets) {\n          behaviorOverwritten =\n            behaviorOverwritten ||\n            (actionIntends.length > 0 &&\n              actionIntends.some(\n                (actionIntend) => actionIntend.type !== 'effect',\n              ))\n\n          enqueue.raise({\n            type: 'behavior action intends',\n            editor: event.editor,\n            actionIntends,\n          })\n        }\n\n        if (behaviorOverwritten) {\n          event.nativeEvent?.preventDefault()\n          break\n        }\n      }\n\n      if (!behaviorOverwritten) {\n        if (!defaultAction) {\n          return\n        }\n\n        enqueue.raise({\n          type: 'behavior action intends',\n          editor: event.editor,\n          actionIntends: [defaultAction],\n        })\n      }\n    }),\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: input.behaviors ?? coreBehaviors,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n    selection: null,\n    readOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    value: input.value,\n  }),\n  on: {\n    'annotation.add': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'annotation.remove': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'annotation.toggle': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'blur': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'decorator.*': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'focus': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'insert.*': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'list item.*': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'style.*': {\n      actions: emit(({event}) => event),\n      guard: ({context}) => !context.readOnly,\n    },\n    'ready': {actions: emit(({event}) => event)},\n    'unset': {actions: emit(({event}) => event)},\n    'value changed': {actions: emit(({event}) => event)},\n    'invalid value': {actions: emit(({event}) => event)},\n    'error': {actions: emit(({event}) => event)},\n    'selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => event),\n      ],\n    },\n    'blurred': {actions: emit(({event}) => event)},\n    'focused': {actions: emit(({event}) => event)},\n    'loading': {actions: emit({type: 'loading'})},\n    'patches': {actions: emit(({event}) => event)},\n    'done loading': {actions: emit({type: 'done loading'})},\n    'update behaviors': {actions: 'assign behaviors'},\n    'update schema': {actions: 'assign schema'},\n    'update value': {actions: assign({value: ({event}) => event.value})},\n    'toggle readOnly': {\n      actions: [\n        assign({readOnly: ({context}) => !context.readOnly}),\n        emit(({context}) => ({\n          type: 'readOnly toggled',\n          readOnly: context.readOnly,\n        })),\n      ],\n    },\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n    'behavior event': {\n      actions: 'handle behavior event',\n      guard: ({context}) => !context.readOnly,\n    },\n    'behavior action intends': {\n      actions: [\n        ({context, event}) => {\n          Editor.withoutNormalizing(event.editor, () => {\n            for (const actionIntend of event.actionIntends) {\n              const action = {\n                ...actionIntend,\n                editor: event.editor,\n              }\n\n              performAction({context, action})\n            }\n          })\n          event.editor.onChange()\n        },\n        enqueueActions(({context, event, enqueue}) => {\n          if (\n            event.actionIntends.some(\n              (actionIntend) => actionIntend.type === 'reselect',\n            )\n          ) {\n            enqueue.raise({\n              type: 'selection',\n              selection: toPortableTextRange(\n                event.editor.children,\n                event.editor.selection,\n                context.schema,\n              ),\n            })\n          }\n        }),\n      ],\n    },\n  },\n  initial: 'pristine',\n  states: {\n    pristine: {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            normalizing: {\n              target: 'normalizing',\n            },\n            patch: {\n              actions: 'defer event',\n              target: '#editor.dirty',\n            },\n            mutation: {\n              actions: 'defer event',\n              target: '#editor.dirty',\n            },\n          },\n        },\n        normalizing: {\n          on: {\n            'done normalizing': {\n              target: 'idle',\n            },\n            'patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n          },\n        },\n      },\n    },\n    dirty: {\n      entry: ['emit pending events', 'clear pending events'],\n      on: {\n        patch: {\n          actions: 'emit patch event',\n        },\n        mutation: {\n          actions: 'emit mutation event',\n        },\n      },\n    },\n  },\n})\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  PortableTextBlock,\n} from '@sanity/types'\nimport {useActorRef} from '@xstate/react'\nimport {useMemo} from 'react'\nimport {\n  createActor,\n  type ActorRef,\n  type EventObject,\n  type Snapshot,\n} from 'xstate'\nimport type {Behavior} from '../behaviors/behavior.types'\nimport type {PickFromUnion} from '../type-utils'\nimport type {EditableAPI} from '../types/editor'\nimport {compileType} from '../utils/schema'\nimport {createEditorSchema} from './create-editor-schema'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport {compileSchemaDefinition, type SchemaDefinition} from './define-schema'\nimport {\n  editorMachine,\n  type EditorActor,\n  type EditorEmittedEvent,\n  type InternalEditorEvent,\n} from './editor-machine'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\n\n/**\n * @alpha\n */\nexport type EditorConfig = {\n  behaviors?: Array<Behavior>\n  keyGenerator?: () => string\n  maxBlocks?: number\n  readOnly?: boolean\n  initialValue?: Array<PortableTextBlock>\n} & (\n  | {\n      schemaDefinition: SchemaDefinition\n      schema?: undefined\n    }\n  | {\n      schemaDefinition?: undefined\n      schema: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n    }\n)\n\n/**\n * @alpha\n */\nexport type EditorEvent = PickFromUnion<\n  InternalEditorEvent,\n  'type',\n  | 'annotation.toggle'\n  | 'blur'\n  | 'decorator.add'\n  | 'decorator.remove'\n  | 'decorator.toggle'\n  | 'focus'\n  | 'insert.block object'\n  | 'insert.inline object'\n  | 'list item.toggle'\n  | 'style.toggle'\n  | 'patches'\n  | 'toggle readOnly'\n  | 'update behaviors'\n  | 'update value'\n>\n\n/**\n * @alpha\n */\nexport type Editor = {\n  send: (event: EditorEvent) => void\n  on: ActorRef<Snapshot<unknown>, EventObject, EditorEmittedEvent>['on']\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createEditor(config: EditorConfig): Editor {\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  editorActor.start()\n\n  return createEditorFromActor(editorActor)\n}\n\nexport function useCreateEditor(config: EditorConfig): Editor {\n  const editorActor = useActorRef(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n\n  return useMemo(() => createEditorFromActor(editorActor), [editorActor])\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  return {\n    behaviors: config.behaviors,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema: config.schemaDefinition\n      ? compileSchemaDefinition(config.schemaDefinition)\n      : createEditorSchema(\n          config.schema.hasOwnProperty('jsonType')\n            ? config.schema\n            : compileType(config.schema),\n        ),\n    value: config.initialValue,\n  } as const\n}\n\nfunction createEditorFromActor(editorActor: EditorActor): Editor {\n  const slateEditor = createSlateEditor({editorActor})\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n\n  return {\n    send: (event) => {\n      editorActor.send(event)\n    },\n    on: (event, listener) =>\n      editorActor.on(\n        event,\n        // @ts-expect-error\n        listener,\n      ),\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  }\n}\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport type {EditorSelection} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {compileType} from '../utils/schema'\nimport {Synchronizer} from './components/Synchronizer'\nimport {createEditor, type Editor} from './create-editor'\nimport {createEditorSchema} from './create-editor-schema'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {defaultKeyGenerator} from './key-generator'\nimport type {AddedAnnotationPaths} from './plugins/createWithEditableAPI'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\nexport type PortableTextEditorProps<\n  TEditor extends Editor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends Editor\n    ? {\n        /**\n         * @alpha\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<Editor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: Editor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as Editor\n    } else {\n      this.editor = createEditor({\n        keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n        schema: props.schemaType,\n        initialValue: props.value,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n      })\n    }\n\n    this.schemaTypes =\n      this.editor._internal.editorActor.getSnapshot().context.schema\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      this.schemaTypes = createEditorSchema(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType),\n      )\n\n      this.editor._internal.editorActor.send({\n        type: 'update schema',\n        schema: this.schemaTypes,\n      })\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'toggle readOnly',\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor._internal.editorActor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <RouteEventsToChanges\n          editorActor={this.editor._internal.editorActor}\n          onChange={(change) => {\n            if (!this.props.editor) {\n              this.props.onChange(change)\n            }\n            /**\n             * For backwards compatibility, we relay all changes to the\n             * `change$` Subject as well.\n             */\n            this.change$.next(change)\n          }}\n        />\n        <Synchronizer\n          editorActor={this.editor._internal.editorActor}\n          getValue={this.editor._internal.editable.getValue}\n          portableTextEditor={this}\n          slateEditor={this.editor._internal.slateEditor.instance}\n        />\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <Slate\n            editor={this.editor._internal.slateEditor.instance}\n            initialValue={this.editor._internal.slateEditor.initialValue}\n          >\n            <PortableTextEditorContext.Provider value={this}>\n              <PortableTextEditorSelectionProvider\n                editorActor={this.editor._internal.editorActor}\n              >\n                {this.props.children}\n              </PortableTextEditorSelectionProvider>\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  // Static API methods\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    debug(`Host getting fragment`)\n    return editor.editable?.getFragment()\n  }\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n\nexport function RouteEventsToChanges(props: {\n  editorActor: EditorActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    debug('Subscribing to editor changes')\n    const sub = props.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'blurred': {\n          handleChange({type: 'blur', event: event.event})\n          break\n        }\n        case 'patch':\n          handleChange(event)\n          break\n        case 'loading': {\n          handleChange({type: 'loading', isLoading: true})\n          break\n        }\n        case 'done loading': {\n          handleChange({type: 'loading', isLoading: false})\n          break\n        }\n        case 'focused': {\n          handleChange({type: 'focus', event: event.event})\n          break\n        }\n        case 'value changed': {\n          handleChange({type: 'value', value: event.value})\n          break\n        }\n        case 'invalid value': {\n          handleChange({\n            type: 'invalidValue',\n            resolution: event.resolution,\n            value: event.value,\n          })\n          break\n        }\n        case 'error': {\n          handleChange({\n            ...event,\n            level: 'warning',\n          })\n          break\n        }\n        case 'annotation.add':\n        case 'annotation.remove':\n        case 'annotation.toggle':\n        case 'blur':\n        case 'decorator.add':\n        case 'decorator.remove':\n        case 'decorator.toggle':\n        case 'focus':\n        case 'insert.block object':\n        case 'insert.inline object':\n        case 'list item.toggle':\n        case 'style.toggle':\n        case 'patches':\n        case 'readOnly toggled':\n          break\n        default:\n          handleChange(event)\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes')\n      sub.unsubscribe()\n    }\n  }, [props.editorActor, handleChange])\n\n  return null\n}\n","import type {\n  Path,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {Text} from 'slate'\nimport {useSelected, type RenderLeafProps} from 'slate-react'\nimport type {\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n  BlockDecoratorRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {DefaultAnnotation} from '../nodes/DefaultAnnotation'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  editorActor: EditorActor\n  children: ReactElement<any>\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation,\n  } = props\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key],\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators],\n  )\n  const marks: string[] = useMemo(\n    () =>\n      uniq(\n        (leaf.marks || EMPTY_MARKS).filter((mark) =>\n          decoratorValues.includes(mark),\n        ),\n      ),\n    [decoratorValues, leaf.marks],\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) &&\n            block?.markDefs?.find((def) => def._key === mark),\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues],\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blur', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focus', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find(\n          (dec) => dec.value === mark,\n        )\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                children: returnedChildren,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                selected,\n                schemaType,\n                value: mark,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaType\n                },\n              },\n            )\n          returnedChildren = renderDecorator(\n            _props as BlockDecoratorRenderProps,\n          )\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find(\n            (t) => t.name === annotation._type,\n          )\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> =\n                Object.defineProperty(\n                  {\n                    block,\n                    children: returnedChildren,\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    selected,\n                    schemaType,\n                    value: annotation,\n                  },\n                  'type',\n                  {\n                    enumerable: false,\n                    get() {\n                      console.warn(\n                        \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                      )\n                      return schemaType\n                    },\n                  },\n                )\n\n              returnedChildren = (\n                <span ref={spanRef}>\n                  {renderAnnotation(_props as BlockAnnotationRenderProps)}\n                </span>\n              )\n            } else {\n              returnedChildren = (\n                <DefaultAnnotation annotation={annotation}>\n                  <span ref={spanRef}>{returnedChildren}</span>\n                </DefaultAnnotation>\n              )\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                annotations,\n                children: defaultRendered,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                schemaType: schemaTypes.span,\n                selected,\n                value: child,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaTypes.span\n                },\n              },\n            )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content],\n  )\n}\n\nLeaf.displayName = 'Leaf'\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport {debugWithName} from '../../utils/debug'\nimport {isHotkey} from '../../utils/is-hotkey'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\nconst DEFAULT_HOTKEYS: HotkeyOptions = {\n  marks: {\n    'mod+b': 'strong',\n    'mod+i': 'em',\n    'mod+u': 'underline',\n    \"mod+'\": 'code',\n  },\n  custom: {},\n}\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS // TODO: Merge where possible? A union?\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import {htmlToBlocks, normalizeBlock} from '@sanity/block-tools'\nimport type {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Range, Transforms, type Descendant, type Node} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {validateValue} from '../../utils/validateValue'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../../utils/values'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withInsertData')\n\n/**\n * This plugin handles copy/paste in the editor\n *\n */\nexport function createWithInsertData(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withInsertData(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const blockTypeName = schemaTypes.block.name\n    const spanTypeName = schemaTypes.span.name\n    const whitespaceOnPasteMode =\n      schemaTypes.block.options.unstable_whitespaceOnPasteMode\n\n    const toPlainText = (blocks: PortableTextBlock[]) => {\n      return blocks\n        .map((block) => {\n          if (editor.isTextBlock(block)) {\n            return block.children\n              .map((child: PortableTextChild) => {\n                if (child._type === spanTypeName) {\n                  return child.text\n                }\n                return `[${\n                  schemaTypes.inlineObjects.find((t) => t.name === child._type)\n                    ?.title || 'Object'\n                }]`\n              })\n              .join('')\n          }\n          return `[${\n            schemaTypes.blockObjects.find((t) => t.name === block._type)\n              ?.title || 'Object'\n          }]`\n        })\n        .join('\\n\\n')\n    }\n\n    editor.setFragmentData = (data: DataTransfer, originEvent) => {\n      const {selection} = editor\n\n      if (!selection) {\n        return\n      }\n\n      const [start, end] = Range.edges(selection)\n      const startVoid = Editor.void(editor, {at: start.path})\n      const endVoid = Editor.void(editor, {at: end.path})\n\n      if (Range.isCollapsed(selection) && !startVoid) {\n        return\n      }\n\n      // Create a fake selection so that we can add a Base64-encoded copy of the\n      // fragment to the HTML, to decode on future pastes.\n      const domRange = ReactEditor.toDOMRange(editor, selection)\n      let contents = domRange.cloneContents()\n      // COMPAT: If the end node is a void node, we need to move the end of the\n      // range from the void node's spacer span, to the end of the void node's\n      // content, since the spacer is before void's content in the DOM.\n      if (endVoid) {\n        const [voidNode] = endVoid\n        const r = domRange.cloneRange()\n        const domNode = ReactEditor.toDOMNode(editor, voidNode)\n        r.setEndAfter(domNode)\n        contents = r.cloneContents()\n      }\n      // Remove any zero-width space spans from the cloned DOM so that they don't\n      // show up elsewhere when pasted.\n      Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(\n        (zw) => {\n          const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n          zw.textContent = isNewline ? '\\n' : ''\n        },\n      )\n      // Clean up the clipboard HTML for editor spesific attributes\n      Array.from(contents.querySelectorAll('*')).forEach((elm) => {\n        elm.removeAttribute('contentEditable')\n        elm.removeAttribute('data-slate-inline')\n        elm.removeAttribute('data-slate-leaf')\n        elm.removeAttribute('data-slate-node')\n        elm.removeAttribute('data-slate-spacer')\n        elm.removeAttribute('data-slate-string')\n        elm.removeAttribute('data-slate-zero-width')\n        elm.removeAttribute('draggable')\n        for (const key in elm.attributes) {\n          if (elm.hasAttribute(key)) {\n            elm.removeAttribute(key)\n          }\n        }\n      })\n      const div = contents.ownerDocument.createElement('div')\n      div.appendChild(contents)\n      div.setAttribute('hidden', 'true')\n      contents.ownerDocument.body.appendChild(div)\n      const asHTML = div.innerHTML\n      contents.ownerDocument.body.removeChild(div)\n      const fragment = editor.getFragment()\n      const portableText = fromSlateValue(fragment, blockTypeName)\n\n      const asJSON = JSON.stringify(portableText)\n      const asPlainText = toPlainText(portableText)\n      data.clearData()\n      data.setData('text/plain', asPlainText)\n      data.setData('text/html', asHTML)\n      data.setData('application/json', asJSON)\n      data.setData('application/x-portable-text', asJSON)\n      debug('text', asPlainText)\n      data.setData(\n        'application/x-portable-text-event-origin',\n        originEvent || 'external',\n      )\n      debug('Set fragment data', asJSON, asHTML)\n    }\n\n    editor.insertPortableTextData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const pText = data.getData('application/x-portable-text')\n      const origin = data.getData('application/x-portable-text-event-origin')\n      debug(`Inserting portable text from ${origin} event`, pText)\n      if (pText) {\n        const parsed = JSON.parse(pText) as PortableTextBlock[]\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = _regenerateKeys(\n            editor,\n            toSlateValue(parsed, {schemaTypes}),\n            editorActor.getSnapshot().context.keyGenerator,\n            spanTypeName,\n            schemaTypes,\n          )\n          // Validate the result\n          const validation = validateValue(\n            parsed,\n            schemaTypes,\n            editorActor.getSnapshot().context.keyGenerator,\n          )\n          // Bail out if it's not valid\n          if (!validation.valid && !validation.resolution?.autoResolve) {\n            const errorDescription = `${validation.resolution?.description}`\n            editorActor.send({\n              type: 'error',\n              name: 'pasteError',\n              description: errorDescription,\n              data: validation,\n            })\n            debug('Invalid insert result', validation)\n            return false\n          }\n          _insertFragment(editor, slateValue, schemaTypes)\n          return true\n        }\n      }\n      return false\n    }\n\n    editor.insertTextOrHTMLData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        debug('No selection, not inserting')\n        return false\n      }\n      const html = data.getData('text/html')\n      const text = data.getData('text/plain')\n\n      if (html || text) {\n        debug('Inserting data', data)\n        let portableText: PortableTextBlock[]\n        let fragment: Node[]\n        let insertedType: string | undefined\n\n        if (html) {\n          portableText = htmlToBlocks(html, schemaTypes.portableText, {\n            unstable_whitespaceOnPasteMode: whitespaceOnPasteMode,\n          }).map((block) =>\n            normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {schemaTypes})\n          insertedType = 'HTML'\n\n          if (portableText.length === 0) {\n            return false\n          }\n        } else {\n          // plain text\n          const blocks = escapeHtml(text)\n            .split(/\\n{2,}/)\n            .map((line) =>\n              line\n                ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n                : '<p></p>',\n            )\n            .join('')\n          const textToHtml = `<html><body>${blocks}</body></html>`\n          portableText = htmlToBlocks(textToHtml, schemaTypes.portableText).map(\n            (block) => normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {\n            schemaTypes,\n          })\n          insertedType = 'text'\n        }\n\n        // Validate the result\n        const validation = validateValue(\n          portableText,\n          schemaTypes,\n          editorActor.getSnapshot().context.keyGenerator,\n        )\n\n        // Bail out if it's not valid\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\\n${validation.resolution?.description}\\nTry to insert as plain text (shift-paste) instead.`\n          editorActor.send({\n            type: 'error',\n            name: 'pasteError',\n            description: errorDescription,\n            data: validation,\n          })\n          debug('Invalid insert result', validation)\n          return false\n        }\n        debug(\n          `Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`,\n        )\n        _insertFragment(editor, fragment, schemaTypes)\n        return true\n      }\n      return false\n    }\n\n    editor.insertData = (data: DataTransfer) => {\n      if (!editor.insertPortableTextData(data)) {\n        editor.insertTextOrHTMLData(data)\n      }\n    }\n\n    editor.insertFragmentData = (data: DataTransfer): boolean => {\n      const fragment = data.getData('application/x-portable-text')\n      if (fragment) {\n        const parsed = JSON.parse(fragment)\n        editor.insertFragment(parsed)\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n\n/**\n * Shared helper function to regenerate the keys on a fragment.\n *\n * @internal\n */\nfunction _regenerateKeys(\n  editor: Pick<PortableTextSlateEditor, 'isTextBlock' | 'isTextSpan'>,\n  fragment: Descendant[],\n  keyGenerator: () => string,\n  spanTypeName: string,\n  editorTypes: Pick<PortableTextMemberSchemaTypes, 'annotations'>,\n): Descendant[] {\n  return fragment.map((node) => {\n    const newNode: Descendant = {...node}\n    // Ensure the copy has new keys\n    if (editor.isTextBlock(newNode)) {\n      const annotations = editorTypes.annotations.map((t) => t.name)\n\n      // Ensure that if there are no annotations, we remove the markDefs\n      if (annotations.length === 0) {\n        const {markDefs, ...NewNodeNoDefs} = newNode\n\n        return {...NewNodeNoDefs, _key: keyGenerator()}\n      }\n\n      // Ensure that all annotations are allowed\n      const hasForbiddenAnnotations = (newNode.markDefs || []).some((def) => {\n        return !annotations.includes(def._type)\n      })\n\n      // if they have forbidden annotations, we remove them and keep the rest\n      if (hasForbiddenAnnotations) {\n        const allowedAnnotations = (newNode.markDefs || []).filter((def) => {\n          return annotations.includes(def._type)\n        })\n\n        return {...newNode, markDefs: allowedAnnotations, _key: keyGenerator()}\n      }\n\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key\n        const newKey = keyGenerator()\n        newNode.children = newNode.children.map((child) =>\n          child._type === spanTypeName && editor.isTextSpan(child)\n            ? {\n                ...child,\n                marks:\n                  child.marks && child.marks.includes(oldKey)\n                    ? [...child.marks]\n                        .filter((mark) => mark !== oldKey)\n                        .concat(newKey)\n                    : child.marks,\n              }\n            : child,\n        )\n        return {...def, _key: newKey}\n      })\n    }\n    const nodeWithNewKeys = {...newNode, _key: keyGenerator()}\n    if (editor.isTextBlock(nodeWithNewKeys)) {\n      nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n        ...child,\n        _key: keyGenerator(),\n      }))\n    }\n    return nodeWithNewKeys as Descendant\n  })\n}\n\n/**\n * Shared helper function to insert the final fragment into the editor\n *\n * @internal\n */\nfunction _insertFragment(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  editor.withoutNormalizing(() => {\n    if (!editor.selection) {\n      return\n    }\n    // Ensure that markDefs for any annotations inside this fragment are copied over to the focused text block.\n    const [focusBlock, focusPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n    if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n      const {markDefs} = focusBlock\n      debug(\n        'Mixing markDefs of focusBlock and fragments[0] block',\n        markDefs,\n        fragment[0].markDefs,\n      )\n      if (!isEqual(markDefs, fragment[0].markDefs)) {\n        Transforms.setNodes(\n          editor,\n          {\n            markDefs: uniq([\n              ...(fragment[0].markDefs || []),\n              ...(markDefs || []),\n            ]),\n          },\n          {at: focusPath, mode: 'lowest', voids: false},\n        )\n      }\n    }\n\n    const isPasteToEmptyEditor = isEqualToEmptyEditor(\n      editor.children,\n      schemaTypes,\n    )\n\n    if (isPasteToEmptyEditor) {\n      // Special case for pasting directly into an empty editor (a placeholder block).\n      // When pasting content starting with multiple empty blocks,\n      // `editor.insertFragment` can potentially duplicate the keys of\n      // the placeholder block because of operations that happen\n      // inside `editor.insertFragment` (involves an `insert_node` operation).\n      // However by splitting the placeholder block first in this situation we are good.\n      Transforms.splitNodes(editor, {at: [0, 0]})\n      editor.insertFragment(fragment)\n      Transforms.removeNodes(editor, {at: [0]})\n    } else {\n      // All other inserts\n      editor.insertFragment(fragment)\n    }\n  })\n\n  editor.onChange()\n}\n\n/**\n * functions we don't want to export but want to test\n * @internal\n */\nexport const exportedForTesting = {\n  _regenerateKeys,\n}\n","import type {BaseEditor, Operation} from 'slate'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\n// React Compiler considers `slateEditor` as immutable, and opts-out if we do this inline in a useEffect, doing it in a function moves it out of the scope, and opts-in again for the rest of the component.\nexport function withSyncRangeDecorations(\n  slateEditor: BaseEditor & ReactEditor & PortableTextSlateEditor,\n  syncRangeDecorations: (operation?: Operation) => void,\n) {\n  const originalApply = slateEditor.apply\n  slateEditor.apply = (op: Operation) => {\n    originalApply(op)\n    if (op.type !== 'set_selection') {\n      syncRangeDecorations(op)\n    }\n  }\n  return () => {\n    slateEditor.apply = originalApply\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {isEqual, noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type CSSProperties,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {\n  Editor,\n  Node,\n  Path,\n  Range as SlateRange,\n  Transforms,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n  type Text,\n} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport {debugWithName} from '../utils/debug'\nimport {\n  moveRangeByOperation,\n  toPortableTextRange,\n  toSlateRange,\n} from '../utils/ranges'\nimport {normalizeSelection} from '../utils/selection'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../utils/values'\nimport {Element} from './components/Element'\nimport {Leaf} from './components/Leaf'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {createWithInsertData} from './plugins/createWithInsertData'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {withSyncRangeDecorations} from './withSyncRangeDecorations'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\ninterface BaseRangeWithDecoration extends BaseRange {\n  rangeDecoration: RangeDecoration\n}\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onClick,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n  const [rangeDecorationState, setRangeDecorationsState] = useState<\n    BaseRangeWithDecoration[]\n  >([])\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const rangeDecorationsRef = useRef(rangeDecorations)\n\n  const editorActor = useContext(EditorActorContext)\n  const readOnly = useSelector(editorActor, (s) => s.context.readOnly)\n  const schemaTypes = useSelector(editorActor, (s) => s.context.schema)\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    const withInsertData = createWithInsertData(editorActor, schemaTypes)\n\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return withInsertData(slateEditor)\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    debug('Editable is in edit mode')\n    return withInsertData(withHotKeys(slateEditor))\n  }, [\n    editorActor,\n    hotkeys,\n    portableTextEditor,\n    readOnly,\n    schemaTypes,\n    slateEditor,\n  ])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      schemaTypes,\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      lProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => {\n      if (lProps.leaf._type === 'span') {\n        let rendered = (\n          <Leaf\n            {...lProps}\n            editorActor={editorActor}\n            schemaTypes={schemaTypes}\n            renderAnnotation={renderAnnotation}\n            renderChild={renderChild}\n            renderDecorator={renderDecorator}\n            readOnly={readOnly}\n          />\n        )\n        if (\n          renderPlaceholder &&\n          lProps.leaf.placeholder &&\n          lProps.text.text === ''\n        ) {\n          return (\n            <>\n              <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n                {renderPlaceholder()}\n              </span>\n              {rendered}\n            </>\n          )\n        }\n        const decoration = lProps.leaf.rangeDecoration\n        if (decoration) {\n          rendered = decoration.component({children: rendered})\n        }\n        return rendered\n      }\n      return lProps.children\n    },\n    [\n      editorActor,\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n      schemaTypes,\n    ],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor])\n\n  const syncRangeDecorations = useCallback(\n    (operation?: Operation) => {\n      if (rangeDecorations && rangeDecorations.length > 0) {\n        const newSlateRanges: BaseRangeWithDecoration[] = []\n        rangeDecorations.forEach((rangeDecorationItem) => {\n          const slateRange = toSlateRange(\n            rangeDecorationItem.selection,\n            slateEditor,\n          )\n          if (!SlateRange.isRange(slateRange)) {\n            if (rangeDecorationItem.onMoved) {\n              rangeDecorationItem.onMoved({\n                newSelection: null,\n                rangeDecoration: rangeDecorationItem,\n                origin: 'local',\n              })\n            }\n            return\n          }\n          let newRange: BaseRange | null | undefined\n          if (operation) {\n            newRange = moveRangeByOperation(slateRange, operation)\n            if (\n              (newRange && newRange !== slateRange) ||\n              (newRange === null && slateRange)\n            ) {\n              const value = PortableTextEditor.getValue(portableTextEditor)\n              const newRangeSelection = toPortableTextRange(\n                value,\n                newRange,\n                schemaTypes,\n              )\n              if (rangeDecorationItem.onMoved) {\n                rangeDecorationItem.onMoved({\n                  newSelection: newRangeSelection,\n                  rangeDecoration: rangeDecorationItem,\n                  origin: 'local',\n                })\n              }\n            }\n          }\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            newSlateRanges.push({\n              ...(newRange || slateRange),\n              rangeDecoration: rangeDecorationItem,\n            })\n          }\n        })\n        if (newSlateRanges.length > 0) {\n          setRangeDecorationsState(newSlateRanges)\n          return\n        }\n      }\n      setRangeDecorationsState((rangeDecorationState) => {\n        // If there's state then we want to reset\n        if (rangeDecorationState.length > 0) {\n          return []\n        }\n        // Otherwise we no-op, React will skip a state update if what we return has reference equality to the previous state\n        return rangeDecorationState\n      })\n    },\n    [portableTextEditor, rangeDecorations, schemaTypes, slateEditor],\n  )\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      restoreSelectionFromProps()\n    })\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [editorActor, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = useState(false)\n  useEffect(() => {\n    if (!syncedRangeDecorations) {\n      // We only want this to run once, on mount\n      setSyncedRangeDecorations(true)\n      syncRangeDecorations()\n    }\n  }, [syncRangeDecorations, syncedRangeDecorations])\n\n  useEffect(() => {\n    if (!isEqual(rangeDecorations, rangeDecorationsRef.current)) {\n      syncRangeDecorations()\n    }\n    rangeDecorationsRef.current = rangeDecorations\n  }, [rangeDecorations, syncRangeDecorations])\n\n  // Sync range decorations after an operation is applied\n  useEffect(() => {\n    const teardown = withSyncRangeDecorations(slateEditor, syncRangeDecorations)\n    return () => teardown()\n  }, [slateEditor, syncRangeDecorations])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'copy',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = PortableTextEditor.getValue(portableTextEditor)\n      const ptRange = toPortableTextRange(\n        value,\n        slateEditor.selection,\n        schemaTypes,\n      )\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({event, value, path, schemaTypes})\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        editorActor.send({type: 'loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              slateEditor.insertData(event.clipboardData)\n            } else if (result.insert) {\n              slateEditor.insertFragment(\n                toSlateValue(result.insert as PortableTextBlock[], {\n                  schemaTypes,\n                }),\n              )\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.error(error)\n\n            return error\n          })\n          .finally(() => {\n            editorActor.send({type: 'done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'paste',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'focused', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, portableTextEditor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      const focusBlockPath = slateEditor.selection\n        ? slateEditor.selection.focus.path.slice(0, 1)\n        : undefined\n      const focusBlock = focusBlockPath\n        ? (Node.descendant(slateEditor, focusBlockPath) as\n            | SlateTextBlock\n            | VoidElement)\n        : undefined\n      const [_, lastNodePath] = Node.last(slateEditor, [])\n      const lastBlockPath = lastNodePath.slice(0, 1)\n      const lastNodeFocused = focusBlockPath\n        ? Path.equals(lastBlockPath, focusBlockPath)\n        : false\n      const lastBlockIsVoid = focusBlock\n        ? !slateEditor.isTextBlock(focusBlock)\n        : false\n      const collapsedSelection =\n        slateEditor.selection && SlateRange.isCollapsed(slateEditor.selection)\n\n      if (collapsedSelection && lastNodeFocused && lastBlockIsVoid) {\n        Transforms.insertNodes(\n          slateEditor,\n          slateEditor.pteCreateTextBlock({decorators: []}),\n        )\n        slateEditor.onChange()\n      }\n    },\n    [onClick, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        editorActor.send({type: 'blurred', event})\n      }\n    },\n    [editorActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.down',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.up',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate: (entry: NodeEntry) => BaseRange[] = useCallback(\n    ([, path]) => {\n      if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n        return [\n          {\n            anchor: {\n              path: [0, 0],\n              offset: 0,\n            },\n            focus: {\n              path: [0, 0],\n              offset: 0,\n            },\n            placeholder: true,\n          },\n        ]\n      }\n      // Editor node has a path length of 0 (should never be decorated)\n      if (path.length === 0) {\n        return []\n      }\n      const result = rangeDecorationState.filter((item) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (SlateRange.isCollapsed(item)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          if (path.length !== 2) {\n            return false\n          }\n          return (\n            Path.equals(item.focus.path, path) &&\n            Path.equals(item.anchor.path, path)\n          )\n        }\n        // Include decorations that either include or intersects with this path\n        return (\n          SlateRange.intersection(item, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || SlateRange.includes(item, path)\n        )\n      })\n      if (result.length > 0) {\n        return result\n      }\n      return []\n    },\n    [slateEditor, schemaTypes, rangeDecorationState],\n  )\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import React, {useMemo} from 'react'\nimport {Slate} from 'slate-react'\nimport {Synchronizer} from './components/Synchronizer'\nimport {useCreateEditor, type Editor, type EditorConfig} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {\n  PortableTextEditor,\n  RouteEventsToChanges,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\n\nconst EditorContext = React.createContext<Editor | undefined>(undefined)\n\n/**\n * @alpha\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @alpha\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const editor = useCreateEditor(props.initialConfig)\n  const editorActor = editor._internal.editorActor\n  const slateEditor = editor._internal.slateEditor\n  const editable = editor._internal.editable\n  const portableTextEditor = useMemo(\n    () =>\n      new PortableTextEditor({\n        editor,\n      } as unknown as PortableTextEditorProps),\n    [editor],\n  )\n\n  return (\n    <EditorContext.Provider value={editor}>\n      <RouteEventsToChanges\n        editorActor={editorActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <Synchronizer\n        editorActor={editorActor}\n        getValue={editable.getValue}\n        portableTextEditor={portableTextEditor}\n        slateEditor={slateEditor.instance}\n      />\n      <EditorActorContext.Provider value={editorActor}>\n        <Slate\n          editor={slateEditor.instance}\n          initialValue={slateEditor.initialValue}\n        >\n          <PortableTextEditorContext.Provider value={portableTextEditor}>\n            <PortableTextEditorSelectionProvider editorActor={editorActor}>\n              {props.children}\n            </PortableTextEditorSelectionProvider>\n          </PortableTextEditorContext.Provider>\n        </Slate>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n\n/**\n * @alpha\n */\nexport function useEditor() {\n  const editor = React.useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error('No Editor set. Use EditorProvider to set one.')\n  }\n\n  return editor\n}\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor-machine'\nimport {useEditor} from './editor-provider'\n\n/**\n * @alpha\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor, on])\n\n  return null\n}\n","import {fromSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport type {Editor} from './create-editor'\n\nexport function getValue(editor: Editor) {\n  return fromSlateValue(\n    editor._internal.slateEditor.instance.children,\n    editor._internal.editorActor.getSnapshot().context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor._internal.slateEditor.instance),\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport type {Editor} from './create-editor'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {getValue} from './get-value'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @alpha\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @alpha\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    editor._internal.editorActor,\n    (snapshot) => {\n      const context = {\n        keyGenerator: snapshot.context.keyGenerator,\n        schema: snapshot.context.schema,\n        selection: snapshot.context.selection,\n        value: getValue(editor),\n      }\n\n      return selector({context})\n    },\n    compare,\n  )\n}\n"],"names":["createEditorSchema","portableTextType","Error","blockType","of","find","findBlockType","childrenField","fields","field","name","ofType","type","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","styles","resolveEnabledStyles","decorators","resolveEnabledDecorators","lists","resolveEnabledListItems","block","span","portableText","inlineObjects","blockObjects","annotations","styleField","btField","textStyles","options","list","style","value","length","listField","listItems","defineSchema","definition","compileSchemaDefinition","map","blockObject","defineType","title","icon","inlineObject","portableTextSchema","defineField","marks","decorator","_a","startCase","annotation","schema","SanitySchema","compile","types","get","pteSchema","__spreadProps","__spreadValues","rootName","debug","debugWithName","namespace","enabled","createKeyedPath","point","blockPath","path","keyedBlockPath","_key","_type","keyedChildPath","childPath","slice","child","Array","isArray","children","toSlatePath","editor","from","Editor","nodes","at","match","n","isKeySegment","undefined","Element","isElement","isVoid","childIndex","findIndex","isEqual","concat","toPortableTextRange","range","anchor","focus","anchorPath","offset","focusPath","backward","Boolean","Range","isRange","isBackward","toSlateRange","selection","moveRangeByOperation","operation","Point","transform","equals","normalizePoint","newPath","newOffset","blockKey","childKey","blk","push","cld","text","normalizeSelection","newAnchor","newFocus","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","toSlateValue","schemaTypes","rest","voidChildren","textBlock","hasInlines","hasMissingStyle","hasMissingMarkDefs","markDefs","hasMissingChildren","cType","cKey","cRest","__inline","fromSlateValue","textBlockType","_cType","v","k","t","_i","_c","blockValue","isEqualToEmptyEditor","Text","isText","join","IS_PROCESSING_REMOTE_CHANGES","WeakMap","IS_PROCESSING_LOCAL_CHANGES","IS_DRAGGING","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","DefaultObject","props","$","t0","JSON","stringify","t1","displayName","DefaultBlockObject","styled","div","selected","DefaultListItem","getLeftPositionForListLevel","listLevel","getContentForListLevelAndStyle","listStyle","getCounterIncrementForListLevel","getCounterResetForListLevel","getCounterContentForListLevel","DefaultListItemInner","level","Number","bullets","normalizedLevel","DraggableBlock","element","readOnly","blockRef","useSlateStatic","dragGhostRef","useRef","isDragOver","setIsDragOver","useState","t2","t3","t4","isInline","blockElement","setBlockElement","t5","t6","current","ReactEditor","toDOMNode","useEffect","t7","event","isMyDragOver","preventDefault","dataTransfer","dropEffect","set","elementRect","getBoundingClientRect","top","height","Y","pageY","loc","Math","abs","handleDragOver","t8","Symbol","for","handleDragLeave","t9","event_0","targetBlock","stopPropagation","delete","document","body","removeChild","dragPosition","targetPath","findPath","myPath","isBefore","Path","originalPath","originalPath_0","Transforms","moveNodes","to","onChange","handleDragEnd","t10","event_1","handleDrop","t11","event_2","target","HTMLElement","opacity","handleDrag","t12","event_3","setData","effectAllowed","dragGhost","cloneNode","customGhost","querySelector","setAttribute","position","left","boxSizing","appendChild","rect","x","clientX","y","clientY","width","setDragImage","handleDragStart","t13","isDraggingOverFirstBlock","t14","isDraggingOverLastBlock","dragPosition_0","isDraggingOverTop","isDraggingOverBottom","t15","t16","borderBottom","zIndex","dropIndicator","t17","t18","t19","EMPTY_ANNOTATIONS","inlineBlockStyle","display","attributes","renderBlock","renderChild","renderListItem","renderStyle","spellCheck","useSelected","inlineBlockObjectRef","focused","isCollapsed","useMemo","renderedBlock","className","node","depth","schemaType","SlateElement","elmPath","debugRenders","ObjectNode","editorElementRef","isListItem","blockStyleType","item","listItem","isListBlock","listType","renderProps","Object","defineProperty","enumerable","warn","propsOrDefaultRendered","renderedBlockFromProps","_props","PortableTextEditorContext","createContext","usePortableTextEditor","useContext","DefaultAnnotation","alert","handleClick","color","compileType","rawType","Schema","validateValue","keyGenerator","resolution","valid","validChildTypes","validBlockTypes","patches","unset","description","action","i18n","some","index","isPlainObject","String","values","includes","currentBlockTypeName","key","expectedTypeName","isPortableTextTextBlock","typeName","newSpan","autoResolve","setIfMissing","insert","allUsedMarks","uniq","flatten","unusedMarkDefs","def","markDefKey","m","toString","orphanedMarks","mark","dec","spanChildren","orphaned","cMrk","cIndex","newChild","childType","withRemoteChanges","fn","prev","isChangingRemotely","isChangingLocally","PATCHING","withoutPatching","isPatching","isHighSurrogate","char","charCode","charCodeAt","isLowSurrogate","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","debugVerbose","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","editorActor","blockSchemaType","previousSnapshot","remotePatches","subscriptions","sub","on","snapshot","reset","forEach","patch","origin","history","undos","redos","splice","time","Date","unsubscribe","apply","op","getSnapshot","context","operations","step","lastOp","overwrite","shouldOverwrite","save","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","undo","otherPatches","transformedOperations","transformOperation","reversedOperations","Operation","inverse","reverse","withoutNormalizing","withoutSaving","normalize","err","deselect","pop","redo","transformedOperation","insertBlockIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","every","dType","currentFocus","properties","currentAnchor","newProperties","blockIndex","CURRENT_VALUE","useSyncValue","portableTextEditor","slateEditor","previousValue","updateValueFunctionRef","updateFromCurrentValue","useCallback","currentValue","updateValueDebounced","debounce","trailing","leading","updateFunction","isProcessingLocalChanges","isProcessingRemoteChanges","isChanged","isValid","hadSelection","childrenLength","_","removeNodes","insertNodes","pteCreateTextBlock","select","slateValueFromProps","i","currentBlock","currentBlockIndex","oldBlock","validationValue","validation","console","send","_updateBlock","_replaceBlock","error","currentSelection","selectionFocusOnBlock","setNodes","isTextBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","isSpanNode","insertText","voids","FLUSH_PATCHES_THROTTLED_MS","process","env","NODE_ENV","Synchronizer","useSelector","_temp","_temp2","getValue","pendingPatches","syncValue","onFlushPendingPatches","onFlushPendingPatchesThrottled","throttle","isNormalizing","isInitialValueFromProps","s_0","s","createOperationToPatches","textBlockName","insertTextPatch","beforeValue","textChild","isTextSpan","prevBlock","prevChild","prevText","diffMatchPatch","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","keys","keyName","val","indexOf","insertNodePatch","targetKey","splitNodePatch","splitBlock","targetValue","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","updatedBlock","newBlock","updatedSpan","removedSpan","moveNodePatch","targetChild","childToInsert","createWithEventListeners","maxBlocks","subscription","behaviorEvent","placement","addMark","removeMark","deleteBackward","unit","deleteForward","insertBreak","insertSoftBreak","createWithMaxBlocks","rows","createWithObjectKeys","normalizeNode","isEditor","entry","Node","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","findBlockAndChildFromPath","newValue","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","debugState","targetBlockPath","targetChildPath","blocksToInsert","targetBlockIndex","normalizedIdx","childrenToInsert","targetChildIndex","childInsertPath","newText","nextRest","prevRest","c","newVal","applyAll","previousSelection","_child","isKeyedSegment","segment","stateName","findBlockFromPath","isMatch","createWithPatches","patchFunctions","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","handlePatches","p","editorWasEmpty","editorIsEmpty","createWithPlaceholderBlock","nextPath","next","insertNode","createWithPortableTextBlockStyle","defaultStyle","nodeEntry","SlateText","isPortableTextSpan","isPortableTextBlock","getPreviousSpan","spanPath","previousSpan","getNextSpan","nextSpan","isAfter","createWithPortableTextMarkModel","nextNode","mergeNodes","parent","orphanedAnnotations","markDefKeys","Set","newMarkDefs","markDef","has","add","previousSelectionIsCollapsed","newSelectionIsCollapsed","focusSpan","mode","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","collapsedSelection","marksWithoutAnnotations","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","isExpanded","deletingFromTheEnd","deletingAllText","nextSpanHasSameAnnotation","marksWithoutAnnotationMarks","oldDefs","addDecoratorActionImplementation","split","hanging","splitTextNodes","eMark","lonelyEmptySpan","existingMarks","existingMarksWithoutDecorator","existingMark","removeDecoratorActionImplementation","isDecoratorActive","selectedTextNodes","toggleDecoratorActionImplementation","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","ptRange","existing","hasChanges","createWithSchemaTypes","isPortableTextListBlock","obj","createWithUtils","pteExpandToWord","textNode","focusOffset","charsBefore","charsAfter","isEmpty","str","whiteSpaceBeforeIndex","newStartOffset","whiteSpaceAfterIndex","newEndOffset","isNaN","setSelection","withPlugins","e","operationToPatches","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","slateEditors","createSlateEditor","config","existingSlateEditor","id","unsubscriptions","instance","withReact","createEditor","initialValue","toggleListItemActionImplementation","isListItemActive","removeListItemActionImplementation","addListItemActionImplementation","guards","createGuards","selectedBlocks","unsetNodes","toggleStyleActionImplementation","isStyleActive","removeStyleActionImplementation","addStyleActionImplementation","createEditableAPI","blur","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","focusBlock","descendant","focusChild","insertChild","focusChildPath","focusNode","move","distance","insertBlock","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","activeAnnotations","spans","isAnnotationActive","annotationType","addAnnotation","paths","addAnnotationActionImplementation","removeAnnotation","getSelection","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","selectionMarkDefs","reduce","accMarkDefs","spanMarkDefs","markKey","originalSelection","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationActionImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","SlatePath","nextSpansWithSameAnnotation","blocks","marksWithoutAnnotation","toggleAnnotationActionImplementation","focusBlockPath","lastBlock","insertBlockObjectActionImplementation","insertBreakActionImplementation","focusDecorators","focusAnnotations","anchorBlockPath","start","end","edges","lastFocusBlockChild","atTheEndOfBlock","atTheStartOfBlock","nextBlockPath","selectionAcrossBlocks","splitNodes","nextNodePath","newMarkDefKeys","Map","prevNodeSpans","prevNodeSpan","newMarks","always","insertSoftBreakActionImplementation","insertInlineObjectActionImplementation","focusTextBlock","insertSpanActionImplementation","textBlockSetActionImplementation","textBlockUnsetActionImplementation","behaviorActionImplementations","delete.backward","delete.forward","delete.block","delete.text","blockOffsetToSpanSelectionPoint","blockOffset","insert.text","insert.text block","effect","move.block","move.block down","move.block up","hasPrevious","previous","noop","newSelection","select.previous block","previousBlockPath","select.next block","reselect","performAction","performDefaultAction","editorMachine","setup","events","emitted","input","actions","assign","behaviors","assertEvent","emit","pendingEvents","enqueueActions","enqueue","defaultAction","eventBehaviors","behavior","raise","actionIntends","editorContext","behaviorOverwritten","eventBehavior","shouldRun","guard","actionIntendSets","actionSet","actionIntend","nativeEvent","createMachine","coreBehaviors","initial","states","pristine","idle","normalizing","mutation","dirty","defaultKeyGenerator","randomKey","getByteHexTable","table","whatwgRNG","rnds8","Uint8Array","getRandomValues","createActor","editorConfigToMachineInput","createEditorFromActor","useCreateEditor","useActorRef","schemaDefinition","hasOwnProperty","editable","listener","_internal","EditorActorContext","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","startTransition","PortableTextEditor","Component","constructor","change$","Subject","setEditable","parseInt","componentDidUpdate","prevProps","editorRef","render","legacyPatches","incomingPatches$","patches$","change","blockStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","subscribe","payload","RouteEventsToChanges","handleChange","useEffectEvent","bb5","isLoading","EMPTY_MARKS","Leaf","leaf","renderDecorator","renderAnnotation","spanRef","blockSelected","setFocused","setSelected","decoratorValues","annotationMarks","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","winSelection","window","rangeCount","getRangeAt","intersectsNode","onBlur","onFocus","onSelection","content","returnedChildren","DEFAULT_HOTKEYS","custom","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","cat","hotkey","isHotkey","possibleMark","possibleCommand","command","createWithInsertData","blockTypeName","spanTypeName","whitespaceOnPasteMode","unstable_whitespaceOnPasteMode","toPlainText","setFragmentData","data","originEvent","startVoid","void","endVoid","domRange","toDOMRange","contents","cloneContents","voidNode","r","cloneRange","domNode","setEndAfter","querySelectorAll","zw","isNewline","getAttribute","textContent","elm","removeAttribute","hasAttribute","ownerDocument","createElement","asHTML","innerHTML","fragment","asJSON","asPlainText","clearData","insertPortableTextData","pText","getData","parsed","parse","slateValue","_regenerateKeys","errorDescription","insertTextOrHTMLData","html","insertedType","htmlToBlocks","normalizeBlock","textToHtml","escapeHtml","line","replace","_insertFragment","insertData","insertFragmentData","insertFragment","entityMap","editorTypes","newNode","NewNodeNoDefs","allowedAnnotations","oldKey","newKey","nodeWithNewKeys","withSyncRangeDecorations","syncRangeDecorations","originalApply","PLACEHOLDER_STYLE","userSelect","pointerEvents","right","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onClick","rangeDecorations","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","ref","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","rangeDecorationState","setRangeDecorationsState","rangeDecorationsRef","useSlate","withInsertData","withHotKeys","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","decoration","rangeDecoration","component","restoreSelectionFromProps","normalizedSelection","slateRange","o","newSlateRanges","rangeDecorationItem","SlateRange","onMoved","newRange","newRangeSelection","onReady","onInvalidValue","onValueChanged","syncedRangeDecorations","setSyncedRangeDecorations","teardown","handleCopy","clipboardData","handlePaste","onPasteResult","Promise","resolve","then","result","catch","finally","handleOnFocus","isDefaultPrevented","lastNodePath","last","lastBlockPath","lastNodeFocused","lastBlockIsVoid","handleOnBlur","isPropagationStopped","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","domSelection","getWindow","existingDOMRange","newDOMRange","startOffset","endOffset","removeAllRanges","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","keyboardEvent","code","altKey","ctrlKey","metaKey","shiftKey","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","decorate","intersection","SlateEditable","EditorContext","React","EditorProvider","initialConfig","useEditor","EditorEventListener","defaultCompare","a","b","useEditorSelector","selector","compare"],"mappings":"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","x_google_ignoreList":[18,31]}